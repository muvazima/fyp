@&#MAIN-TITLE@&#An iterative approach for reducing the impact of infrastructure maintenance on the performance of railway systems

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Considering robustness when adapting the train schedule to maintenance actions is new.


                        
                        
                           
                           By iteratively re-routing and re-timing trains, cancelations are minimized.


                        
                        
                           
                           The developed algorithm improves the robustness of the service with more than 10 percent.


                        
                        
                           
                           All this is a significant improvement compared to the state-of-the-art methods.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Transportation

Railway timetabling

Robustness

Maintenance

Mixed integer linear programing

@&#ABSTRACT@&#


               
               
                  Planned infrastructure works reduce the available capacity of a railway system and make it more vulnerable to conflicts and delay propagation. The starting point of this paper is a published timetable that needs to be adapted due to the temporary unavailability of some resources. Since the timetable is in operation, changed arrival or departure times and cancelations have an impact on the passengers who need to adapt their travel behavior. In the light of passenger service, a trade-off is made between these inconveniences and the delays that occur in practice due to the reduced capacity. Taking the robustness of the adapted railway timetable into account is a new approach to rescheduling in case of a planned infrastructure unavailability. In this paper, an algorithm that adjusts the train routing and the train schedule to the planned maintenance interventions and keeps the level of passenger service as high as possible is presented. To avoid large inconveniences, the developed algorithm tries to minimize the number of cancelations. Computational results show that by allowing small modifications to the routing and the timetable, the robustness of the resulting solution can improve by more than 10 percent and only few trains need to be canceled.
               
            

@&#INTRODUCTION@&#

When a track is blocked due to infrastructure works, a diversion and often some delays can be expected. In general, track maintenance or railway construction works are planned well in advance and, when possible, railway infrastructure managers try to schedule these interventions during periods of low activity or no activity. When this is not possible, the train schedule needs to be adapted. This is the situation that is considered in this paper. Where all related research is about scheduling the maintenance itself or about the impact the maintenance has on the train planning, we go one step further and focus on the impact of the maintenance on the performance of a railway system. The performance indicator that is used in this paper is the passenger service. How this passenger service is modeled and measured is explained in the following section. This paper presents an algorithm that integrates the rerouting, retiming and cancelation of trains in order to obtain a robust schedule in case of unavailable tracks due to planned maintenance interventions. The aim is to keep the total hindrance for the passengers as low as possible. Simulation of the altered railway planning proves that our algorithm indeed fulfills this aim. Next to this, we also show that the typical objectives used in the state-of-the-art literature are insufficient and not always beneficial for the passengers.

A planned unavailability of some parts of the railway infrastructure occurs due to, for example, planned track maintenance or construction works. The term maintenance is used to cover all these reasons. In contrast with the (relatively short) maintenance actions that are studied in Van Zante-De Fokkert, Den Hertog, Van Den Berg, and Verhoeven (2007), we consider large maintenance tasks which last (much) longer: a group of tracks in the station area cannot be used for at least a number of consecutive days or weeks. Hence, interference with trains in operation has to be taken into account. Three examples of the kind of maintenance works that we consider are presented in Fig. 1
                        . This figure is a schematic overview of the station area in Brussels (Belgium). The maintenance works are indicated with dashed lines. All tracks and platforms are bi-directional, except for the six oriented platforms in the central station.

Because maintenance is very costly and the scheduling of maintenance interventions is very difficult and subject to many constraints (Budai-Balke, 2009), we consider the maintenance planning as given (and unchangeable) such that the tracks that are closed for maintenance, the so-called track possessions, are known well in advance. Due to these track possessions, the original timetable and routing become infeasible. Another consequence of the track possessions is the reduction of the available capacity, which is defined as the number of trains that can be scheduled in a conflict-free way such that no train uses closed tracks.

To avoid conflicts with the maintenance actions, some rerouting and rescheduling interventions are required. In this paper, an algorithm is developed that can guide this process. When making the modifications to the published timetable, the goal that is strived for is to minimize the decrease in service level for the passengers (passenger service). This corresponds to (i) the condition that no train can be routed over any of the closed tracks during the maintenance period, (ii) the timetable for the remaining trains should be conflict-free, (iii) the number of trains that will be taken out of operation to fit the previous condition should be as small as possible, and (iv) the updated schedule should be as robust as possible.

It should be noted that we don’t consider transferring passengers in our case study, since unfortunately no data is available about the numbers of passengers transferring between any pair of trains.


                        Definitions
                     

Before continuing, some definitions are needed. Define the (minimal) time span between two trains as the smallest time separation between their occupation times on the tracks and switches that they have in common. We say that a timetable is conflict-free or feasible when the minimal time span for all pairs of trains is positive. To distinguish a conflict between two trains (train-train conflict) from a conflict between a train and a track possession, the term maintenance conflict is used for a conflict between a train and a track possession. Similar to a (train-train) conflict-free timetable, a timetable without maintenance conflicts is said to be maintenance-conflict-free.

Similar to the approach of Caimi, Burkolter, and Herrmann (2005), Kroon, Huisman, and Maróti (2008b), Salido, Barber, and Ingolotti (2012), the propagation of delays is reduced by enlarging the minimal time spans between two trains. Therefore, we define the spreading cost objective function in order to minimize the spreading cost. Let t and t′ be two trains whose routes have at least one track or switch in common and define 
                           
                              
                                 B
                                 
                                    t
                                    ,
                                    
                                       t
                                       ′
                                    
                                 
                              
                              ∈
                              
                                 R
                                 +
                              
                           
                         as the minimal time span in minutes between these trains. The (spreading) cost 
                           
                              C
                              
                                 t
                                 ,
                                 
                                    t
                                    ′
                                 
                              
                           
                         of two trains t and t′ is given by

                           
                              
                                 
                                    
                                       C
                                       
                                          t
                                          ,
                                          
                                             t
                                             ′
                                          
                                       
                                    
                                    =
                                    
                                       {
                                       
                                          
                                             
                                                15
                                             
                                             
                                                
                                                   if
                                                   
                                                   
                                                      B
                                                      
                                                         t
                                                         ,
                                                         
                                                            t
                                                            ′
                                                         
                                                      
                                                   
                                                   <
                                                   0.1
                                                   
                                                   (conflicting),
                                                
                                             
                                          
                                          
                                             
                                                
                                                   1
                                                   /
                                                   
                                                      
                                                         B
                                                         ˜
                                                      
                                                      
                                                         t
                                                         ,
                                                         
                                                            t
                                                            ′
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   if
                                                   
                                                   0.1
                                                   ≤
                                                   
                                                      B
                                                      
                                                         t
                                                         ,
                                                         
                                                            t
                                                            ′
                                                         
                                                      
                                                   
                                                   <
                                                   15
                                                   
                                                   minutes
                                                   ,
                                                
                                             
                                          
                                          
                                             
                                                0
                                             
                                             
                                                
                                                   if
                                                   
                                                   
                                                      B
                                                      
                                                         t
                                                         ,
                                                         
                                                            t
                                                            ′
                                                         
                                                      
                                                   
                                                   ≥
                                                   15
                                                   
                                                   or
                                                   
                                                   if
                                                   
                                                   t
                                                   
                                                   and
                                                   
                                                   
                                                      t
                                                      ′
                                                   
                                                   
                                                   don"t
                                                   
                                                   share
                                                
                                             
                                          
                                          
                                             
                                             
                                                
                                                   
                                                   
                                                   
                                                   
                                                   infrastructure,
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        where 
                           
                              
                                 B
                                 ˜
                              
                              
                                 t
                                 ,
                                 
                                    t
                                    ′
                                 
                              
                           
                         is 
                           
                              B
                              
                                 t
                                 ,
                                 
                                    t
                                    ′
                                 
                              
                           
                         rounded to one decimal place. The cost corresponding to a conflict is set equal to 15 and 
                           
                              C
                              
                                 t
                                 ,
                                 
                                    t
                                    ′
                                 
                              
                           
                         will be smaller than 15 if 
                           
                              
                                 B
                                 
                                    t
                                    ,
                                    
                                       t
                                       ′
                                    
                                 
                              
                              ≥
                              0.1
                           
                        . With this cost function, an increase of a smaller buffer will be better than an increase of a larger buffer. In this paper, we focus on small delays and consider a time span of 15 minutes large enough to avoid the propagation of delays. This cost function C was also used to build the objective function in Dewilde, Sels, Cattrysse, and Vansteenwegen (2014).

If the planned arrival times and/or departure times of a train are rescheduled to avoid a maintenance conflict, the differences in journey time between the original and the updated timing will be indicated with the term planned delays. As the name suggests, planned delays are known in advance. In contrast with the planned delays, the real or unplanned delays are the commonly known delays that occur, for example, due to train-train conflicts during operation and are not known a priori.

Define Δdep
                         (Δarr
                        ) as the difference in departure (arrival) time for a train due to the rescheduling actions. If the train departs later (earlier) in the updated timetable than in the original one, Δdep
                         becomes larger (smaller) than 0. If the train arrives later (earlier) in the updated timetable than in the original one, Δarr
                         becomes larger (smaller) than 0. Using this notation, the planned delay of a given train is measured as follows

                           
                              (1)
                              
                                 
                                    
                                       
                                          
                                             planned
                                             
                                             delay
                                             =
                                             
                                                {
                                                
                                                   
                                                      
                                                         
                                                            max
                                                            (
                                                            
                                                               Δ
                                                               
                                                                  d
                                                                  e
                                                                  p
                                                               
                                                            
                                                            ,
                                                            
                                                               Δ
                                                               
                                                                  a
                                                                  r
                                                                  r
                                                               
                                                            
                                                            )
                                                         
                                                      
                                                      
                                                         
                                                            if
                                                            
                                                            
                                                               Δ
                                                               
                                                                  d
                                                                  e
                                                                  p
                                                               
                                                            
                                                            ≥
                                                            0
                                                            
                                                            and
                                                            
                                                            
                                                               Δ
                                                               
                                                                  a
                                                                  r
                                                                  r
                                                               
                                                            
                                                            ≥
                                                            0
                                                            ,
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            max
                                                            (
                                                            |
                                                            
                                                               Δ
                                                               
                                                                  d
                                                                  e
                                                                  p
                                                               
                                                            
                                                            |
                                                            ,
                                                            |
                                                            
                                                               Δ
                                                               
                                                                  a
                                                                  r
                                                                  r
                                                               
                                                            
                                                            |
                                                            )
                                                         
                                                      
                                                      
                                                         
                                                            if
                                                            
                                                            
                                                               Δ
                                                               
                                                                  d
                                                                  e
                                                                  p
                                                               
                                                            
                                                            ≤
                                                            0
                                                            
                                                            and
                                                            
                                                            
                                                               Δ
                                                               
                                                                  a
                                                                  r
                                                                  r
                                                               
                                                            
                                                            ≤
                                                            0
                                                            ,
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               |
                                                            
                                                            
                                                               Δ
                                                               
                                                                  d
                                                                  e
                                                                  p
                                                               
                                                            
                                                            
                                                               |
                                                               +
                                                               |
                                                            
                                                            
                                                               Δ
                                                               
                                                                  a
                                                                  r
                                                                  r
                                                               
                                                            
                                                            
                                                               |
                                                            
                                                         
                                                      
                                                      
                                                         
                                                            if
                                                            
                                                            
                                                               Δ
                                                               
                                                                  d
                                                                  e
                                                                  p
                                                               
                                                            
                                                            ≤
                                                            0
                                                            
                                                            and
                                                            
                                                            
                                                               Δ
                                                               
                                                                  a
                                                                  r
                                                                  r
                                                               
                                                            
                                                            ≥
                                                            0
                                                            ,
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         0
                                                      
                                                      
                                                         
                                                            if
                                                            
                                                            
                                                               Δ
                                                               
                                                                  d
                                                                  e
                                                                  p
                                                               
                                                            
                                                            ≥
                                                            0
                                                            
                                                            and
                                                            
                                                            
                                                               Δ
                                                               
                                                                  a
                                                                  r
                                                                  r
                                                               
                                                            
                                                            ≤
                                                            0
                                                            .
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

An earlier departure or postponed arrival is considered as a disadvantage. When a train is scheduled to depart later or arrive earlier than in the original timetable, this can be advantageous as well as disadvantageous for the passengers (Bates, Polak, Jones, & Cook, 2001; Savelberg & Bakker, 2010; Tseng, Rietveld, & Verhoef, 2005). For example, if it results in a longer waiting time before or after the trip by train. Since one or more trains can be canceled, it is possible, in theory, that a train departs later and arrives earlier than in the original timetable. In this case, the planned delay is set to zero, since this can also be advantageous or disadvantageous. Anyway, this phenomenon never actually happened during our experiments.

In case of a planned cancelation, passengers (temporarily) need to take an alternative train or search for an alternative mode of transport. However, in this work, we assume that the passenger flows are the same for the original timetable and any updated one. So if a train needs to be canceled, the passengers of this train will face some planned delay when taking an alternative train. The values of Δdep
                         and Δarr
                         can in this case be determined on the basis of the departure and arrival time of the original (canceled) train and the departure and arrival time of the alternative train or transport mode. Again, the planned delay, calculated with (1), is then a measure for the inconvenience of the passengers since they have to adapt their journey to the new schedule.

Similar to the difference between planned delays and real delays, we also define the planned travel time as the travel time according to the originally published timetable, under ideal circumstances and without maintenance. In general, a small percentage of the planned travel time is included to absorb delays. This extra time is called a supplement. The real travel time is then the time needed in practice to make the trip.

Finally, the algorithm we present consists of three parts: (i) solving the train routing problem in which each train is assigned to exactly one route through the network, (ii) the rerouting and rescheduling part in which a new, maintenance-conflict-free and conflict-free schedule can be assigned to each train after some changes in timing and routing are applied, and (iii) the cancelation module in which a train that cannot avoid a maintenance conflict is taken out of operation. When running the algorithm, the different parts are considered iteratively until no conflicts with the maintenance actions remain.

The interference between the trains and the infrastructure maintenance is twofold. On the one hand, there is the foreseen hindrance due to one or more trains wanting to use the same part of the infrastructure at the same time, which leads to planned delays. On the other hand, there is the unforeseen hindrance since the reduced capacity, and thus the reduced number of alternative routes, increases the system’s sensitivity to delay propagation. This increased sensitivity will significantly influence the passenger service. Therefore, we believe that changing the train schedule to cope with the foreseen hindrance should only be considered as the first step. In order to avoid a cascade of secondary delays during operations, the robustness of the updated schedule should also be optimized. In previous research (Dewilde, Sels, Cattrysse, & Vansteenwegen, 2011), we defined robustness as follows: A railway system that is robust minimizes the real weighted travel time (RWTT) of the passengers in case of frequently occurring, small disturbances. According to this definition, a system is robust when all the passengers reach their destination as fast as possible, not on paper but during the real operation, while taking into account delays, missed transfers, and cancelations.

In order to measure the RWTT, the durations of all events along the journey of all passengers are weighted and summed. For example, if a passenger arrives at his destination with a delay of 2 minutes and if the weight of this type of delay is 3, this arrival delay adds 
                           
                              3
                              ·
                              2
                              =
                              6
                           
                         minutes to the RWTT. Determining the exact value of these weights would be a complete research project in itself and is a different field of research. Therefore, the values that will be used in this research are based on the valuation of time in public transportation studied by Savelberg and Bakker (2010), Mackie, Jara-Díaz, and Fowkes (2001), Wardman (2004). Among others, Corman, D’Ariano, and Hansen (2014), Goverde (1998), Sels, Dewilde, Cattrysse, and Vansteenwegen (2013), Van Oort (2011), Vansteenwegen and Van Oudheusden (2006, 2007) used values of time to indicate the (negative) perception of delays. In case of maintenance actions that interfere with the regular train services, the timetable gets updated and planned delays arise. Since planned delays extend the normal journey time by an early departure and/or a postponed arrival, the adaptation to the updated timetable is considered as an extra action of a journey and is counted as part of the RWTT. In Table 1
                         all events that influence the real travel time are included. The RWTT is then computed by summing the weighted duration of all events per passenger per day. For instance, in case of an unplanned cancelation, the passengers face a delay and thus this event gets a weight of 3. The duration of the delay due to a canceled train can be estimated based on the set of alternative trains (Dollevoet & Huisman, 2014; Dollevoet, Huisman, Schmidt, & Schöbel, 2012) or based on the period or the frequency of trains on the same line (Goverde, 1998; Vansteenwegen & Van Oudheusden, 2006). Independent of how the duration is estimated, the duration is multiplied by a weight of 3 in the RWTT, as is explained next. From the moment the passengers board an alternative train, their RWTT is affected by non-used supplements or arrival delays of the alternative train.

For a fair comparison, a reference system (ref) needs to be defined and the robustness score is defined relative to this reference system. The robustness of system X is then computed as follows

                           
                              (2)
                              
                                 
                                    R
                                    o
                                    b
                                    
                                       (
                                       p
                                       e
                                       r
                                       c
                                       e
                                       n
                                       t
                                       )
                                    
                                    =
                                    
                                       
                                          RWTT
                                          (
                                          X
                                          )
                                       
                                       
                                          RWTT
                                          (
                                          ref
                                          )
                                       
                                    
                                    .
                                 
                              
                           
                        The smaller the resulting value, the shorter the RWTT of system X and thus the more robust system X is. We refer to Dewilde et al. (2011), Dewilde, Sels, Cattrysse, and Vansteenwegen (2013) for more details.

The structure of our approach (iteratively trying to improve the routing and the timing of the trains) originates from the method that we developed to improve the robustness of a railway timetable (without maintenance actions) in and around large and complex stations (Dewilde et al., 2013, 2014), but the implementation is significantly different. We now start from an infeasible solution instead of a feasible solution, due to the restricted network, and, for instance, we consider the cancelation of trains.

To perform the computational experiments, some assumptions are made. In this section, an overview of the most relevant assumptions is given.

This paper focuses on infrastructure works that last for a number of days such that the transition between the original timetable and the updated one happens during periods of no or low operation. Moreover, the start and the duration of the resource unavailability is considered given and fixed. This means that no real-time changes are considered.

Although safety regulations imply speed limitations on tracks neighboring the maintenance zone, this is not considered in this paper. The main focus of this paper is on station areas, which normally already have speed restrictions. As a consequence, maintenance actions in this case do not require further speed limitations. Thus, we consider differences in departure or arrival time and cancelations as the only source of planned delays.

Finally, as is discussed in Section 4, the size of the planned delays is bounded from above by the algorithm to keep the structure of the original timetable. Therefore, it is assumed that these small timetable changes do not persuade passengers to take another train if theirs is not canceled. Furthermore, transfers are not considered in our case study because no data is available about the size of transferring passenger flows. Moreover, in case of only small timetable deviations, no rolling stock or crew schedule conflicts are expected to arise. Obviously, if trains need to be canceled, the rolling stock and crew schedule have to be adapted.

In the next section, the presented approach is situated in the state of the art on rescheduling a railway system in case of railway maintenance works. Sections 3 and 4 discuss the developed methodology and the simulation module. In Section 5, the computational results are presented. This paper ends with the conclusions and some thoughts for further research.

There are many works that concentrate on timetable and route planning on the mid-long term. Recent surveys on this topic are Cacchiani and Toth (2012), Caprara, Kroon, Monaci, Peeters, and Toth (2007), Caprara, Galli, and Toth (2011) and Lusby, Larsen, Ehrgott, and Ryan (2011). Recently, there are also many papers published on real-time timetable rescheduling in case of small disruptions (Acuna-Agost, Michelon, Feillet, & Gueye, 2011a, 2011b; Boccia, Mannino, & Vasiyev, 2013; Caimi, Fuchsberger, Laumanns, & Luethi, 2012; Corman, D’Ariano, Pacciarelli, & Pranzo, 2010, 2012; D’Ariano, Pacciarelli, & Pranzo, 2008; Dollevoet et al., 2012; Kecman, Corman, D’Ariano, & Goverde, 2013; Lusby, Larsen, Ehrgott, & Ryan, 2013; Mannino & Mascis, 2009; Schöbel & Kratz, 2009; Törnquist & Persson, 2007) or large disruptions (Albrecht, Panton, & Lee, 2013; Brucker, Heitmann, & Knust, 2002; Corman, D’Ariano, Hansen, & Pacciarelli, 2011; Louwerse & Huisman, 2014; Wiklund, 2007), Veelenturf, Kidd, Cacchiani, Kroon, and Toth. The situation that we address lies in between these two problem descriptions. This paper focuses on timetable rescheduling in case of large disruptions that are well-known in advance. Thus our planning is also situated on the mid-long term, which implies that there are almost no restrictions on the computation time and which gives us the opportunity to set high standards for the adapted schedule (low number of cancelations, robustness). However, there is the restriction that the adapted timetable should be close to the one that is in operation in normal conditions (without maintenance works). Another novelty of our approach is the focus on robustness for this type of timetable rescheduling.

In Albrecht et al. (2013) and Pudney and Wardrop (2004) the train scheduling and maintenance planning is done simultaneously. Track possessions are modeled as pseudo trains and the train timetable, including the pseudo trains, is computed with the objective to minimize the planned delays. In our approach, however, we consider the place and time of the maintenance works as fixed input and we only allow small changes to the current timetable in order to obtain a feasible and robust train service.

Railway maintenance during daily operation disturbs the timetable. Although in our approach, we consider the maintenance planning as fixed, there exist approaches for railway maintenance planning that take the impact on the timetable into account. For example Van Zante-De Fokkert et al. (2007) schedule cyclic preventive maintenance with a period of 4 weeks during the moments of low activity or no activity in the Dutch timetable. Their main goal was to improve the safety for the maintenance workers. However, in our research we consider large maintenance (or construction) tasks which last (much) longer such that interference with trains in operation is inevitable. In the dissertation of Budai-Balke (2009) an extensive literature overview on scheduling railway infrastructure maintenance within a given train timetable is given. Budai-Balke presents in this dissertation also several exact and non-exact solution methods to minimize the maintenance cost of a maintenance planning within a given timetable. Also Forsgren, Aronsson, and Gestrelius (2013) start from an initial timetable and use a mixed integer programing model (MIP) to schedule the track possessions in the (modifiable) train schedule. The track possessions they consider last for some hours and have flexible start and end times. The objective used in the MIP is threefold: (i) minimize the number of maintenance conflicts in the timetable, (ii) minimize the number of canceled trains, and (iii) minimize the planned delays.

Once the maintenance planning is fixed, the next step is to make the timetable again feasible. Our research focuses on this step. By minimizing the planned delays, some of the previous mentioned approaches for planning railway maintenance already give a solution for this feasibility problem. Other actions to make the timetable again feasible are rerouting, canceling or slowing down trains, for example to let them wait until the maintenance is over (if realistic) (Forsgren et al., 2013). But, in our approach, we go one step further than the state of the art. We make sure that the adapted timetable is also as robust as possible, while constraining each departure and arrival time into a time window of a few minutes around its initial value. We present a method that assures feasibility and aims for robustness by doing stepwise small changes to the timing and the routing of the trains. This approach is closely related to the approach described by Burdett and Kozan (2009). Although they consider the insertion of additional trains in an existing service instead of changes due to track possessions, they do also consider time windows for the times used in the existing service and they consider stepwise small changes. Their first goal is to make the new service feasible and a secondary objective is to optimise a generic measure of quality such as total train delay.

Our approach is the first that studies the sensitivity to delay propagation of updated train schedules and proposes an approach which takes the sensitivity to delay propagation into account when updating the train schedule for a set of planned track possessions. Furthermore, concerning feasibility, the stepwise small changes restrict the memory usage and the computation time of this approach in comparison with approaches that make use of a list of all combinations of routes and possible timings (Forsgren et al., 2013). Moreover, in Section 5.3, we show that the objective of minimizing the planned delays can have a negative impact on the passenger service as it is defined in Section 1.1. In our approach, we restrict the planned delays, but we don’t minimize them. In fact, the interference between the timetable and the infrastructure maintenance is twofold. On the one hand, there is the foreseen hindrance due to one or more trains wanting to use the same part of the infrastructure at the same time, which leads to planned delays. Also canceled trains lead to planned delays. On the other hand, there is the unforeseen hindrance because of the reduced capacity that increases the systems sensitivity to delay propagation. Our approach provides a solution that restricts both types of hindrances.

When it comes to constructing a railway timetable, robustness is often considered as a crucial performance indicator. In short, the kind of robustness we consider is about minimizing the travel time in practice of all the passengers, taking into account daily occurring (small) delays (Dewilde et al., 2011; Sels et al., 2013; Takeuchi, Tomii, & Hirai, 2007). In Dewilde et al. (2013, 2014) as well as in Kroon, Maróti, Retel Helmrich, Vromans, and Dekker (2008a), systems with a high capacity usage and a heterogeneous fleet of trains have been studied. It is shown that with limited changes, the robustness of such a system can be significantly increased. In Dewilde et al. (2013, 2014), several aspects of the planning are considered to improve the system’s robustness. The first aspect is the routing of the trains through the station area, the so-called train routing problem that is also studied by Caimi et al. (2005), Lusby et al. (2011), and Zwaneveld et al. (1996). Secondly, the timing of trains is considered. In this phase, the heterogeneity of the system is analyzed like in Vromans, Dekker, and Kroon (2006) or slack time is allocated to and between some actions as is done by Kroon et al. (2008a), Salido et al. (2012), and Shafia, Aghaee, Sadjadi, and Jamili (2012). Doing so, a trade-off is made between the real-time effects of adding supplements and buffers that are too large and cause unnecessary idling time or too small and cannot buffer against primary delays. The last component to improve the robustness in and around large stations that is studied in Dewilde et al. (2013, 2014) is the platform assignment which is also considered by Carey and Crawford (2007) and Sels et al. (2014). Where during the optimization process, robustness is approximated by an objective function that spreads the usage of infrastructure resources by the trains (Kroon et al., 2008b; Vromans et al., 2006), a simulation module is used to measure the robustness of different timetables. We refer to Dewilde et al. (2013, 2014) and the references contained therein for more details. Burdett and Kozan (2014) consider a timetable as robust when the timetable performance is insensitive to delays of a specified level. The paper presents a generic approach to determine the operations “affected” by some level of delay and how these “affected operations” can be used to quantify the robustness of a timetable. Although the definition of robustness is clearly different compared to what we consider, we will also use this idea of affected operations when determining which trains need to be rerouted and/or rescheduled.

In case of a large disruption or urgent, unforeseen maintenance, real-time interventions are required. Delay management strategies that concern the transfers such as in Dollevoet et al. (2012), Meng and Zhou (2011), or train reallocation actions to satisfy the passenger demand (Canca, Barrena, Zarzo, Ortega, & Algaba, 2012) as well as real-time rerouting and rescheduling as studied by, among others, Corman et al. (2010), Louwerse and Huisman (2014), Tamura, Tomii, and Sato (2013) become appropriate. Another important aspect that must be considered then, is the rolling stock (re-)scheduling like is done in, for example, Cadarso, Marín, and Maróti (2013), Nielsen, Kroon, and Maróti (2012). Often, the rolling stock scheduling is being revised in cases of (planned) maintenance, see Budai-Balke (2009) and Cacchiani et al. (2012) for some examples, however, real-time interventions are beyond the scope of this paper.

@&#METHODOLOGY@&#

In this section, an algorithm that at the same time solves maintenance conflicts and improves the robustness of the altered railway system is presented. The idea is to solve maintenance conflicts step by step with the maintenance conflicts avoidance algorithm (MCAA) and to improve the robustness of the resulting maintenance-conflict-free (and conflict-free) solution with the post-optimization robustness improving algorithm. In the solution approach of the MCAA, intermediate solutions with maintenance conflicts are allowed. However, the final solution should be maintenance-conflict-free as well as conflict-free. In order to minimize the number of cancelations as much as possible, the algorithm iterates between its three modules: (i) the (train) routing module that is capable of handling maintenance conflicts at the cost of a penalty, (ii) the rerouting and rescheduling module that can reroute trains around the closed track and applies changes to the timing to make this rerouting possible, and (iii) the cancelation module that is called only when no routing or rerouting and rescheduling action succeeded in decreasing the number of trains that are scheduled over the closed tracks. The first two modules try to avoid maintenance conflicts and, to a smaller extent, improve the robustness. The difference between these two modules is that in the routing module the timing of the trains is considered fixed while in the rerouting and rescheduling module small changes to the timing are considered in order to create (more) opportunities for rerouting. If the train routing module and the rerouting and rescheduling module are not able to (further) reduce the number of trains that are scheduled over the closed tracks, the cancelation module is applied. In this case, one train is taken out of operation and then the algorithm returns to the routing module to check whether the freed capacity can be used to (re-)route another train. The outline of the MCAA is shown in Algorithm 1
                     .

After the MCAA has finished, a first maintenance-conflict-free (and conflict-free) solution is found. In the next step, we further improve the robustness of this first found maintenance-conflict-free (and conflict-free) solution by applying the robustness improving algorithm presented in Dewilde et al. (2013, 2014) without violating the maintenance-conflict-free property. This algorithm improves the robustness by iteratively searching for the optimal routing, applying small changes to the timing of the trains (single time shift, multiple time shifts, reordering of the trains) and evaluating the impact of platform changes. Since the results in Section 5 show that minimizing the planned delays does not always improve the robustness, no actions to reduce the planned delays are taken in this post-optimization.

Where the objective of the post-optimization robustness improving algorithm aims at reducing the spreading cost of two trains as is introduced in Section 1.1, the objective of the MCAA works twofold. As the main objective, it minimizes the total number of maintenance conflicts. To distinguish solutions with an equal amount of maintenance conflicts, it also considers the spreading cost.

Throughout this section, we will refer to the example network that is depicted in Fig. 2
                     . This network consists of two parallel tracks that are connected by switches. In total, three trains run over this network: two from left to right following route r
                     1 (trains t
                     1 and t
                     2) and one in the other direction on the lower track, namely train t
                     3 that follows route r
                     2. According to the original timetable, trains t
                     1 and t
                     3 enter the network simultaneously. A maintenance activity is scheduled on the upper track between the two switches.

Given the timing of the trains, the train routing module assigns exactly one route through the considered network to each train in a conflict-free way and it strives for a maintenance-conflict-free assignment. This module is based on the mathematical model in Dewilde et al. (2014), that, given the timing of the trains, assigns to every train a route in a conflict-free way, but does not take maintenance works into account. In order to incorporate the maintenance works in this model, some routes have to be made unavailable. However, in many cases, adding the hard constraint that no train is allowed to run over a closed track would make the solution infeasible, since the train routing module, just like the mathematical model of Dewilde et al. (2014), does not allow changes to the timing or to the inbound or outbound lines of the train. Consider the example of Fig. 2. Given that train t
                        1 enters the network at the same time as train t
                        3, it is impossible to find a feasible routing solution in which none of the trains uses a closed track without changing the timing. To avoid situations in which no solution is returned, we do not impose this hard constraint, but we add an extra (penalty) cost term to the objective function of the model such that using a closed track is possible but at a high cost. Afterwards, we will try to solve the remaining maintenance conflicts using the other modules of the MCAA. Notice that at the end of the entire algorithm, only feasible solutions are returned. Nevertheless, infeasible, intermediate solutions are allowed.

Before continuing, we introduce the concept of a trainroute. A trainroute is the combination of a train and a possible route for that train. In the example above, (t
                        1, r
                        1) and (t
                        1, r
                        3) are two trainroutes for train t
                        1.

Let T be the set of trains and Rt
                         the set of candidate routes for train t ∈ T. We define the set T × RT
                         as follows:

                           
                              
                                 
                                    T
                                    ×
                                    
                                       R
                                       T
                                    
                                    =
                                    
                                       {
                                       
                                          (
                                          t
                                          ,
                                          r
                                          )
                                       
                                       |
                                       t
                                       ∈
                                       T
                                       ,
                                       r
                                       ∈
                                       
                                          R
                                          t
                                       
                                       }
                                    
                                    .
                                 
                              
                           
                        Define for each trainroute (t, r) ∈ T × RT
                        , a binary decision variable x
                        (t, r) which is 1 if route r is assigned to train t and 0 otherwise. We can now impose that

                           
                              (3)
                              
                                 
                                    
                                       x
                                       
                                          (
                                          
                                             t
                                             1
                                          
                                          ,
                                          
                                             r
                                             3
                                          
                                          )
                                       
                                    
                                    +
                                    
                                       x
                                       
                                          (
                                          
                                             t
                                             3
                                          
                                          ,
                                          
                                             r
                                             2
                                          
                                          )
                                       
                                    
                                    ≤
                                    1
                                    ,
                                 
                              
                           
                        since selecting both trainroutes would cause a conflict as they require the same track simultaneously.

The MCAA’s main objective is the avoidance of maintenance conflicts. If there are multiple solutions with an equal amount of maintenance conflicts, the spreading of the trains is used to distinguish between these solutions. The objective function for the MCAA is designed on the base of the spreading cost objective function of Dewilde et al. (2013, 2014). In Section 1.1, we introduced this spreading cost objective function that minimizes the spreading costs C based on the minimal time span between trains. Since the minimal time span between two trains depends on the routes these trains follow, a route-index r is added to the notation introduced in Section 1.1. This way, 
                           
                              B
                              
                                 
                                    (
                                    t
                                    ,
                                    r
                                    )
                                 
                                 ,
                                 
                                    (
                                    
                                       t
                                       ′
                                    
                                    ,
                                    
                                       r
                                       ′
                                    
                                    )
                                 
                              
                           
                         represents the minimal time span between trainroutes (t, r) and (t′, r′) with the feature that 
                           
                              
                                 B
                                 
                                    
                                       (
                                       t
                                       ,
                                       r
                                       )
                                    
                                    ,
                                    
                                       (
                                       
                                          t
                                          ′
                                       
                                       ,
                                       
                                          r
                                          ′
                                       
                                       )
                                    
                                 
                              
                              <
                              0.1
                           
                         if and only if these two trainroutes are conflicting. With this notation, the spreading cost objective function becomes

                           
                              (4)
                              
                                 
                                    min
                                    
                                       ∑
                                       
                                          t
                                          ,
                                          
                                             t
                                             ′
                                          
                                          ∈
                                          T
                                       
                                    
                                    
                                       ∑
                                       
                                          r
                                          ∈
                                          
                                             R
                                             t
                                          
                                          ,
                                          
                                             r
                                             ′
                                          
                                          ∈
                                          
                                             R
                                             
                                                t
                                                ′
                                             
                                          
                                       
                                    
                                    
                                       C
                                       
                                          
                                             (
                                             t
                                             ,
                                             r
                                             )
                                          
                                          ,
                                          
                                             (
                                             
                                                t
                                                ′
                                             
                                             ,
                                             
                                                r
                                                ′
                                             
                                             )
                                          
                                       
                                    
                                    ·
                                    
                                       x
                                       
                                          (
                                          t
                                          ,
                                          r
                                          )
                                       
                                    
                                    ·
                                    
                                       x
                                       
                                          (
                                          
                                             t
                                             ′
                                          
                                          ,
                                          
                                             r
                                             ′
                                          
                                          )
                                       
                                    
                                    .
                                 
                              
                           
                        The usefulness of this objective function is that large time spans correspond to small costs and that two equally (medium sized) time spans are preferred over one large and one small one. Hence, as is discussed in Dewilde et al. (2013, 2014), the spreading cost objective function does not directly improve the robustness but only indirectly. Using (4) helps to avoid the propagation of delays and thus to minimize the probability of conflicts in practice which is beneficial for the robustness of the system. Using the robustness itself as objective is not tractable. The effectiveness of objective functions that are similar to ours are discussed in Kroon et al. (2008a), Caimi et al. (2005), Vromans (2005). The objective function in (4) will be used throughout the entire algorithm. The impact on the robustness is measured afterwards using simulation.

Extending this objective function to fit the MCAA’s goals is done by penalizing routes that run over a closed track through the addition of an extra term to (4)
                        
                           
                              (5)
                              
                                 
                                    min
                                    
                                       ∑
                                       
                                          t
                                          ,
                                          
                                             t
                                             ′
                                          
                                          ∈
                                          T
                                       
                                    
                                    
                                       ∑
                                       
                                          r
                                          ∈
                                          
                                             R
                                             t
                                          
                                          ,
                                          
                                             r
                                             ′
                                          
                                          ∈
                                          
                                             R
                                             
                                                t
                                                ′
                                             
                                          
                                       
                                    
                                    
                                       C
                                       
                                          
                                             (
                                             t
                                             ,
                                             r
                                             )
                                          
                                          ,
                                          
                                             (
                                             
                                                t
                                                ′
                                             
                                             ,
                                             
                                                r
                                                ′
                                             
                                             )
                                          
                                       
                                    
                                    ·
                                    
                                       x
                                       
                                          (
                                          t
                                          ,
                                          r
                                          )
                                       
                                    
                                    ·
                                    
                                       x
                                       
                                          (
                                          
                                             t
                                             ′
                                          
                                          ,
                                          
                                             r
                                             ′
                                          
                                          )
                                       
                                    
                                    +
                                    
                                       ∑
                                       
                                          t
                                          ∈
                                          T
                                       
                                    
                                    
                                       ∑
                                       
                                          r
                                          ∈
                                          
                                             R
                                             t
                                          
                                       
                                    
                                    
                                       P
                                       
                                          (
                                          t
                                          ,
                                          r
                                          )
                                       
                                    
                                    ·
                                    
                                       x
                                       
                                          (
                                          t
                                          ,
                                          r
                                          )
                                       
                                    
                                    ,
                                 
                              
                           
                        with P
                        (t, r) the penalty of trainroute (t, r). Note that 
                           
                              
                                 P
                                 
                                    (
                                    t
                                    ,
                                    r
                                    )
                                 
                              
                              =
                              0
                           
                         if r does not pass a closed track. The size of the other penalties is chosen according to a measure of importance. This measure is based on the type of the train. Ranked from important to less important, the following train types are used: international or high speed trains (type 4), intercity trains (type 3), interregional trains (type 2), and local trains (type 1). Peak hour trains are categorized according to their stopping regime. If trainroute (t, r) of train t with type typet
                         conflicts with a maintenance action, its penalty equals 
                           
                              
                                 P
                                 
                                    (
                                    t
                                    ,
                                    r
                                    )
                                 
                              
                              =
                              1000
                              ·
                              t
                              y
                              p
                              
                                 e
                                 t
                              
                           
                        . This way, the penalty of an international train is (much) larger than that of a local train, creating an incentive to reroute the more important trains before the less important ones. Since our main concern is to avoid conflicts with the maintenance actions, the penalties are chosen such that they are much larger than the total spreading cost (4). We want to add that we are well aware of multiple other criteria to determine the penalties, for example, using passenger flow information. Although the one above is selected, adjusting this to another rule is straightforward.

As a result, the mathematical model that is used to solve the train routing problem looks as follows:

                           
                              (6)
                              
                                 
                                    Minimize
                                    
                                       ∑
                                       
                                          t
                                          ∈
                                          T
                                       
                                    
                                    
                                       ∑
                                       
                                          r
                                          ∈
                                          
                                             R
                                             t
                                          
                                       
                                    
                                    
                                       z
                                       
                                          (
                                          t
                                          ,
                                          r
                                          )
                                       
                                    
                                    +
                                    
                                       P
                                       
                                          (
                                          t
                                          ,
                                          r
                                          )
                                       
                                    
                                    ·
                                    
                                       x
                                       
                                          (
                                          t
                                          ,
                                          r
                                          )
                                       
                                    
                                    .
                                 
                              
                           
                        Subject to

                           
                              (7)
                              
                                 
                                    
                                       
                                       
                                       
                                          
                                             
                                                ∑
                                                
                                                   
                                                      t
                                                      ′
                                                   
                                                   ∈
                                                   T
                                                
                                             
                                             
                                                ∑
                                                
                                                   
                                                      r
                                                      ′
                                                   
                                                   ∈
                                                   
                                                      R
                                                      
                                                         t
                                                         ′
                                                      
                                                   
                                                
                                             
                                             
                                                C
                                                
                                                   
                                                      (
                                                      t
                                                      ,
                                                      r
                                                      )
                                                   
                                                   ,
                                                   
                                                      (
                                                      
                                                         t
                                                         ′
                                                      
                                                      ,
                                                      
                                                         r
                                                         ′
                                                      
                                                      )
                                                   
                                                
                                             
                                             
                                                (
                                                
                                                   x
                                                   
                                                      (
                                                      t
                                                      ,
                                                      r
                                                      )
                                                   
                                                
                                                +
                                                
                                                   x
                                                   
                                                      (
                                                      
                                                         t
                                                         ′
                                                      
                                                      ,
                                                      
                                                         r
                                                         ′
                                                      
                                                      )
                                                   
                                                
                                                −
                                                1
                                                )
                                             
                                             ≤
                                             
                                                z
                                                
                                                   (
                                                   t
                                                   ,
                                                   r
                                                   )
                                                
                                             
                                             
                                             
                                             ∀
                                             
                                             
                                                (
                                                t
                                                ,
                                                r
                                                )
                                             
                                             ∈
                                             T
                                             ×
                                             
                                                R
                                                T
                                             
                                             ,
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (8)
                              
                                 
                                    
                                       
                                       
                                       
                                          
                                             
                                                ∑
                                                
                                                   r
                                                   ∈
                                                   
                                                      R
                                                      t
                                                   
                                                
                                             
                                             
                                                x
                                                
                                                   (
                                                   t
                                                   ,
                                                   r
                                                   )
                                                
                                             
                                             =
                                             1
                                             
                                             ∀
                                             
                                             t
                                             ∈
                                             T
                                             ,
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (9)
                              
                                 
                                    
                                       
                                       
                                       
                                          
                                             
                                                x
                                                
                                                   (
                                                   t
                                                   ,
                                                   r
                                                   )
                                                
                                             
                                             +
                                             
                                                ∑
                                                
                                                   
                                                      r
                                                      ′
                                                   
                                                   ∈
                                                   
                                                      R
                                                      
                                                         t
                                                         ′
                                                      
                                                      c
                                                   
                                                
                                             
                                             
                                                x
                                                
                                                   (
                                                   
                                                      t
                                                      ′
                                                   
                                                   ,
                                                   
                                                      r
                                                      ′
                                                   
                                                   )
                                                
                                             
                                             ≤
                                             1
                                             
                                             ∀
                                             
                                             
                                                (
                                                t
                                                ,
                                                r
                                                )
                                             
                                             ∈
                                             T
                                             ×
                                             
                                                R
                                                T
                                             
                                             ,
                                             
                                                t
                                                ′
                                             
                                             ∈
                                             T
                                             ∖
                                             
                                                {
                                                t
                                                }
                                             
                                             ,
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             
                                                R
                                                
                                                   t
                                                   ′
                                                
                                                c
                                             
                                             =
                                             
                                                {
                                                
                                                   r
                                                   ′
                                                
                                                ∈
                                                
                                                   R
                                                   
                                                      t
                                                      ′
                                                   
                                                
                                                :
                                                
                                                   B
                                                   
                                                      
                                                         (
                                                         t
                                                         ,
                                                         r
                                                         )
                                                      
                                                      ,
                                                      
                                                         (
                                                         
                                                            t
                                                            ′
                                                         
                                                         ,
                                                         
                                                            r
                                                            ′
                                                         
                                                         )
                                                      
                                                   
                                                
                                                =
                                                0
                                                }
                                             
                                             ,
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (10)
                              
                                 
                                    
                                       
                                       
                                       
                                          
                                             
                                                z
                                                
                                                   (
                                                   t
                                                   ,
                                                   r
                                                   )
                                                
                                             
                                             ≥
                                             0
                                             
                                             ∀
                                             
                                             
                                                (
                                                t
                                                ,
                                                r
                                                )
                                             
                                             ∈
                                             T
                                             ×
                                             
                                                R
                                                T
                                             
                                             ,
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (11)
                              
                                 
                                    
                                       
                                       
                                       
                                          
                                             
                                                x
                                                
                                                   (
                                                   t
                                                   ,
                                                   r
                                                   )
                                                
                                             
                                             ∈
                                             
                                                {
                                                0
                                                ,
                                                1
                                                }
                                             
                                             
                                             ∀
                                             
                                             
                                                (
                                                t
                                                ,
                                                r
                                                )
                                             
                                             ∈
                                             T
                                             ×
                                             
                                                R
                                                T
                                             
                                             .
                                          
                                       
                                    
                                 
                              
                           
                        
                     

The objective function (6) is similar to (5). The difference is that the model remains linear by the addition of auxiliary, continuous variables z
                        (t, r) that are bounded from below by constraint sets (7) and (10). The objective creates an incentive to set 
                           
                              z
                              =
                              0
                           
                        . When 
                           
                              
                                 x
                                 
                                    (
                                    t
                                    ,
                                    r
                                    )
                                 
                              
                              =
                              0
                           
                         for trainroute (t, r), this is possible and no spreading or penalty cost is counted. However, if 
                           
                              
                                 x
                                 
                                    (
                                    t
                                    ,
                                    r
                                    )
                                 
                              
                              =
                              1
                              ,
                           
                         then for each trainroute (t′, r′) with 
                           
                              
                                 x
                                 
                                    (
                                    
                                       t
                                       ′
                                    
                                    ,
                                    
                                       r
                                       ′
                                    
                                    )
                                 
                              
                              =
                              1
                           
                         the corresponding summand in the left hand side of (7) is positive and the minimization function in (6) assures that equality will arise. Constraint set (8) ensures that each train gets exactly one route assigned. When two trainroutes are incompatible, a constraint similar to (3) should be inserted in the model. However, based on Zwaneveld et al. (1996), we use the stronger clique inequalities (9) instead. All these cliques are generated in advance. Constraint sets (10) and (11) bound the variables.

In Dewilde et al. (2014), it is shown that based on this model, a solution cannot be found within one hour for the instances we consider. Therefore, an efficient preprocessing phase is presented so this model can be solved to optimality for a realistic and highly used network. This preprocessing phase is based on the following (dominance) property. If there exists a trainroute (t′, r′) that is incompatible with trainroute (t, r) and for every other trainroute 
                           
                              (
                              
                                 t
                                 ¯
                              
                              ,
                              
                                 r
                                 ¯
                              
                              )
                              ,
                           
                         it holds that the buffer time 
                           
                              B
                              
                                 
                                    (
                                    t
                                    ,
                                    r
                                    )
                                 
                                 ,
                                 
                                    (
                                    
                                       t
                                       ¯
                                    
                                    ,
                                    
                                       r
                                       ¯
                                    
                                    )
                                 
                              
                           
                         is smaller than the buffer time 
                           
                              
                                 B
                                 
                                    
                                       (
                                       
                                          t
                                          ′
                                       
                                       ,
                                       
                                          r
                                          ′
                                       
                                       )
                                    
                                    ,
                                    
                                       (
                                       
                                          t
                                          ¯
                                       
                                       ,
                                       
                                          r
                                          ¯
                                       
                                       )
                                    
                                 
                              
                              ,
                           
                         then trainroute (t, r) can be pruned without affecting the optimal objective function value of the final result. Indeed, trainroute (t, r) and trainroute (t′, r′) cannot be assigned together and independent of the other routes that are assigned, the contribution of (t′, r′) on the objective function value will always be better than that of trainroute (t, r). More formally, define for all (t, r) ∈ T × RT
                         the set Dom
                        (t, r) as

                           
                              
                                 
                                    
                                       
                                       
                                       
                                          
                                             D
                                             o
                                             
                                                m
                                                
                                                   (
                                                   t
                                                   ,
                                                   r
                                                   )
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             =
                                             
                                                {
                                                
                                                   (
                                                   
                                                      t
                                                      ′
                                                   
                                                   ,
                                                   
                                                      r
                                                      ′
                                                   
                                                   )
                                                
                                                ∈
                                                T
                                                ×
                                                
                                                   R
                                                   T
                                                
                                                
                                                :
                                                
                                                   
                                                      
                                                         
                                                            
                                                               B
                                                               
                                                                  
                                                                     (
                                                                     t
                                                                     ,
                                                                     r
                                                                     )
                                                                  
                                                                  ,
                                                                  
                                                                     (
                                                                     
                                                                        t
                                                                        ′
                                                                     
                                                                     ,
                                                                     
                                                                        r
                                                                        ′
                                                                     
                                                                     )
                                                                  
                                                               
                                                            
                                                            =
                                                            0
                                                            
                                                            and
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            ∀
                                                            
                                                               (
                                                               
                                                                  t
                                                                  ¯
                                                               
                                                               ,
                                                               
                                                                  r
                                                                  ¯
                                                               
                                                               )
                                                            
                                                            ∈
                                                            T
                                                            ×
                                                            
                                                               R
                                                               T
                                                            
                                                            :
                                                            
                                                               B
                                                               
                                                                  
                                                                     (
                                                                     t
                                                                     ,
                                                                     r
                                                                     )
                                                                  
                                                                  ,
                                                                  
                                                                     (
                                                                     
                                                                        t
                                                                        ¯
                                                                     
                                                                     ,
                                                                     
                                                                        r
                                                                        ¯
                                                                     
                                                                     )
                                                                  
                                                               
                                                            
                                                            ≤
                                                            
                                                               B
                                                               
                                                                  
                                                                     (
                                                                     
                                                                        t
                                                                        ′
                                                                     
                                                                     ,
                                                                     
                                                                        r
                                                                        ′
                                                                     
                                                                     )
                                                                  
                                                                  ,
                                                                  
                                                                     (
                                                                     
                                                                        t
                                                                        ¯
                                                                     
                                                                     ,
                                                                     
                                                                        r
                                                                        ¯
                                                                     
                                                                     )
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                                }
                                             
                                             ,
                                          
                                       
                                    
                                 
                              
                           
                        then (t, r) is dominated by all elements of Dom
                        (t, r), if any.

For example, ignoring the track possession in Fig. 2, route r
                        3 for train t
                        1 is dominated by its original route r
                        1 since the minimal time span of trainroute (t
                        3, r
                        2) with (t
                        1, r
                        1) is larger than the minimal time span with (t
                        1, r
                        3) such that

                           
                              
                                 
                                    
                                       B
                                       
                                          
                                             (
                                             
                                                t
                                                1
                                             
                                             ,
                                             
                                                r
                                                1
                                             
                                             )
                                          
                                          ,
                                          
                                             (
                                             
                                                t
                                                3
                                             
                                             ,
                                             
                                                r
                                                2
                                             
                                             )
                                          
                                       
                                    
                                    =
                                    ∞
                                    >
                                    0
                                    =
                                    
                                       B
                                       
                                          
                                             (
                                             
                                                t
                                                1
                                             
                                             ,
                                             
                                                r
                                                3
                                             
                                             )
                                          
                                          ,
                                          
                                             (
                                             
                                                t
                                                3
                                             
                                             ,
                                             
                                                r
                                                2
                                             
                                             )
                                          
                                       
                                    
                                    ,
                                 
                              
                           
                        and analogous for train t
                        2. This means that during the preprocessing phase, trainroutes (t
                        1, r
                        3) and (t
                        2, r
                        3) are pruned. In case of the track possession, however, this is unwanted since then the alternative route becomes unavailable. Although it is worse with respect to the spreading cost objective, (t
                        1, r
                        3) does not incur the penalty cost while its dominator (trainroute (t
                        1, r
                        1)) does incur the penalty. To avoid the pruning of (t
                        1, r
                        3), a rule is added that forbids the removal of a dominated trainroute that does not run over the track possession while its dominator does. As a consequence, (t
                        1, r
                        3) and (t
                        2, r
                        3) are not pruned.

In our three case studies this preprocessing step reduces the number of routes from about 2500 to 250.

Applying the routing module to the example above, train t
                        2 gets rerouted along r
                        3 and thus avoids the track possession. For train t
                        1, this is not possible since otherwise a train-train conflict with train t
                        3 would arise. In the next steps of the maintenance conflicts avoidance algorithm, a solution for train t
                        1 is searched.

Until now, it is assumed that the timing of the trains is rigid. This constraint is now relaxed. Doing so, timing modifications can be used to solve potential conflicts. For example, a small time shift for trains t
                        1 or t
                        3 can make the rerouting of train t
                        1 via r
                        3 conflict-free. This is the idea of the rerouting and rescheduling module. A complete overview of the rerouting and rescheduling module is given in Algorithm 2. We now explain the different steps of this module.
                     

Trains that are scheduled to run over the closed track are put in the candidate list CL for a rerouting (step 1 in Algorithm 2). In step 2, the candidate list is ordered based on the associated penalty costs in (6) from large to small. Doing so, the most important trains, namely those with the highest penalties, are at the beginning of the list and are considered first. In step 3, a new route that does not incur the penalty cost is selected for the first train in the list. Since this new route was not already selected in the train routing module, it incurs at least one train-train conflict. To solve these train-train conflicts, restricted alterations to the timing of all trains are considered in this step in order to restore the feasibility (conflict-freeness). Two kinds of time changes are used: shifting one or more trains in time (earlier or later) and swapping the order of two trains that make use of a same part of the infrastructure. Also combinations of these two kinds of alterations are allowed. We refer to Dewilde et al. (2013) for more details about the tabu search algorithm that lies behind it. Step 4 evaluates the outcome of the restricted rescheduling in step 3. If this restricted rescheduling in step 3 could not solve all train-train conflicts, the rerouting and rescheduling action is rejected, the original solution is restored, and the next route for that train or, in case all candidate routes for the current train are considered, the next candidate train is selected (step 4a). If the solution of the restricted rescheduling turned out to be feasible with respect to train-train conflicts, the rerouting and rescheduling action is accepted in step 4b. This means that the usage of the closed track is avoided for one train and the rerouting and rescheduling phase finishes. The algorithm then returns to the routing module in which the train routing problem is solved again for the adapted timetable. If no rerouting and rescheduling was successful, the cancelation module is called (step 5).

The internal rescheduling phase that is used in step 3 does not only solve train-train conflicts but also tries to improve the spreading cost for all trains. Nevertheless, a rerouting and rescheduling action is only accepted when a maintenance conflict is avoided. As a consequence, the spreading cost (without the maintenance penalties) tends to grow.

Consider again the example of Fig. 2. If for any reason, it is not possible to (re-)route train t
                        1 along route r
                        3 without avoiding a conflict with train t
                        3, the cancelation module can help to remedy this: cancel train t
                        1 such that the resulting solution becomes feasible.

From the rerouting and rescheduling module, the candidate list CL, the ordered set of trains that conflict with a maintenance action, is known. In the cancelation module, the last element of CL, the train of lowest importance (lowest type), is taken out of operation. After that, the MCAA returns to the train routing module. Similar to the criteria that determine the penalties, other cancelation orders can be selected. For example, in agreement with the railway operator or depending on the set of alternative trains. However, this is left aside here.

Note that we minimize the number of cancelations by only calling this module if the other modules become insufficient. Canceling trains creates (large) planned delays for the passengers since they (temporarily) have to take an alternative train (or search for an alternative mode of transport). Therefore, by canceling one train at a time, we hope that the freed time slots allow to solve some of the remaining conflicts by the other modules at a smaller (passenger) cost.

From the moment a maintenance-conflict-free (and conflict-free) solution has been found, be it after the routing module, the rerouting and rescheduling module, or after the cancelation of a train, the maintenance conflicts avoidance algorithm (MCAA) stops. In order to further improve the robustness of the conflict-free and maintenance-conflict-free solution that has now been found, the algorithm of Dewilde et al. (2013, 2014) is used. This algorithm improves the robustness by iteratively searching for the optimal routing, considering small changes to the timing of trains (single time shift, multiple time shifts, reordering of the trains) and evaluating the impact of platform changes. To avoid new maintenance conflicts, no candidate new route that is considered in the optimization algorithm may use the closed tracks.

Once the MCAA from Section 3 and the post-optimization robustness improving algorithm are finished, we are sure that our timetable is feasible and no train is scheduled to run over a closed track. But we also wanted to increase the robustness of the new schedule. Therefore, a simulation model will be required to measure different performance indicators. This will allow us to evaluate the robustness of the new schedule, the impact of the planned maintenance and the performance of our algorithm. This simulation module consists of a discrete event simulation model, which makes use of detailed infrastructure data. In this model, delays are allocated to some of the trains to represent an initial disturbance. The results from the simulation module are based on 10 000 simulation runs. As well as the propagation of delays, the percentage of delayed trains and the robustness value of the system can be computed. It should be noted that the objective function of the presented algorithms in Section 3 does not take planned delays into account. However, each change to the timing of trains gives a cost for the passengers in terms of planned delays. Therefore, time window constraints that restrict the maximal size of the time deviations are imposed for each train. As a result, the size of the planned delays remains limited and the assumption that passengers do not change trains because of the timetable update remains acceptable. In Section 5.3, the influence of these bounds on the performance of the algorithm and the final result is discussed as well as the advantage of the extra post-optimization.

As performance indicators, we use the different types of passengers’ delays that are incorporated in the model. Notice that, like in Dewilde et al. (2013, 2014), passengers transferring from one train to another are not included. The robustness of the resulting system is measured as is explained in Section 1.2.

In the simulation module, trains enter the network with or without delays and run from block section to block section, i.e. a part of the infrastructure indicated by signals where only one train can drive at the time. If a certain block section is still reserved for another train, a conflict arises and delays will propagate through the network. The delays that trains have when they arrive in the network as well as the dwell delays are considered as input and depend on parameters which are set externally. During computations, various delay scenarios, based on different parameter values, are considered but no significant differences are observed. Therefore, we only present the results obtained for one delay scenario in Section 5.3. As parameters for the input delays in the case study, we have chosen to give half of the trains a delay upon arrival at the boundaries of the network. This is realistic, because small delays occur very often in Brussels. Each train’s real average arrival delay, computed from historic data, determines the negative exponential distribution that is used in the simulation module to draw delays for that train. For the stops in the stations, dwell delays of 30 seconds on average are inserted for half of the trains. This is a rough estimate for the average dwell delays during peak hour at the bottleneck station of our case study, see Section 5.1.

For more details concerning the simulation module, the conflict resolution and priority rules, we refer to Dewilde et al. (2013, 2014) since all details are presented there.

@&#RESULTS@&#

The compact and highly used network connecting the main stations of Brussels is selected as case study. This network consists of three of Belgium’s busiest stations with respect to both passenger numbers and the number of trains (Sels, Dewilde, Cattrysse, & Vansteenwegen, 2011; Van den Bulcke, 2010). In the original timetable, 80 trains per hour pass through the North–South connection and most of them dwell at one of the six platforms at the Central station. It is clear from the infrastructure layout shown in Fig. 1 that the Central station forms the bottleneck in this network. In this figure, one can see that the leftmost station, the North station, has 12 platforms, while the South station has 19 platforms.

Next to an overview of the network, the specific cases of track maintenance that are studied in this paper are indicated in Fig. 1. In case 1, one of the six platform tracks in the Central station is closed for maintenance. In the original solution, 15 on a total number of 80 trains are scheduled to use this platform. The platforms in the Central station have a fixed orientation. Thus only two alternative platforms exist for all northbound trains. All trains, except two international trains, dwell at the central station for one minute. Since there is a headway of 2 minutes between departure and arrival in the Central station, a theoretical maximum of 41 trains per hour can be scheduled over these two platforms. There are, however, 42 northbound trains in the original timetable what means that at least one train needs to be canceled. We come back to this issue in Section 5.3. The second case consists of the closing of two parallel tracks that connect the upper platforms of the North station with two platforms of the Central station. This affects 22 trains. Note that the switches at both ends of the closed tracks remain open such that all platforms are still usable. This is in contrast with the third case in which the schedule of (at least) 35 trains needs to be modified in order to cope with the track possessions. In this case, part of the grid near station South is closed for maintenance. As a consequence, four incoming or outgoing lines (here: platforms in station South) become non-reachable. As alternative for these platforms, the neighboring incoming or outgoing lines at each side are selected.

The maintenance conflicts avoidance algorithm and the robustness improving algorithm are both implemented in C++. The mathematical model in (6)–(11) and the routing module in the post optimization are solved by CPLEX 12.6.

As indicated before, time window restrictions are used to limit the deviations from the original schedule in the entire algorithm. Let e
                        orig (e
                        up) be the event time of event e in the original (updated) timetable, expressed in minutes. Then time changes up to, for example, 4 minutes correspond to a time window restriction of the form

                           
                              (12)
                              
                                 
                                    
                                       e
                                       up
                                    
                                    ∈
                                    
                                       [
                                       
                                          e
                                          orig
                                       
                                       −
                                       4
                                       ,
                                       
                                          e
                                          orig
                                       
                                       +
                                       4
                                       ]
                                    
                                    .
                                 
                              
                           
                        To simplify the notation, 
                           
                              [
                              −
                              4
                              ,
                              4
                              ]
                           
                         is used instead of (12). In total, three different types of time windows are considered: (i) only postponing events, for example time windows of the form [0, 4], (ii) advancing and postponing events such as in (12), and (iii) stepwise increasing the size of the time windows when no successful rerouting and rescheduling action is found. Initially, no shift is allowed and instead of a cancelation, the time window bounds are increased by one minute before the algorithm returns to the rerouting and rescheduling module. Time windows of this type are denoted as [0, ε] or 
                           
                              [
                              −
                              
                                 ɛ
                              
                              ,
                              
                                 ɛ
                              
                              ]
                              ,
                           
                         with ε the bound that gets increased. Since no differences worth mentioning are found for time changes larger than 5 minutes, this is used as upper bound for ε.

In Fig. 3, the decrease of the number of maintenance conflicts is shown per iteration for case 1 with the 
                           
                              [
                              −
                              4
                              ,
                              4
                              ]
                           
                         time window constraint for each train. Therefore, the algorithm starts from the original timetable which is the most robust timetable that is computed in Dewilde et al. (2013) (column orig). The computation time needed to find a first feasible (maintenance-conflict-free and conflict-free) solution with the MCAA is about one minute per time window scenario. In general, more than one conflict can be solved during the first iterations. For example, in iterations 1 and 3 where, respectively, 7 and 2 maintenance conflicts are solved. This comes from the routing module. The one by one reduction in the middle comes from the rerouting and rescheduling module which can solve conflicts among trains and becomes more efficient than the routing module after some iterations. In the second iteration, the routing module is able to route an extra train around the track possessions. Also in the routing module of iteration 4 an extra train of type 3 is routed around the maintenance zone, but this goes at the cost of an extra type 2 train that uses the closed track instead. This shows that the rerouting of one train may create a potential for another train to be rerouted. At the end, if the rerouting and rescheduling module cannot solve the last conflicts anymore, the cancelation module is applied to take trains out of operation iteratively and in increasing order of importance. The canceled trains in iteration 7 and 8, in the graph indicated with an asterisk on the X-axis, are of type 1 and type 2. Also the cancelation model can create a potential for another train to be rerouted. For example, in time window scenarios [0, 1] and [0, 2], both for case 1, the cancelation of a train enabled the rerouting of a more important train. This proves that canceling trains one by one is useful to minimize the number of cancelations.

An overview of the global reduction in the number of maintenance conflicts for all three cases and with the 
                           
                              [
                              −
                              4
                              ,
                              4
                              ]
                           
                         time window constraint for each train is given in Fig. 4
                        . The large improvement in the beginning (due to the routing module) and the stepwise reduction that follows afterwards can also be seen in this figure. Figs. 3 and 4 show that the first objectives of the passenger service, obtaining a feasible schedule with a limited number of cancelations is achieved.

When varying the upper and lower bounds for the time windows, more or less freedom arises and the number of canceled trains changes. This can be seen in Fig. 5
                         where the number of canceled trains for each time window scenario is shown. In general, more freedom helps to decrease the number of canceled trains. There are, however, some exceptions which are due to the algorithm getting stuck in a local optimum. For example, when events can be postponed with one minute in case 3 (time window scenario [0, 1]), only 3 trains need to be canceled, while scenario [0, 2] results in 4 cancelations.

In order to fully evaluate the impact of the maintenance actions on the performance, more results than the number of cancelations is needed. For this, the results of the simulation module are used.

The simulation module is also implemented in C++. The computation time to simulate one timetable on Brussels’ railway network for 10,000 delay scenarios is at most a few minutes.

An analysis of the results is made using a graphical representation of the simulated performance. This enables an easy assessment of the different components that contribute to the final robustness score and allows a quick comparison of the different solutions. To evaluate the quality of our approach and the different scenarios given by the time windows, two alternative solutions (alt
                        1 and alt
                        2) are used as reference solutions in the evaluation of the performance of our algorithm. The first alternative solution equals the original timetable in which all trains are kept but the ones that conflict with the maintenance actions are rerouted along maintenance-conflict-free routes without time changes. Therefore, the mathematical model for the train routing problem is adapted to allow train-train conflicts at the cost of a penalty. This is done in a similar way as explained in Section 3.1 for maintenance conflicts. As a consequence, the resulting alt
                        1 timetable can be infeasible. For the second alternative solution, alt
                        2, all trains that are scheduled to run over a closed track after the routing module is applied, are canceled simultaneously. The difference with the [0, 0] scenario is twofold. When using time window [0, 0], the rerouting and rescheduling module attempts to solve maintenance conflicts by considering alternative incoming or outgoing lines (without modifying the timing) and a rerouting and rescheduling or a cancelation action is alternated with the routing module, while in the alt
                        2 scenario, all trains are canceled at once. In total, the alt
                        2 approach resulted in 9, 10 and 25 cancelations for cases 1–3, respectively.

The simulation results are visualized in Figs. 6
                         and 7
                        . Fig. 6 contains information about the relative number of trains that are running in each of the updated schedules (%train) and thus represents the number of cancelations. Also the robustness score Rob and the relative amount of knock-on delays and passengers’ delays are plotted. All results are computed relative to the alt
                        1 scenario that serves as reference system. In part (a) of this figure, the correlation between the number of trains and the other performance indicators is clearly visible. As shown in Dewilde et al. (2014), the throughput in the North–South connection benefits from having less trains. This translates into a reduced amount of knock-on delays and passengers’ delays. However, since removing trains from the system brings along cancelation delays that influence the RWTT, this positive effect is undone for solutions with many canceled trains like alt
                        2 and the [0, 0] scenario in cases 1 and 2. Allowing time shifts not only reduces the cancelations that are necessary to solve the maintenance conflicts, but also helps to decrease the amount of propagated delays and the total passengers’ delays. Based on the Rob robustness scores, the best solutions can be detected. In case 1, the robustness of the alt
                        1 solution, which is used as reference, is improved by the solutions of some time window scenarios from which time window scenario 
                           
                              [
                              −
                              2
                              ,
                              2
                              ]
                           
                         is the best with a reduction in RWTT of 6 percent. For the second case, no timetable returned by our algorithm improves the (infeasible) alt
                        1 solution. We ascribe this to the combination of the robustness of the original timetable, which is the most robust timetable that is obtained using the algorithm of Dewilde et al. (2013), and the limited impact of the track possessions on the available capacity. Since each train can still use its original combination of platforms, the closure of the tracks and corresponding rerouting action of the alt
                        1 scenario can be seen as a disturbance to a system that is optimized with respect to robustness. As a consequence, the overall impact remains limited. Just as in case 1, the unavailability of some platforms makes the reduction of the available capacity in case 3 larger than in case 2. Nevertheless, the substantial set of alternative routes around the maintenance zone reduces the need for canceling trains. In case 3, all solutions that are outputted by our algorithm, independent of the time window constraints, improve the alternative scenarios. The largest improvement in robustness is achieved with time window constraint [0, 1] and amounts 12.3 percent compared with the alt
                        1 scenario. Although solutions with only one canceled train exist for case 3, canceling three trains results in a lower RWTT. The same holds for case 1. In such a situation, the final decision about which timetable will be selected lies in the hands of the railway companies.


                        Fig. 7 provides more insight in the ratios of the various types of delays that influence the robustness. For this, all values are scaled such that the total cumulative amount of delays in scenario alt
                        1 equals 100 percent. The total cumulative amount is the sum of all delays that are measured at the three stations during the simulation horizon. The real or unplanned delays per passenger (unplanned delays) are plotted together with the planned delays and the (planned) cancelation delays. Notice that the robustness scores in Fig. 6 show an equal pattern as the cumulative delays, but that Rob is computed based on the RWTT, while no weights are used in Fig. 7. The reason is that the latter figure depicts the size of the delays and not the passengers’ valuation of travel time. For all cases, there is a reduction in unplanned delays compared with the (infeasible) alt
                        1 scenario, but together with the planned delays and cancelation delays, the cumulative amount of delays hardly gets below the reference amount. Nevertheless, by recognizing the annoyance of the unplanned passengers’ delays and thus accounting for the passengers’ perception, the robustness of some of the newly computed timetables is considered better than that of the original timetable (alt
                        1). In this figure, the impact of more freedom for rescheduling on all types of delays becomes clear. For example, the cancelation delays decrease at the cost of some planned delays. Together with Fig. 6, this shows that minimizing the planned delays, as is often done in literature, is not always better for the cumulative amount of delays and for the passengers’ valuation of travel time.

After a maintenance-conflict-free (and conflict-free) solution is found and the robustness improving algorithm continues its improvement process, planned delays can arise. Fig. 8
                         is used to gain some insight in this. In Fig. 8, the planned delays (right Y-axis), the amount of knock-on delays (also right Y-axis), and the robustness (Rob, left Y-axis) are plotted. The X-axis starts from the moment the first maintenance-conflict-free (and conflict-free) solution is found (iteration 0) and ranges till the last iteration before the search stabilizes
                           1
                        
                        
                           1
                           Similar to the iterations of the maintenance algorithm, the robustness improvement phase that follows once all maintenance conflicts are solved also makes various iterations. After each iteration, the corresponding (maintenance-conflict-free and conflict-free) solution is returned. In Fig. 8, the simulation results of these solutions are presented.
                        . This plot is obtained for case 1 with the time window constraint that gives the best results for this case: time window 
                           
                              [
                              −
                              2
                              ,
                              2
                              ]
                           
                        . Along the improvement process, there is a clear downwards trend for the robustness and the amount of propagated delays. The planned delays fluctuate more along the iterations. The best solution, with respect to the robustness value, is reached after the tenth iteration. This is the solution that is used for this scenario in the previous figures. The difference with the outcome of iteration 19 is less than 0.02 percent in Rob value. There are, however, much more planned delays in the latter solution. This shows once more that deviations from the original timing of the trains, which imply more scheduled inconvenience for the passengers, are not necessarily bad for the robustness of the updated timetable. Another conclusion that can be drawn based on Fig. 8 is that it is worthwhile to continue the robustness’ improvement process after all maintenance conflicts are solved. In only 7 of the 39 scenarios (three cases with 13 different time windows), the first maintenance-conflict-free (and conflict-free) solution (iteration 0) turned out to be the best one. For all others, the extra optimization improved the solution. This post-optimization phase, namely executing the robustness improving algorithm, can take a few minutes up to a few hours.

At last, we want to dig a little deeper in the propagation of real delays. Table 2
                         allows to see at which location in the network most of the conflicts occur and how the impact of the maintenance is reduced in the course of the algorithm. For each case, the alt
                        1 scenario is compared with the best found solution for this case. Since the number of operated trains influences the results, this is added to the table. Comparing the different cases, one sees the increase in delays at the location of the track possessions for the corresponding case. Also in the neighboring zones, a spill back effect can be noticed. The extremely high amount of propagated delays in the Central station for case 1 is remarkable. This is not surprising since it is this bottleneck that is affected by the maintenance. The reduction in knock-on delays for the best time window scenarios shows the strength of our algorithm.


                        Capacity usage in the Central station
                     

As can be seen in Fig. 5, only one cancelation is required to avoid all maintenance conflicts for time windows 
                           
                              [
                              −
                              2
                              ,
                              2
                              ]
                           
                         and 
                           
                              [
                              −
                              
                                 ɛ
                              
                              ,
                              
                                 ɛ
                              
                              ]
                           
                         in case 1. As discussed above, this means that the maximum number of northbound trains that can be scheduled in a conflict-free way through the North–South connection is effectively scheduled. Surprisingly, time window scenario 
                           
                              [
                              −
                              2
                              ,
                              2
                              ]
                           
                         gives the best solution for case 1. The results in Table 2 provide some insight. It shows that no real explosion of the amount of knock-on delays arises at that station. This is a consequence of some simplifications that are made when modeling the North–South connection and of a few assumptions of the simulation module. We refer to Dewilde et al. (2013) for more details. Nevertheless, since all simulations for the North-South connection case study are performed with the same model and the results are always considered relatively to one another, the final outcome can be used.

Consider the total passengers’ delays for case 1 in Fig. 7. Scenario alt
                        1, which runs in overcapacity, gives considerably more unplanned delays than the other scenarios. The two solutions that use the full capacity, time windows 
                           
                              [
                              −
                              2
                              ,
                              2
                              ]
                           
                         and 
                           
                              [
                              −
                              
                                 ɛ
                              
                              ,
                              
                                 ɛ
                              
                              ]
                              ,
                           
                         also lead to worse results with respect to unplanned delays than the other ones, but the differences are limited. Since the cancelation delays for the removed trains in time window scenarios 
                           
                              [
                              −
                              2
                              ,
                              2
                              ]
                           
                         and 
                           
                              [
                              −
                              
                                 ɛ
                              
                              ,
                              
                                 ɛ
                              
                              ]
                           
                         are quite low, these solutions prove to be the best with respect to the robustness.

This discussion clarifies the main drawback of the presented approach to avoid planned track possessions. Since one of the objectives of passenger service is to minimize the number of cancelations and, in the algorithm, no direct assessment is made of a cancelation on the system’s sensitivity to knock-on delays or its robustness, which is another objective of passenger service, some mismatch between these objectives may arise. As indicated before, based on the set of canceled trains, railway companies can decide which solution they prefer. Other options to intervene in the decision process are by deciding on how the impact of a canceled train on the RWTT should be modeled, or by using different weights in the cancelation module in order to influence the cancelation order.

In this paper, an algorithm is developed that can reschedule the train routing and timing to enable planned maintenance actions. Starting from an original timetable and a set of track possessions, the objective of this paper is to minimize the decrease in service level to the passengers. This corresponds to a minimal number of canceled trains and an updated timetable that is as robust as possible while a feasible schedule is required. In order to measure the robustness based on the passengers’ travel time in practice, the set of all actions that contribute to the real weighted travel time (RWTT) is composed. This also includes the adaptation of one’s travel behavior to the updated schedule. The algorithm to avoid the maintenance conflicts is based on two aspects of the planning: the routing through the network and the timing of the trains. Only if maintenance conflicts can not be solved by further adaptation of the routing plan or the timing (within the restricted time windows), a cancelation is performed. This helps to minimize the number of canceled trains. We clearly show the correlation between the width of the restricted time windows and the number of trains that need to be canceled in order to obtain a feasible timetable. Moreover, by canceling only one train at a time, the possibility to reroute a more important train is enabled in some situations. Throughout the algorithm, stepwise small changes are used and these restrict the memory usage and the computation time of this approach.

The computational results show the contribution of each part of the solution approach to the success of the algorithm: (1) The routing module quickly reduces the number of maintenance conflicts; (2) The rerouting and rescheduling module further reduces the number of conflicts and increases the robustness of the timetable; (3) The cancelation module is necessary when not all maintenance conflicts can be solved and the number of trains must be reduced; (4) The robustness improving algorithm finds a better solution for a large majority of the considered scenarios. The results also show that allowing small time changes for arrival or departure times is useful in the quest for a robust solution that is conflict-free and maintenance-conflict-free. The robustness of the resulting solution can improve by more than 10 percent and only few trains need to be canceled. Although shifts in the arrival and departure times of a train induce planned delays to the passengers, we have shown that extra planned delays do not necessarily increase the RWTT of the final timetable. The results also prove the advantages of a robustness oriented approach above retiming and rerouting without considering the robustness.

The discussion of the solution with full usage of the available capacity in the Central station pointed at a drawback of this approach. Because the impact of cancelations is not considered in the algorithm, solutions that are suboptimal from the viewpoint of the railway company may arise. Examples of such situations arise when the passengers’ demand at a certain area is not fully covered anymore or when a cancelation creates problems with the rolling stock circulation. However, since this relates to business decisions, it is beyond the scope of this paper. Similar to the cancelation of one train that allows the rerouting of an extra train, it can be a topic of future work to consider the potential of canceling a less important train that does not conflict with the maintenance actions if this allows to solve an extra maintenance conflict of a more important train. Another relevant topic for further research is to study the impact of shuttle timetables in which the trains turn around at the two outer stations of the Brussels’ area. Instead of canceling a train, it then suffices to cancel the trips that are affected by the track possessions such that the canceled trains run between their original endpoints and some intermediate station before the maintenance zone. A last idea is based on the observation that the simulation results for some of the infeasible timetables were rather good compared to the other ones. Therefore, allowing train-train conflicts in a timetable to be solved in real-time using some flexibility or dynamic traffic management can yield interesting findings.

@&#ACKNOWLEDGMENTS@&#

This research is partly funded by a Ph.D. grant (IWT 101158) of the Flemish Agency for Innovation by Science and Technology (IWT).

We also thank the Belgian railway infrastructure manager Infrabel for their help and commitment during the entire project.

@&#REFERENCES@&#

