@&#MAIN-TITLE@&#SOA support to virtual campus advanced architectures: The VCAA canonical interfaces

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           This paper describes and defines several architectures for virtual campuses (VCs).


                        
                        
                           
                           One of these architectures promotes VCs independent of their underlying LMSs.


                        
                        
                           
                           We define a set of software interfaces that isolate VCs from specific LMSs.


                        
                        
                           
                           Implementation of these interfaces for three relevant LMSs is also provided.


                        
                        
                           
                           A running prototype of virtual campus has been deployed and it has been used by users.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

e-Learning

lms

Virtual campus

@&#ABSTRACT@&#


               
               
                  Virtual campuses (VCs) are becoming complex applications. Nowadays, users demand more tools, more e-learning platforms, and fewer dependencies among these platforms. To deal with these requirements the Virtual Campus Advanced Architecture project has defined multitier software architecture for VC based on the SOA integration of e-learning platforms. This solution defines a set of interfaces that standardizes the core functions of learning management systems (LMSs), so decoupling VC from LMSs and promoting its evolution towards the SaaS model. Simplicity and viability have been key issues in the development of these interfaces that have been implemented for Blackboard Learn, Moodle and Sakai.
               
            

@&#INTRODUCTION@&#

Nowadays, Information and Communication Technologies (ICT) are present more than ever in learning institutions. Thus, institutions of primary and secondary education, universities, and private companies are incorporating e-learning platforms, i.e. Learning Management Systems (LMSs), in their e-learning infrastructure. These LMSs become part of virtual campuses 
                     [34]. In our approach, virtual campuses (VCs) are considered to be those complex software systems that higher education institutions use to give support to their teaching and learning activities [29,35].

Small and medium institutions can use a single LMS to support their e-learning activities. However, large institutions need to develop a complex software infrastructure that integrates different LMSs with each other or with other software systems. In addition, when the number of users is very large, user demands increase proportionally [23]. Thus, users call for more tools, more e-learning platforms, less dependence on these platforms, and shorter development times for their demands to be implemented [28].

In order to support users' demands, modern virtual campuses need maintainable software architectures that are able to deal with the integration of several e-learning platforms [7]. For example, the Universidad Complutense de Madrid (UCM) VC architecture relies on a multitier architecture that integrates several e-learning platforms: Moodle 1.9 and Sakai 2.4 (and originally WebCT 4.1). This architecture has proven very useful for the management of the 80,000 users of this virtual campus [29].

However, our experience in the field of virtual campus architectures and current developments [16,28,32] shows us that more advanced software architectures have to be developed in order to support and smoothly integrate different e-learning platforms. For example, in the present architecture of the UCM VC, the heterogeneity of languages in which e-learning platforms are programmed forces the use of Service Oriented Architecture (SOA) [8] in some parts of the software architecture [29]. Therefore, the natural development is to provide a SOA-based solution for the integration of e-learning platforms in modern virtual campuses [16,28,30].

SOA-based solutions permit a better integration of e-learning platforms and the development of virtual campus architectures that are independent of the underlying e-learning platform. In the architecture presented in this paper, the virtual campus is designed and implemented to be used with different e-learning platforms. Thus, for example, in an academic course the virtual campus can be configured to be used with Moodle 2.0, and in the following academic year the virtual campus can be configured for use with Blackboard Learn 9.1 (assuming that migration facilities for courses are available). We have called these virtual campuses white-label virtual campuses, because they provide the same e-learning facilities to their users irrespective of the specific label (Blackboard, Moodle, Sakai, etc.) that supports them.

In a first architectural step, only one e-learning platform can be used at any one time in this white-label virtual campus, although, in the future, the simultaneous use of several e-learning platforms is envisaged. The simultaneous use of several LMSs would permit the combined use of the individual tools of each LMS. For example, the virtual campus could thus use the file management facility provided by Moodle, and the blog facility provided by Sakai.

This paper describes our findings in the context of Virtual Campus Advanced Architectures (VCAA), a research project that we are developing. Section 2 presents related work. Section 3 materializes in terms of multitier architecture one architecture previously outlined in literature. This architecture relies on a SOA solution for the isolation of virtual campuses from their underlying e-learning platforms. Section 4 describes a set of VCAA canonical interfaces that we have defined to implement this SOA solution. The implementation of these interfaces in terms of web services for Blackboard Learn 9.1, Moodle 2.0 and Sakai 2.7 is also described. Section 5 presents conclusions and future work. Finally, Appendix A includes the complete definition of the VCAA interfaces defined in Section 4 and Appendix B lists the XML Document Type Definitions (DTDs) used as return types in some operations defined in Appendix A.

@&#RELATED WORK@&#

Virtual campuses are built on LMSs, which provide support for learning and teaching activities in these campuses. However, excluding our papers, we have not found any literature about virtual campus architecture except for [24,31], which do not include detailed descriptions of software or hardware architectures.

In these papers, virtual campuses are built on LMSs, although no architectural details are provided beyond some non-technical diagrams depicting the structure of the overall solution in terms of interconnected blocks.

Therefore, at present, the state of the art on virtual campus architectures is provided by the UCM Virtual Campus [29], which is composed of four applications: (i) several e-learning platforms, responsible for core e-learning facilities (e.g. content publication); (ii) a J2EE [20] data load application, responsible for transferring course and user data from the university management system to the virtual campus administration database; (iii) a J2EE administration application, responsible for administrative tasks (e.g. changing a password); and (iv) an integration page that provides a unified view of the courses virtualized in different LMSs.

Of course, LMS developers [16,30,32] are aware that they should isolate LMSs from their clients (virtual campuses or not). Therefore a set of web services for isolating LMSs have been defined and implemented (analyzed in the following sections). However, LMS developers do not pay attention to the architecture of the virtual campuses that are built on these LMSs. Therefore they suggest that virtual campuses can be built on web services, but they do not characterize any architectural design in terms of a well-known set of architectural patterns, such as multitier 
                        [1], event-driven 
                        [10] or SOA [9].

Therefore, at present there are only two architectures for virtual campuses formally defined in terms of a set of architectural patterns, and a third architecture has been loosely outlined:
                           
                              -
                              
                                 Architecture Type 1, T1 [29]. In this architecture only one LMS is used. The interaction between the virtual campus and the LMS is effected using the specific API and/or web services provided by the LMS. In this architecture, no special integration infrastructure is needed.


                                 Architecture Type 2¸ T2 [29]. In this architecture several LMSs are simultaneously used. However, each course is assigned to only one LMS. Major integration infrastructure is needed. For example, an application is needed to provide a single sign-on for all the LMSs, and to display all the courses for one user on a common page.


                                 Architecture Type 3, T3 [16,28,30,32]. In this architecture only one LMS is used but the interaction between the virtual campus and the LMS is implemented using a set of web services. A common virtual campus user interface isolates users from the LMS. Therefore, the LMS can be replaced without the need to make changes in the virtual campus. This architecture relies on a SOA infrastructure, which isolates the virtual campus from e-learning platforms.


                        Fig. 1
                         depicts T1 and T2 architectures using UML component diagrams 
                        [2]. Fig. 2
                         depicts the overview of the T3 architecture.

In this paper we materialize the T3 architecture in terms of a multitier architecture, standard for the definition of enterprise application architectures [1,11], and successfully used by us in the already implemented and deployed virtual campuses.

In addition, this paper proposes two additional architectures named Type 4 (T4) and Type 5 (T5). Architecture T4 extends architecture T3 permitting concurrent use of different features belonging to different LMSs (T4). Architecture T5 extends architecture T4 exposing the services of the virtual campus through a set of web services. Section 3 defines and explains these architectures.

LMSs are web applications that provide core e-learning functions for course and student management. Although they provide different functions, there is a common core of functions that, to some extent, every LMS provides. These functions manage sessions, users, courses, enrolments, grades, resources, announcements, forums, calendars, notifications, internal mail, external mail and blogs [15].

These functions are provided to the user through a predefined user interface. However, LMSs also provide the majority of these functions through APIs and web services. APIs include almost every function, but bind clients to concrete implementation languages. Web services enable transparent integration of LMSs with other applications (e.g. virtual campuses), but, at their stage of development, they implement half of the functionality included in APIs. Blackboard offers the greatest functionality implemented as web services, Moodle does not offer enough web services to support the needs of a normal user, and Sakai is in an intermediate position [15].

However, there is an additional problem. Comparing web service interfaces, they are very heterogeneous. Therefore, they are unsuitable to be directly used in an architecture such as the one promoted by the VCAA Project. Thus, Moodle deployment architecture is completely different and does not have a stable set of web services. Blackboard and Sakai, despite having similar architectural philosophies, structure their web services in different interfaces. Therefore, the use of these LMSs though a common set of interfaces is a complex issue at present [15].

Therefore, there is a need for standardization of the web services characterizing the functions included in LMSs. Next section analyzes the efforts devoted to LMS service standardization.

Regarding the definition of a set of canonical web services for virtual campuses, we have found two main projects in the literature: OKI Open Service Interface Definitions (OSIDs) [30] and IMS Learning Information Systems (LIS) [16].

OKI OSIDs provide an architecture that specifies precisely how the components of a learning technology environment communicate with each other and with other campus systems. OKI OSIDs provide different service definitions, grouped in the following interfaces:
                           
                              -
                              The Agent OSID supports defining and using Agents and Groups.

The Assessment OSID supports creating, organizing, administrating, evaluating, storing and retrieving Assessments.

The Authentication OSID primarily supports invoking an authentication process.

The Authorization OSID provides a way to define who is authorized to do what and when.

The CourseManagement OSID primarily supports creating and managing different types of course (e.g. CanonicalCourses, CourseOffering, CourseSelection).

The Dictionary OSID supports creating and populating dictionaries of tag-value pairs.

The Filing OSID provides platform-independent storage and management of files and directories.

The Grading OSID supports defining, storing and retrieving grades.

The Hierarchy OSID provides a means of creating and traversing hierarchical structures of various types.

The Id OSID supports managing and using identifiers.

The Logging OSID provides a means of reading and writing entries to logs.

The Repository OSID covers storing and retrieving digital content, referred to as Assets, as well as information about the Assets.

The Scheduling OSID provides a means of associating Agents with specific activities or ScheduleItems that have a specific start and end date and time.

The SQL OSID provides a means of storing, editing, and retrieving tabular data through the execution of SQL statements.

The UserMessaging OSID provides a means of sending messages, subscribing to messages, and receiving messages.

The Workflow OSID provides the means to define a Process comprised of Steps, each of which has Input Conditions and Output States.

In the case of OKI OSID, The Campus Project 
                        [32] is the most significant project related to the work described in this paper. The Campus Project provides implementation of OSIDs in PHP and Java for Moodle and Sakai platforms.

The IMS Learning Information Services (LIS) specification is the definition of how systems manage the exchange of information that describes people, groups, memberships, courses and outcomes within the context of learning. IMS LIS establish different service definitions, grouped in the following interfaces:
                           
                              -
                              The Person Management Service Information Model (PMS) manages and manipulates information about people, exchanging data about the people who are participating in learning.

The Group Management Service Information Model (GMS) manages and manipulates organizational structures, and other group structures, exchanging information about those structures.

The Membership Management Service Information Model (MMS) manages and manipulates enrolment of people on courses, and other group activities, exchanging information about those memberships.

The Course Management Service Information Model (CMS) manages and manipulates course structure information, exchanging data about courses taught.

The Outcomes Management Service Information Model (OMS) manages and manipulates results information, used in grade books etc., exchanging data for outcome information.

The Bulk Data Exchange Management Services Information Model (BDEMS) provides initialization and synchronization transfer of very large amounts of data. This includes support for the data models of each of the other five services.

In our opinion, one of the main differences between OKI OSID/IMS LIS and our approach is the origin of the canonical interfaces. OKI and IMS provide these interfaces by analyzing complex educational information systems and defining an exhaustive set of interfaces. The interfaces defined are thus very detailed, and contain a large number of functions for dealing with almost every issue that an educational institution may face (especially OKI OSID). This approach forces the presence of expensive projects devoted to the implementation of these interfaces. In our case, we have focused on a minimum set of functions related to virtual campus issues. Thus, the administrative functions of an educational institution outside learning and teaching activities (e.g. user enrollment in the educational institution) have not been considered. This has simplified our interfaces and the work of development.

Another difference is that, because OKI and IMS are not focused on specific implementation platforms, they are, to some extent, unaware of the implementation facilities in the platforms. However, using an iterative and incremental approach, we have defined our services taking into account the white-label virtual campus' needs and the presence of web services and/or APIs in every platform. In this way we have defined functions that abstract the features of Blackboard Learn, Moodle and Sakai, instead of defining generic functions which are totally independent of the platforms. Thus, our interfaces are easier to implement, because during their development they have taken into account the implementation facilities existing in the e-learning platforms.

At this point the question of the difference between OKI/IMS and VCAA philosophy arises. In 1992 (first edition) and 1997 (second edition) HyTime 
                        [19] was developed. HyTime was a markup language for describing powerful multimedia and synchronization facilities in hypermedia documents. The expressive power of the primitives included in HyTime was incomparably greater than that of HTML. However, HyTime's expressive power was its major drawback: basically the US Navy was the only institution able to deal with the complexity of building an operative HyTime engine. HyTime was thus a very good standard which has never had the success that it deserves. On the other hand, HTML is a very limited hypertext standard that has been enormously successful. There have been other similar cases in computer science such as: SGML vs. XML [6], or CORBA vs. SOAP web services [21].

Experience thus tells us that in computer science very powerful approaches, which are very expensive to implement and very complex to use, need serious development work, which may handicap their success. On the other hand, simple approaches which are easily implemented tend to be more successful.

Following a viability-based approach, we have defined a more limited set of interfaces, enough to support the implementation of a white-label virtual campus and implementable in three of the most common LMSs. Thus, our approach is more limited than those provided by OKI/IMS, but more viable in practice.

The basic features related to virtual campus management proposed by the three frameworks, OKI OSID, IMS LIS and VCAA, are similar. All three frameworks manage the basic resources of an LMS: session, users and courses. Analyzing the operations in the specifications, OKI OSID and IMS LIS define more atomic operations than the VCAA operations defined in Section 3. An example of this is the operation to update user info. VCAA has a single operation with which it updates all information about the user, while IMS LIS and OKI OSID have an operation for each parameter, e-mail, name, last name, etc. Thus VCAA interfaces are simpler, reflecting VCAA's philosophy: simplicity in the interest of viability.

However, LMSs are more than users and courses. These extra resources and tools represent additional LMS functionality. OSID OKI is the oldest and most stable of the platforms and provides the widest range of extra features, including support for file storage, scheduling, user messaging, workflow, etc. In addition, it has more operations to manage basic platform resources (e.g. id management), offering greater expressiveness than other frameworks. However, in our opinion, these operations are not well adapted to current e-learning requirements. For example, OKI OSID does not separate announcement, forum and user messaging functions.

Comparing IMS LIS and VCAA, IMS has less extra functionality but it offers methods to share information between platforms and between other specifications proposed by IMS like IMS LTI or IMS GLC. By contrast, VCAA explicitly offers operations to manage forums, announcements and file storage.


                        Table 3 analyzes implementation in three important platforms: Blackboard Learn 9.1, Moodle 2.0 and Sakai 2.7, showing the differences. OKI has partial implementation in open platforms and at present it is practically frozen. IMS LIS is a project under development and its implementation is not finished. However, different platforms are implementing IMS LIS in their projects. They include Desire2learn, iParadigm, Jenzibar, Kenisnet, Pearson/eCollege, Psydev, SungardHE and Callista. Finally, thanks to its simplicity, VCAA is currently implemented in the three platforms.

Another point of view for comparing IMS LIS, OKI and VCAA is the state of the project. OKI architecture was proposed in 2002 [33] and the specification has been frozen since 2004 [27]. In recent years, LMSs have evolved dramatically and, in our opinion, some OKI OSIDs have become outdated. In contrast, IMS-LIS has not released its final version, because its specifications and architecture are still evolving [17]. The VCAA project is also being developed, but web services for T3 architecture are completely defined and implemented. Thus, IML LIS and VCAA are more adapted to LMS integration needs and further development is constantly taking place.

Other related standards are IMS Basic Learning Tools Interoperability 
                        [18] [16] and IMS General Web Services (IMS GWS) [16]. IMS BLTI allows remote tools and content to be integrated into an LMS. IMS GWS is a web service profile for e-learning web services, which promotes application interoperability. Therefore, although these are standards that can be used in the context of T3 architecture, they are not comparable to the canonic interfaces, and their implementations, described in this work.

This section materializes the outlined T3 architecture in terms of concrete architectural patterns belonging to a well-known pattern catalog characterized by multitier architecture 
                        [1]. Multitier architecture is a set of patterns that facilitates building maintainable software systems. This architecture defines five tiers in software systems: (i) the user tier represents persons and/or external systems accessing the system; (ii) the presentation tier provides the user interface for accessing the system; (iii) the business logic tier is responsible for the implementation of business rules (e.g., the enrollment of a user in a course); (iv) the integration tier is responsible for the isolation of the other tiers with respect to the system resources; and (v) the resource tier represents the database and other systems that the system accesses in order to exchange information.

We have chosen multitier architecture to materialize the T3 architecture because:
                           
                              -
                              We have previously used it in our developments [29] and it has demonstrated good properties for implementing maintainable designs with loosely coupled and highly cohesive components desirable for any design [4].

The proposed architecture is an evolution of our previous architecture; and this is in line with the principle that every complex working system is an evolution of a simpler system that also worked [4].

It is a generally accepted architecture by the industry [1,11].

It has better performance and simpler transactional management than a strict SOA architecture where every component communicates with other components through web services [9].

There is no need for asynchronous responses in virtual campuses. Therefore, EDA architecture does not entail any significant advantage [29].


                        Fig. 3
                         shows the materialization of the outlined T3 architecture in terms of a multitier architecture. Note that according to Fig. 3, in the T3 architecture the white label virtual campus isolates the users from the underlying LMSs (i.e. human interaction with LMSs is hidden behind the virtual campus user interface), and canonical web services isolate the white label virtual campus from the underlying LMSs.

The T3 architecture has been implemented and deployed, in the VCAA virtual campus,
                           1
                        
                        
                           1
                           An operational version of this virtual campus is available at http://solaris.fdi.ucm.es/CVMB/ accessible with admin username demo and keyword demoKey.
                           
                         and is currently in use by members of our research team. Up to the present, more than 170 users have been registered in this virtual campus shown in Fig. 4
                        .

The presence of a common set of web services implemented by every LMS is a key issue for T3 architecture. Web services are a simple way to invoke distributed and heterogeneous code, i.e. code that is not executed on the same machine where the main code is being executed, and that can be written in a different programming language from the main code's language. There are two typical web service implementations based on the invocation protocol: SOAP (Simple Object Access Protocol) services and REST (Representational State Transfer) services [13]. SOAP services use middleware that allows us to invoke the code to call the web services and to manage the interchanged information transparently (i.e., as if the web service ran on the same machine and in the same programming language). Regarding REST invocation, web services are invoked using HTTP protocol via a Uniform Resource Locator (URL), and the interchanged information is codified in XML. A very brief analysis states that SOAP services are more complex to implement and deploy, but they permit simpler invocation and use by the client. REST services are simpler to implement and deploy, but they force a more complex invocation and use.

Although more complex to implement and deploy, we have chosen JAX-WS SOAP-based services [13] because they permit a simpler invocation from the client application (i.e. the virtual campus business logic), and because they permit a clearer definition of the interfaces they implement.

These services implement a set of interfaces that we have called canonical interfaces because they represent an abstraction of the features offered by Blackboard, Moodle and Sakai in terms of canonical functions (e.g. assignRole(), and addCourse()). The term canonical is similar in meaning to standard: a canonical function is a common name and signature that represent the services distributed through the APIs and/or web services provided by the different LMSs. Thus, for example, the canonical function CanonicalWSAnnouncement::addAnnouncement() has to be implemented in each platform using the functions saveAnnouncement(), belonging to the class AnnouncementManagerFactory of the Blackboard API, forum_add_discussion(), belonging to the file mod/forum/lib.php of the Moodle API, and addAnnouncement(), belonging to the SakaiScript Sakai web service. Although the function is present in every LMS, the canonical function abstracts and homogenizes them.

The use of the term canonical is similar to its use in [9] (some type of uniform defining mechanism to homogenize different but related items), although it is not specifically tied to any pattern with the canonical tag that he lists.

There are two mechanisms for isolating virtual campus code from web service invocation, depending on the presence or not of an explicit business delegate 
                        [1]. The first isolation mechanism is implemented using an abstract factory 
                        [12] that also plays the role of service locator 
                        [1] and an additional interface that plays the role of light business delegate. Fig. 5
                         depicts this isolation mechanism in a J2EE implementation and a canonical interface ServiceX (e.g. UserService), which abstracts the function f() (e.g., addUser()). This interface is used in three different places: (i) in the web service implementation (right side of the figure), as a Service Endpoint Interface (SEI) on the provider side [13], which is also codified as a WSDL (Web Services Description Language) interface for remote invocation purposes; (ii) in the virtual campus as a SEI on the client side (center part of the figure); and (iii) as a POJO (Plain Old Java Object) interface without web service-specific notation (left part of the figure), this POJO interface plays the role of light business delegate because it does not hide web-service specific exceptions but, excluding exceptions, clients are isolated from web service invocation by the ServiceFactory, which creates proxies that are returned to the clients through the POJO interface ServiceX, and not through the SEI. This solution is simpler because it omits the presence of a business delegate (implemented as a singleton), which totally isolates the client from the web service invocation.

The second isolation mechanism uses a classic business delegate, as Fig. 6
                         shows. In this case, the POJO interface of Fig. 5 has been embedded as functions in the business delegate. It is important to mention that, because JAX-WS proxies are not thread-safe [3,22], in both solutions, the ServiceFactory and the ProxyFactory have to create instances of proxies every time they are requested. This is the reason why they have been called factories (especially in Fig. 3) instead of locators, although they play the role of service locators in a multitier architecture.

In any case, the isolation mechanisms depicted in Figs. 5 and 6 affect only the virtual campus client code and, aside from exception handling, they are equivalent. In our implementation we have favored the classic business delegate-based solution (Fig. 6) due to its better client isolation from web services.


                        Fig. 4 is a screenshot of the white label virtual campus for file management. This management relies on the underlying LMS, but the user is isolated from it.

Therefore, the isolation provided by T3 architecture has two aspects: user isolation and developer isolation. Users are isolated from LMSs through a common user interface. Virtual campus developers are isolated from LMSs because the services of the underlying LMS are exposed as web services, and the use of business delegates isolates the virtual campus code from the selection of the web services implemented.

With regard to discovering services, the nature of the use of LMSs does not promote individual service discovery. For example, the service for uploading content in a course requires this course to have been previously registered in the LMS, as well as the user responsible for that course (e.g. a teacher). Therefore, service composition is usually performed manually, as when a new course is registered, where the user's existence has to be validated, after which the course is created. Fig. 7
                         depicts a simplified diagram for this service composition in terms of the business delegates that hide and invoke the respective web services, as shown by the architecture of Fig. 6.

One of the original research concerns of the VCAA project was the use of a Model Driven Architecture (MDA) approach [26], where Platform Independent Models (PIMs) could be translated to Platform Specific Models (PSMs). However, some thought should be given to the interpretation of the concept of platform.

If platform is understood as programming language and the stress is put on the virtual campus itself, the virtual campus design is based on design patterns and, although it is not a PIM, it is abstract enough. Therefore, the translation from this design to a J2EE or a.NET platform would be a straightforward job.

If platform is understood as LMS, canonical web services are the abstract devices that could be part of a PIM. In this case, as a result of the isolation mechanisms previously described, the LMS is simply selected in our project in a configuration file.

If platform is understood as LMS and the stress is put on the implementation of the canonical web services for each platform, the approach is not feasible because the implementation of the canonical web services is very heterogeneous in each LMS. Therefore, it is not possible to define an abstract PIM for the implementation of canonical web services that could be translated to PSMs for each LMS. For example, the announcement system is different in each LMS. Moodle creates a forum where announcements are saved; the creation of this forum is not implicit in course creation. However, the announcement system of Sakai is different from the forum system and the creation of announcements is implicit in course creation. Therefore, a PIM for forum services which is transformable to PSMs for each LMS is not feasible.

Finally, if platform is understood as programming language and the stress is put on the implementation of the canonical web services, again, the design of these implementations is abstract enough to be easily translated to J2EE or.NET.

Therefore, at the moment, the MDA approach has not been applied in the VCAA project.

Although the final goal of the VCAA project was the materialization of the outlined T3 architecture and its implementation, we are aware that T3 is not the final target architecture. Therefore, we propose two additional architectures for virtual campuses, which will be developed in future work:
                           
                              -
                              
                                 Architecture Type 4, T4. In this architecture several LMSs are simultaneously used and each course can select a specific tool for every LMS (e.g., Moodle's forums and Sakai's wikis). As in T3, the virtual campus is isolated from the LMSs using SOA infrastructure. Unlike T3 architecture, courses are not linked to one LMS, because they can be distributed through various tools belonging to different LMSs.


                                 Architecture Type 5¸ T5. This type is an evolution of architecture Type 4, where the functionality of the white label virtual campus is developed in the form of web services. This philosophy could be applied to previous architectures (i.e. T1, T2 and T3) but in our opinion, taking into account the state of the art, it is more appropriate to view Type 5 as an evolution of Type 4 architecture.


                        Fig. 8
                         shows T4 and T5 architectures.


                        Table 1
                         shows a comparison of the architectures defined in terms of the following items:
                           
                              -
                              
                                 Simultaneous use of LMSs. This item considers whether or not the virtual campus is able to support the deployment of courses in different LMSs. Users directly interact with these LMSs.


                                 Independent use of LMSs. This item considers whether or not the virtual campus users can be isolated from the underlying LMS.


                                 Set of standard web services for LMS integration. This item considers whether or not there is a standard uniform set of web services that permits LMS integration with external applications, irrespective of the LMS itself.


                                 Modular use of LMSs. This item considers whether or not the virtual campus can use different modules of different LMSs concurrently (e.g. forums from Sakai and messaging from Moodle).


                                 Integration in a Managed Learning Environment (MLE). This item considers whether or not the virtual campus functionality is exposed as a set of web services that enable virtual campus integration in the complete context of the software systems of a learning institution (i.e., the MLE).


                                 Currently deployed. This item considers whether or not the architecture has been implemented and is in use.


                     Section 2 depicts the T3 architecture and the isolation mechanism that allows white-label virtual campuses to stay isolated from LMS-specific implementations. However, the core element of this isolation mechanism, the canonical interfaces, has not yet been described. These canonical interfaces define a set of standard interfaces for decoupling virtual campuses from LMSs promoting the evolution of LMSs towards the Software as a Service (SaaS) model. This section details them and includes a description of the implementation details for the three platforms considered in this work.

The VCAA-defined canonical interfaces are divided according to their purpose. We have grouped the canonical operations into six canonical interfaces devoted to the management of users (UserService), courses (CourseService), course announcements (AnnouncementsService), resources (ResourceService), forums (ForumService) and platforms (PlatformService). These interfaces only define behavior, and they have to be implemented for every platform. The interface implementations must conform to the interface definition, but allow variations in each implementation. Thus, the information about users may be more detailed in some platforms than in others. Fig. 9
                         shows the canonical interfaces and their operations, and Appendix A lists all the functions defined in this figure.

In these canonical interfaces every operation, except login, has two attributes, sessionId and certificateId, used to identify and validate the operations invoked by a user. In addition, entities created by the web services (e.g. users, and courses) are managed by an identifier provided by the web service implementation. Furthermore, the operations return information about the execution of the operation or the information requested. These operations return the information using a simple string. Although a SOAP implementation has been chosen, the translation from SOAP to object representation is limited in some implementation languages (e.g. PHP). Therefore an XML information encoding format returned as a string has been chosen for the sake of functionality. Appendix B describes the DTDs that structure these returned strings.

The preceding section defines the VCAA interfaces and their operations. However there are aspects that are conditioned by the LMS or that must be defined on the implementation level, such as session management. Implementations for VCAA canonical interfaces have been provided for three of the main e-learning platforms: Blackboard Learn 9.1, Moodle 2.0 and Sakai 2.7. This section describes these implementations as well as their differences and similarities. The presence of web services implemented in these platforms has been analyzed in our previous study [15] and is not, therefore, considered in this paper.

All canonical interfaces have been implemented as JAX-WS based-web services, where the implementation of the operations has been as homogeneous as possible. The common restrictions are:
                           
                              -
                              The resource (User, Course, etc.) information has been standardized for all the platforms. Table 2
                                  shows the platform resource and its fields. This information is codified as objects for input parameters, and as XML document instances for output parameters.

Returned information is codified in XML format and flushed to a string. As was previously mentioned, this XML representation has been chosen instead of an object-oriented representation, due to the restrictions of some implementation languages (e.g. PHP) for the automatic conversion from SOAP to object representation. Fig. 10
                                  shows one message returned by the function getUsers of interface Platform. Appendix A lists the XML Schema encoded in each response. Appendix B describes these XML Schemas.

The operations have the same requirements in all e-learning platforms. For example, the addCourse operation has a requirement that the course has at least one forum after its creation, and this is the forum used by the forum canonical interface.


                        Appendix A shows the XML Schema types returned by every function in a string. Appendix B defines these XML Schemas.

At present, Blackboard Learn is the most extensively used e-learning platform [5]. Therefore, the implementation of VCAA in this platform is very important because it makes it available to a large number of potential users, and permits the evaluation of our approach in a private commercial platform.

The implementation of web services in this platform uses its API, also called building blocks. These blocks are an API offered by the platform to extend its functionality. The Blackboard API is provided in Java and the VCAA web services are also developed in Java. These VCAA web services must be deployed using the building block tool. Fig. 11
                            shows the relationship between the VCAA web services implemented and the building block operations.

Blackboard's services offer the greatest functionality and are well organized. However, Blackboard's web service code is not available. This restriction and the greater functionality provided by Blackboard API (i.e. building blocks) with respect to web services, have determined the development of the VCAA web services using Blackboard's API.

Moodle is the benchmark open source e-learning platform. It is the most widely used open platform [5]. Due to its open nature, thousands of users can access and test it, providing good integration capabilities for different purposes.

Moodle is a platform developed in PHP, and the VCAA canonical interfaces are developed using the Moodle API. Therefore, VCAA web services are also developed in PHP.

Sakai and Blackboard have their own session management systems. These systems are used by their APIs for the management of the session between the client and the platforms. Moodle, however, does not have a persistent management session system and the implementation of the VCAA services therefore has to deal with session management. This implementation uses the Moodle authentication API but has its own system to manage the session and its parameters. Fig. 12
                            shows the relationships between the VCAA web services implemented and the Moodle API.

Moodle, presents a concrete philosophy: it is growing through the final user experience. The platform is highly configurable and has useful tools implemented. However, in our opinion, the platform does not have a clearly defined architecture. Regarding its web services, they have the same strengths and weaknesses. Moodle's web services present a new architecture concept: dynamic, highly configurable and adaptable to the end user's requirements. But these services are complicated, the functionality offered is still poor and Moodle's web services cannot be used to implement the VCAA web services. Thus, VCAA web services have been implemented using Moodle's API, which is poorly documented. To summarize, Moodle's unstructured platform architecture, and the lack of API documentation, make the development of new tools, such as the VCAA web services difficult.

Sakai is the other main open platform [5]. The implementation of web services in Sakai and Moodle allows developers to test their integration in free and open platforms. Sakai is developed in Java, and therefore the VCAA web services have also been implemented in Java. This implementation relies on Sakai web services whenever Sakai web services support VCAA operations. A new web service named ExtensionOfSakaiScript has been created for unsupported operations, and has been implemented using Sakai's API. Table 3
                            shows the relationships between the implemented VCAA web services and Sakai facilities (Fig. 13
                           ).

Sakai is an open platform more similar to Blackboard than to Moodle. Sakai's web services and functionality are closer to Blackboard's, the main advantage over Blackboard being that it is open source. This characteristic makes it easy to use Sakai's API and web services. Thus, the VCAA web services have been implemented using Sakai web services, due to the similarities between them. However, some VCAA web services have been built from scratch using Sakai's API, owing to the lack of support by Sakai's web services.

@&#CONCLUSIONS AND FUTURE WORK@&#

It is a matter of fact that current users of virtual campuses are calling for more tools, more e-learning platforms, fewer dependencies on these platforms, and shorter development times for implementing their demands. In order to support the demands of their users, present and future virtual campuses need maintainable software architectures, able to deal with the integration of several e-learning platforms.

In this paper we have materialized the loosely outlined T3 architecture in terms of multitier architecture. The T3 architecture permits the development of a white-label virtual campus independent of the underlying e-learning platform. This architecture relies on a SOA infrastructure, based on a set of canonical interfaces that we have defined and implemented. These interfaces are enough to implement the main features of a virtual campus. They are not as powerful as those provided by OKI and IMS but, precisely due to their simplicity, they are easier to implement in specific e-learning platforms. Thus, we have provided implementations for Blackboard Learn 9.1, Moodle 2.0 and Sakai 2.7.

A consequence of the work presented in this paper is the standardization of the set of web services that an LMS should implement in order to be integrated with a virtual campus. This is an open research issue, and at present, LMSs present very heterogeneous functionalities, exposed as web services [15]. In this way, the canonical web services proposed in this work could be the seed for a standard such as OASIS Sear/Retrieve Web service (SRW) ([25]b), the ANSIL/HL7 Retrieve, Locate, and Update Service (RLUS) as specified by the HL7 V3 Standard [14] or OASIS Content Management Interoperability Services (CMIS) 
                     [25]. Thus, as CMIS compliant systems can be used by clients irrespective of their implementation details, canonical service compliant LMSs can be used by virtual campuses developed with Type 3 architecture irrespective of LMS implementation details.

Using the T3 architecture and these canonical web services, virtual campuses are totally isolated from concrete e-learning platforms: users do not interact with LMSs and virtual campus code is independent of specific LMSs. Thus, if migration facilities are provided, educational institutions can migrate from one e-learning platform to another, without the need to reprogram their virtual campuses, their users being unaware of the change. In addition, canonical interfaces allow LMSs to be modular parts of virtual campuses developed using more advanced architectures such as T4 and T5.

Regarding specific isolation techniques for making virtual campus code independent from web services, we have chosen a solution based on a classic business delegate, because of its isolation properties, although other interesting choices have been defined.

With respect to the three platforms where the VCAA web services have been implemented, it is evident that they are at different stages of maturity. In addition, they have different philosophies for their web service support. These factors have directly affected VCAA web service implementation in each platform.

Finally, with regard to discovering services, the nature of the use of LMSs does not promote individual service discovery. However, our approach promotes a new and interesting facet for LMS providers: the possibility of offering their LMSs as SaaS. Nowadays, enterprises like Blackboard offer the hosting of their LMSs to educational institutions. However, institutions are linked to their LMS providers. The presentation of LMS through a set of standard web services (such as our proposed canonical web services) would enable one both to refocus the LMS market to the SaaS approach and to isolate virtual campuses from specific LMS providers.

Future work involves the additional definition of canonical services for the management of some aspects not considered up to now (e.g. data loading from university database to virtual campus database), as well as their implementation for the target platforms used in the project. On the other hand, new implementations for VCAA web services on additional platforms could be undertaken. The study and enhancement (if needed) of migration facilities between platforms have also to be considered.

Long-term future work includes the definition of the virtual campus architecture, its canonical interfaces, and their implementation for the T4 architecture. The implementation of a T5 architecture is envisaged following the implementation of T4. The use of model-driven development techniques is also being considered in order to ease code generation from abstract models.

@&#ACKNOWLEDGMENTS@&#


                  Ministerio de Ciencia e Innovación/project AACV TIN2009-14317-C03-01, Universidad Complutense de Madrid/research group 921340, and Comunidad Autónoma de Madrid/project eMadrid S2013/ICE-2715 have supported this work.


                     Announcement — summary method.
                     
                        
                           
                              
                              
                              
                                 
                                    
                                       String
                                    
                                    
                                       addAnnouncement(String courseid, String title, String text, String session, String certificate)
                                    
                                 
                                 
                                    
                                       String
                                    
                                    
                                       deleteAnnoncement(String labelid, String courseid, String session, String certificate)
                                    
                                 
                                 
                                    
                                       String
                                    
                                    
                                       getAnnouncements(String courseid, String session, String certificate)
                                    
                                 
                              
                           
                        
                     
                  


                     Course — summary method.
                     
                        
                           
                              
                              
                              
                                 
                                    
                                       String
                                    
                                    
                                       addCourse(String idnumber, String shortname, String fullName, String summary, String category, String session, String certificate)
                                    
                                 
                                 
                                    
                                       String
                                    
                                    
                                       assignRole(String courseid, String userid, String roleId, String session, String certificate)
                                    
                                 
                                 
                                    
                                       String
                                    
                                    
                                       deleteCourse(String courseid, String session, String certificate)
                                    
                                 
                                 
                                    
                                       String
                                    
                                    
                                       getAllUsers(String courseId, String session, String certificate)
                                    
                                 
                                 
                                    
                                       String
                                    
                                    
                                       getCourseInfo(String courseId, String session, String certificate)
                                    
                                 
                                 
                                    
                                       String
                                    
                                    
                                       getCourseRole (String courseId, String userId, String session, String certificate)
                                    
                                 
                                 
                                    
                                       String
                                    
                                    
                                       unassignRole(String courseid, String userid, String roleId, String session, String certificate)
                                    
                                 
                              
                           
                        
                     
                  


                     Forum — summary method.
                     
                        
                           
                              
                              
                              
                                 
                                    
                                       String
                                    
                                    
                                       addDiscussion(String subject, String message, String courseId, String session, String certificate)
                                    
                                 
                                 
                                    
                                       String
                                    
                                    
                                       addNewPost(String discussionId, String parentPost, String subject, String message, String courseId, String session, String certificate)
                                    
                                 
                                 
                                    
                                       String
                                    
                                    
                                       deleteDiscussion(String discussionId, String courseId, String session, String certificate)
                                    
                                 
                                 
                                    
                                       String
                                    
                                    
                                       deletePost(String discussionId, String postId, String courseId, String session, String certificate)
                                    
                                 
                                 
                                    
                                       String
                                    
                                    
                                       getDiscussion (String discussionId, String courseId, String session, String certificate)
                                    
                                 
                                 
                                    
                                       String
                                    
                                    
                                       getDiscussionPosts(String discussionId, String courseId, String session, String certificate)
                                    
                                 
                                 
                                    
                                       String
                                    
                                    
                                       getDiscussions(String coureId, String session, String certificate)
                                    
                                 
                              
                           
                        
                     
                  


                     Platform — summary method.
                     
                        
                           
                              
                              
                              
                                 
                                    
                                       String
                                    
                                    
                                       getCourses(String session, String certificate)
                                    
                                 
                                 
                                    
                                       String
                                    
                                    
                                       getUsers(String session, String certificate)
                                    
                                 
                              
                           
                        
                     
                  


                     Resource — summary method.
                     
                        
                           
                              
                              
                              
                                 
                                    
                                       String
                                    
                                    
                                       deleteCourseFile(String courseid, String filename, String path, String session, String certificate)
                                    
                                 
                                 
                                    
                                       Byte[]
                                    
                                    
                                       getCourseFile(String courseid, String filename, String path, String session, String certificate)
                                    
                                 
                                 
                                    
                                       String
                                    
                                    
                                       getCourseFiles(String courseid, String session, String path, String certificate)
                                    
                                 
                                 
                                    
                                       String
                                    
                                    
                                       uploadResource(String courseId, String userId, String filename, String path, byte[] base64,String session, String certificate)
                                    
                                 
                              
                           
                        
                     
                  


                     User — summary method.
                     
                        
                           
                              
                              
                              
                                 
                                    
                                       String
                                    
                                    
                                       addUser(String name, String lastName, String email, String username, String password, String type, String session, String certificate)
                                    
                                 
                                 
                                    
                                       String
                                    
                                    
                                       deleteUser(String userid, String session, String certificate)
                                    
                                 
                                 
                                    
                                       String
                                    
                                    
                                       getUser(String userid, String session, String certificate)
                                    
                                 
                                 
                                    
                                       String
                                    
                                    
                                       getUserByUserName(String userName, String session, String certificate)
                                    
                                 
                                 
                                    
                                       String
                                    
                                    
                                       getUserCourses(String userid, String session, String certificate)
                                    
                                 
                                 
                                    
                                       String
                                    
                                    
                                       getUserInfo(String session, String certificate)
                                    
                                 
                                 
                                    
                                       String
                                    
                                    
                                       login(String userName, String password, String publicKey)
                                    
                                 
                                 
                                    
                                       String
                                    
                                    
                                       logout(String session, String certificate)
                                    
                                 
                                 
                                    
                                       String
                                    
                                    
                                       updateUser(String userid, String name, String lastName, String email, String password, String type, String session, String certificate)
                                    
                                 
                              
                           
                        
                     
                  


                     Announcement
                  


                     
                        
                           
                        
                     
                  


                     AnnouncementList
                  


                     
                        
                           
                        
                     
                  


                     Course
                  


                     
                        
                           
                        
                     
                  


                     CourseList
                  


                     
                        
                           
                        
                     
                  


                     Discussion
                  


                     
                        
                           
                        
                     
                  


                     DiscussionList
                  


                     
                        
                           
                        
                     
                  


                     Error
                  


                     
                        
                           
                        
                     
                  


                     Post
                  


                     
                        
                           
                        
                     
                  


                     PostList
                  


                     
                        
                           
                        
                     
                  


                     Resource
                  


                     
                        
                           
                        
                     
                  


                     ResourceList
                  


                     
                        
                           
                        
                     
                  


                     User
                  


                     
                        
                           
                        
                     
                  


                     UserList
                  


                     
                        
                           
                        
                     
                  

@&#REFERENCES@&#

