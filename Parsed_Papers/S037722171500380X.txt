@&#MAIN-TITLE@&#A model enhancement heuristic for building robust aircraft maintenance personnel rosters with stochastic constraints

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We solve a personnel planning problem with stochastic delays in demand arrival times.


                        
                        
                           
                           A model enhancement algorithm is proposed that combines simulation and optimization.


                        
                        
                           
                           Our model can ensure a specified service level when stochasticity is introduced.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Model enhancement

Aircraft maintenance

Stochastic optimization

@&#ABSTRACT@&#


               
               
                  This paper presents a heuristic approach to optimize staffing and scheduling at an aircraft maintenance company. The goal is to build robust aircraft maintenance personnel rosters that can achieve a certain service level while minimizing the total labor costs. Robust personnel rosters are rosters that can handle delays associated with stochastic flight arrival times. To deal with this stochasticity, a model enhancement algorithm is proposed that iteratively adjusts a mixed integer linear programming (MILP) model to a stochastic environment based on simulation results. We illustrate the performance of the algorithm with a computational experiment based on real life data of a large aircraft maintenance company located at Brussels Airport in Belgium. The obtained results are compared to deterministic optimization and straightforward optimization. Experiments demonstrate that our model can ensure a certain desired service level with an acceptable increase in labor costs when stochasticity is introduced in the aircraft arrival times.
               
            

@&#INTRODUCTION@&#

To ensure safety in aviation, aircraft should be maintained regularly and carefully. Constructing a good workforce schedule is therefore essential to make sure that all aircraft will be maintained thoroughly in time. In the aviation industry, different forms of maintenance exist. We distinguish A-, B-, C- and D-checks, line maintenance, hangar maintenance, scheduled and unscheduled maintenance, etc. (Van den Bergh, De Bruecker, Beliën, & Peeters, 2013). In this paper we focus on the line maintenance which includes pre-flight inspections, transit checks, daily checks (visual inspection of the aircraft, fluid level checks, general security checks, emergency equipment checks and cleanliness of the flight deck checks), weekly checks and on-call assistance (Beliën, Demeulemeester, & Cardoen, 2012).

Scheduling aircraft maintenance personnel at an aircraft maintenance company entails some special problems. First, the workforce scheduling problem is heavily constrained by labor union agreements. Second, the management of the company must decide itself when exactly the maintenance should take place between the arrival and departure of the aircraft. Hence, the timing of the workload is an extra decision in the scheduling problem. Third, aircraft do not always fly on schedule and sometimes arrive with a delay. When the workforce scheduling does not anticipate delays in arrival time, the scheduled capacity may be insufficient to maintain all aircraft in time.

This paper focuses on this latter problem and presents a technique to obtain robust aircraft maintenance personnel rosters that minimize the total labor costs. Because aircraft arrive with stochastic delays, we define the stochastic robustness of these rosters as their ability to ensure a certain service level; i.e., to ensure that on average at least a certain percentage of the flights can be maintained before their scheduled time of departure (STD). To obtain this stochastic robustness, we propose a model enhancement (ME) heuristic that iteratively enhances a mixed integer linear programming (MILP) model by adding constraints based on information resulting from simulation experiments.

We illustrate our model using real life data from Sabena Technics, a large aircraft maintenance company located at Brussels Airport in Belgium.

@&#LITERATURE REVIEW@&#

The first part of this literature review situates this paper within the existing literature on aircraft maintenance scheduling, while the second part reviews the literature on stochastic optimization.

The problem under study concerns a workforce scheduling problem for line maintenance personnel. For an overview of the literature on general workforce scheduling, we refer to Van den Bergh, Beliën, De Bruecker, Demeulemeester, and De Boeck (2013), while a literature overview of aircraft maintenance operations can be found in Van den Bergh, De Bruecker, Beliën, and Peeterse (2013). Many of the studied aircraft maintenance optimization problems concern maintenance routing optimization (see, e.g., Liang, Chaovalitwongse, Huang, & Johnson, 2010; Sarac, Batta, & Rump, 2006; Sriram & Haghani, 2006; Talluri, 1998), which addresses the problem of finding optimal sequences of flights for a particular aircraft such that it can be parked in a maintenance station after a certain number of days of flying without maintenance. This problem is often solved for one airline company.

We assume, however, that the maintenance routing problem is already solved and the routes are given for several airline companies. Given a set of flights that arrive and depart at a certain airport, we try to optimize the maintenance workforce schedule at the associated maintenance station. The approach is tested on a line maintenance environment, excluding other types of maintenance, such as light and heavy maintenance. The latter includes more demanding maintenance checks and are typically subject to a higher variability in workload, whereas the former is limited to routine maintenance of which the required workload can quite well be predicted beforehand. Other papers that study line maintenance problems in comparable settings to this paper include Beliën et al. (2012), Beliën, Demeulemeester, De Bruecker, Cardoen, and Van den Bergh (2013), Van den Bergh, De Bruecker, Beliën, De Boeck, and Demeulemeester (2013), Yan, Yang, and Chen (2004) and Papakostas, Papachatzakis, Xanthakis, Mourtzis, and Chryssolouris (2010).

In contrast with Quan, Greenwood, Liu, and Hu (2007) who present a multi-objective model that simultaneously minimizes the maintenance capacity and the makespan of completing all maintenance jobs, our model involves a single objective (minimizing maintenance personnel costs) while the other objective (minimizing the number of late flight departs due to late maintenance) is modeled through a service level constraint. The problem studied in Safaei, Banjevic, and Jardine (2010, 2011) also requires a certain number of aircraft to be available (on time) for the next fly programs, and, hence studies a similar service level constraint. An important difference is, however, the context of a military aircraft fleet, which involves a much smaller number of aircraft ( < 10) compared to our study incorporating the commercial aircraft fleet of different airline companies.

The model presented in this paper aims at developing a robust maintenance capacity schedule taking into account uncertainty in the flight arrivals and, hence, in the timing of the workload. This is a major distinction with the problem studied in (Yan et al., 2004), which is closely related to our work, except for the assumption of deterministic flight arrivals. Other papers that study aircraft maintenance scheduling assuming uncertainty in the timing of the workload include Duffuaa and Andijani (1999), Mattila, Virtanen, and Raivio (2008), Petersen, Solveling, Clarke, Johnson, and Shebalov (2012) and Muchiri (2009). The papers of Safaei et al. (2010, 2011) assume deterministic flight arrivals, but stochastic workloads (and thus stochastic maintenance durations or repair times).

Robust optimization methods are used when the uncertain parameters are assumed to take values from a certain range (Bertsimas & Sim, 2004). These methods differ from stochastic optimization methods where the uncertain parameters follow a certain probability distribution. In this paper, we are concerned with stochastic optimization as we assume that the delays in aircraft arrival times follow a certain distribution.

Several techniques have already been proposed in the literature to cope with the problems of stochastic optimization. However, no single best solution method exists. When the problem becomes very complex, simulation is often used in combination with optimization (Fu, 2002). When it comes to handling stochastic elements, regular optimization methods have some major shortcomings. Simulation on the other hand fails to implement the decision element and only evaluates a solution in a stochastic environment. Hence, combining both methods may lead to a powerful approach (Fagerholt, Christiansen, Hvattum, Johnsen, & Vabø, 2010). Complex simulation-optimization couplings have been described in the literature in order to make a solution more robust and applicable in a real life (stochastic) environment.

In simulation-optimization couplings, different solutions are evaluated with simulation and the search is usually guided through different solutions to obtain a good (or the best) feasible result. Chen and Lee (2011) distinguish between three different subcategories of simulation optimization. Total enumeration always leads to the global optimum by evaluating all possible solutions with simulation. The second subcategory is the gradient approach. This approach imitates gradient methods in deterministic optimization methods to carry out a guided local search. Those approaches are also called model based approaches. The third subcategory are gradient-free approaches. Chen and Lee (2011) refer to these as the metaheuristic approaches. The second and third subcategories can be described as guided search methods. They do not enumerate all possible solutions, and hence, do not necessarily lead to the global optimum.

In this paper, we use a technique called “model enhancement”. The term model enhancement (ME) was used by Bachelet and Yon (2007) to indicate a different way of combining simulation and optimization. It can be seen as a decomposition method like Benders’ decomposition as it enhances an optimization model based on simulation results by adding constraints (Benders, 1962). While most optimization–simulation couplings focus on improving the objective function evaluated from simulation (like the simulation optimization approach), ME still focuses on optimizing the theoretical objective function. It tries to improve the solution provided by a mathematical model by the use of simulation (Bachelet & Yon, 2007). In their paper, Bachelet and Yon (2007) only consider a deterministic problem. They assume that in practice, several modeling simplifications are needed to construct the mathematical optimization model to solve a real life problem. The resulting model therefore fails to give a correct representation of reality. Simulation is used to enhance the mathematical model and to improve the realism and applicability of the solution. In our research, we follow a similar approach, but we consider a stochastic problem. We start with a model that neglects stochasticity and use simulation to enhance the deterministic model to produce robust solutions.

At many aircraft maintenance companies, the demand for maintenance is seasonal and changes only twice a year. Furthermore, each week, the same set of flights have to be maintained. Table 1
                      gives a typical example of the demand faced by an aircraft maintenance company.

Since the timing of the workload is a decision variable in most cases, only the scheduled time of arrival (STA) and the scheduled time of departure (STD) of each aircraft are given. Next to the time interval during which the maintenance should take place, the estimated workload in man-hours is given. Given such a recurring workload for each flight during one week, the maintenance company has to find the optimal workforce configuration in terms
                      of the lowest total labor costs. Such a workforce configuration defines when and how many employees should be scheduled on each day during an entire week.


                     Fig. 1 shows a graphical representation of the deterministic problem where all flights arrive in time (i.e., at their STA). In this case, the problem is to minimize the costs of the workforce schedule such that the available capacity (represented by the dashed line) matches the required workload as well as possible in order to maintain all flights in time. In our particular case, we are looking for an optimal shift schedule, but to keep the problem as generic as possible, the model presented in Section 4.2 only looks at the resulting capacity.

To make sure that we can maintain all flights in time, the workforce scheduling model allocates the available capacity to the different flights according to a certain allocation rule. The idea behind this allocation rule is that the flight that leaves first, is maintained first. This is shown in Fig. 2.

As flight 1 leaves first, capacity is first allocated to flight 1, then to flight 2 and finally to flight 3. Hence, we see that there is only just enough capacity available to maintain flights 1 and 2 before their STD. This perfect match between capacity and demand is of course an optimal situation in the deterministic problem where flights arrive at their STA. However, in reality, aircraft do not always fly on schedule and sometimes arrive with a delay. Unexpected delays can disarrange the maintenance planning which can lead to a delay in the flight’s departure time when capacity buffers are absent or too small. Of course, an aircraft maintenance company wants to ensure that 100 percent of the flights can be maintained in time when all flights would arrive in time (i.e., according to the STA of each aircraft). However, because flights arrive with stochastic delays in reality, the company only allows for at most a certain average percentage of the flights (depending on the desired service level) to be maintained after their STD. We refer to this stochastic constraint as the service level constraint in the optimization problem.

When flights arrive with stochastic delays, the deterministic problem from Fig. 1 becomes a stochastic problem in which we also have to make sure that we can meet the service level. Fig. 3 shows the stochastic problem where flights arrive with stochastic delays, represented by the probability distributions. In the example in Fig. 1 and 2, the capacity made available by the first 2 day shifts is only just enough to maintain flights 1 and 2 in time. Therefore, when flight 2 would arrive with a delay, this flight cannot be maintained in time anymore. Furthermore, when flight 1 arrives with a large delay, it will need some of the capacity originally assigned to flight 2, which means that also in this case, flight 2 cannot be maintained in time anymore. Hence, while the deterministic result in Fig. 1 entails very low labor costs, the very close match between capacity and demand renders the solution very fragile when flights can arrive with a delay.

In order to keep the number of flights that cannot be completely maintained before their STD under a certain threshold (i.e., to satisfy the service level constraint), the deterministic solution must be made more robust. To obtain this stochastic robustness, we propose an iterative procedure combining simulation and optimization called model enhancement (ME). Fig. 3 summarizes the three phases of the ME algorithm (simulation, enhancement and optimization). A simulation model is used to simulate the allocation of capacity to flights in a stochastic environment over several weeks and to identify flights that can often not be maintained in time. Hence, the simulation model gives us an idea of where to add extra capacity in order to reduce the average number of flights that cannot be maintained in time. To increase the capacity during these time periods, certain constraints are added to the workforce scheduling optimization model. After solving the enhanced optimization model, a new shift schedule is obtained. The resulting available capacity in Fig. 3 (the dashed line) shows that the second day shift from Fig. 1 is now replaced by a night shift. While this night shift is more expensive than the previous day shift, it will provide capacity for flight 2 in case of a delay. These three steps represent one ME iteration and are repeated until a stopping criterion is met. Fig. 3 also shows a typical graph of the resulting costs and service levels over multiple enhancement iterations. As the number of flights with late maintenance decreases, the costs usually go up and vice versa.

As shown in Fig. 3, the model enhancement heuristic can be decoupled from the problem formulation as its primary objective is only to identify problematic time periods and to use an optimization model to increase capacity during these periods. Hence, the application of the proposed model enhancement procedure is not only limited to this specific problem setting.

@&#METHODOLOGY@&#

To solve the stochastic problem outlined above, we propose a model enhancement (ME) heuristic. ME combines simulation and optimization in order to incorporate the stochastic service level constraint by iteratively enhancing a deterministic optimization model. Fig. 4 shows the three consecutive phases that are repeated in the enhancement algorithm. One loop through phases I–III is referred to as one enhancement iteration. The enhancement iterations are indexed by index δ ranging from 0 to Δ. The value of Δ is arbitrarily chosen to limit the computation time. The next sections discuss the three phases of the ME algorithm.

The core of the ME algorithm is the mixed integer linear programming (MILP) model that finds the optimal workforce configuration. The obtained solution provides the optimal capacity that must be available at each time period in order to maintain all aircraft in time with minimum labor costs. These MILP models of phase III are indexed as MILP
                           δ
                        , with δ ranging from 0 to Δ. The following model describes the MILP formulation of the general maintenance scheduling model. In Section 5.1, the general objective function (1) and the general constraints (2) and (5) are elaborated to represent a real-life problem.

We first list the parameters and sets, along with their associated indices:

                           
                              d ∈ {1, 2, … , 7}:
                           
                              days in the week

time periods in one week

flights to be serviced

time periods during which flight f can be serviced. That is 
                                    
                                       
                                          P
                                          f
                                       
                                       =
                                       
                                          {
                                          p
                                          |
                                          
                                             STA
                                             f
                                          
                                          ≤
                                          p
                                          ≤
                                          
                                             STD
                                             f
                                          
                                          }
                                       
                                    
                                  with STA
                                    f
                                  (STD
                                    f
                                 ) the scheduled time of arrival (departure) of flight f
                              

the workload (in man-hours) of flight f
                              

the available capacity on period p when solving the MILP model in enhancement iteration δ
                              

the number of workers assigned to maintain flight f during time period p when solving the MILP model in enhancement iteration δ
                              

set of different workforce scheduling variables. These can be for example decision variables that define the timing and scheduling of shifts, team sizes, etc.

The objective function (1) describes the total labor costs faced by the company resulting from the decisions for the workforce variables in 
                           X
                        . These can be decisions regarding the scheduling of different types of shifts, e.g., night and day shifts, the timing of those shifts, the team sizes in each shift, etc. Based on those decisions, a capacity function is used to calculate the available capacity 
                           
                              q
                              p
                              δ
                           
                         for each time period p in constraint (2). Constraints (3) and (4) ensure that the assigned work for each flight (and therefore the available capacity) is sufficient to at least cover the demand for maintenance. This is referred to as the coverage constraint. In constraint (4), 
                           
                              
                                 L
                                 f
                              
                              *
                              
                                 
                                    |
                                    P
                                    |
                                 
                                 
                                    24
                                    *
                                    7
                                 
                              
                           
                         is a conversion factor to match the units of Lf
                         and 
                           
                              
                                 ∑
                                 
                                    p
                                    ∈
                                    
                                       P
                                       f
                                    
                                 
                              
                              
                                 g
                                 
                                    f
                                    p
                                 
                                 δ
                              
                           
                        . Real-life staffing and scheduling problems are however not only constrained by satisfying the demand for maintenance services while minimizing the costs. Therefore, constraint (5) adds other, specific workforce scheduling constraints, such as constraints on average working times, working in the weekend, break times, shift succession constraints, etc.

During the first enhancement iteration (δ = 0), we define the first MILP model as MILP0. Model MILP0 contains the original objective function and all original constraints. It can be seen as the deterministic MILP model as it assumes that all aircraft exactly arrive at their scheduled time of arrival.


                        Definition of MILP0 (when δ = 0):
                        
                           
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      O
                                                      p
                                                      t
                                                      i
                                                      m
                                                      i
                                                      z
                                                      e
                                                      :
                                                      
                                                      Objective
                                                      
                                                      function
                                                      
                                                      (
                                                      1
                                                      )
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      S
                                                      u
                                                      b
                                                      j
                                                      e
                                                      c
                                                      t
                                                      
                                                      t
                                                      o
                                                      :
                                                      
                                                      Constraints
                                                      
                                                      (
                                                      2
                                                      )
                                                      --
                                                      (
                                                      7
                                                      )
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        To account for the stochastic service level constraint that limits the number of flights that can leave with a delay, extra constraints will be added to the MILP model described above. During the next enhancement iterations (δ = 1 to Δ), the MILP
                           δ
                         model is also defined by the original objective function (1), but the model has different constraints:


                        Definition of MILPδ (with δ = 1 to Δ):
                        
                           
                              (8)
                              
                                 
                                    
                                       
                                          
                                             O
                                             p
                                             t
                                             i
                                             m
                                             i
                                             z
                                             e
                                             :
                                          
                                       
                                       
                                       
                                          
                                             
                                             Objective
                                             
                                             function
                                             
                                             (
                                             1
                                             )
                                          
                                       
                                    
                                    
                                       
                                          
                                             S
                                             u
                                             b
                                             j
                                             e
                                             c
                                             t
                                             
                                             t
                                             o
                                             :
                                          
                                       
                                       
                                       
                                          
                                             
                                             Constraints
                                             
                                             (
                                             2
                                             )
                                             
                                             and
                                             
                                             (
                                             3
                                             )
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             
                                             
                                                ∑
                                                
                                                   p
                                                   ∈
                                                   
                                                      P
                                                      f
                                                   
                                                
                                             
                                             
                                                g
                                                
                                                   f
                                                   p
                                                
                                                δ
                                             
                                             ≥
                                             
                                                L
                                                f
                                             
                                             *
                                             
                                                
                                                   |
                                                   P
                                                   |
                                                
                                                
                                                   24
                                                   *
                                                   7
                                                
                                             
                                             ,
                                             
                                             ∀
                                             f
                                             ∈
                                             F
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (9)
                              
                                 
                                    
                                       
                                       
                                       
                                          
                                             
                                                ∑
                                                
                                                   p
                                                   ∈
                                                   
                                                      P
                                                      f
                                                      δ
                                                   
                                                
                                             
                                             
                                                g
                                                
                                                   f
                                                   p
                                                
                                                δ
                                             
                                             ≥
                                             
                                                L
                                                f
                                                δ
                                             
                                             *
                                             
                                                
                                                   |
                                                   P
                                                   |
                                                
                                                
                                                   24
                                                   *
                                                   7
                                                
                                             
                                             +
                                             
                                                ∑
                                                
                                                   p
                                                   ∈
                                                   
                                                      P
                                                      f
                                                      δ
                                                   
                                                
                                             
                                             
                                                g
                                                
                                                   f
                                                   p
                                                
                                                
                                                   δ
                                                   −
                                                   1
                                                
                                             
                                             ,
                                             
                                             ∀
                                             f
                                             ∈
                                             
                                                F
                                                δ
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             Constraints
                                             
                                             (
                                             5
                                             )
                                             --
                                             (
                                             7
                                             )
                                          
                                       
                                    
                                 
                              
                           
                        with parameters:

                           
                              
                                 
                                    
                                       g
                                       
                                          f
                                          p
                                       
                                       
                                          δ
                                          −
                                          1
                                       
                                    
                                    ≥
                                    0
                                 
                              :
                           
                              the number of workers assigned to maintain flight f during time period p according to the results of the MILP
                                    δ − 1 model.

This is the parameter used to increase the capacity requirements in the MILP
                                    δ
                                  model. It is the extra needed maintenance work (in man-hours) for flight f to ensure that it leaves without a delay.

set of flights for which the extra required maintenance work 
                                    
                                       L
                                       f
                                       δ
                                    
                                  must be added during enhancement iteration δ.

set of all time periods p during which the extra required maintenance work 
                                    
                                       L
                                       f
                                       δ
                                    
                                  can be scheduled for flight f during enhancement iteration δ.

Parameter 
                           
                              L
                              f
                              δ
                           
                         and sets Fδ
                         and 
                           
                              P
                              f
                              δ
                           
                         result from the simulation model and are defined by the enhancement function (see Section 4.4.2). Constraint (9) tries to avoid delays in departure time for all flights in the set Fδ
                        . The sum 
                           
                              
                                 ∑
                                 
                                    p
                                    ∈
                                    
                                       P
                                       f
                                       δ
                                    
                                 
                              
                              
                                 g
                                 
                                    f
                                    p
                                 
                                 δ
                              
                           
                         captures the assigned work to flight f in the time interval 
                           
                              P
                              f
                              δ
                           
                         during enhancement iteration δ. The sum 
                           
                              
                                 ∑
                                 
                                    p
                                    ∈
                                    
                                       P
                                       f
                                       δ
                                    
                                 
                              
                              
                                 g
                                 
                                    f
                                    p
                                 
                                 
                                    δ
                                    −
                                    1
                                 
                              
                           
                         represents the assigned work to flight f in the time interval 
                           
                              P
                              f
                              δ
                           
                         during the previous enhancement iteration. Parameter 
                           
                              L
                              f
                              δ
                           
                         is the extra needed maintenance work (in man-hours) for flight f to ensure that this flight leaves without a delay. Hence, when according to the simulation, flight f could not be maintained in time, the assigned work 
                           
                              
                                 ∑
                                 
                                    p
                                    ∈
                                    
                                       P
                                       f
                                       δ
                                    
                                 
                              
                              
                                 g
                                 
                                    f
                                    p
                                 
                                 
                                    δ
                                    −
                                    1
                                 
                              
                           
                         to flight f during the previous enhancement iteration was apparently insufficient to maintain this flight in time. Therefore, the extra work 
                           
                              L
                              f
                              δ
                           
                         must be added during this enhancement iteration to make this flight leave in time.

The information about 
                           
                              
                                 P
                                 f
                                 δ
                              
                              ,
                           
                         
                        Fδ
                         and 
                           
                              L
                              f
                              δ
                           
                         will be made available after applying the enhancement function in phase II.

The first step in each enhancement iteration is to run a simulation model to evaluate the MILP solution in a stochastic environment (with delays). The simulation model simulates the assignment of workers to aircraft to perform the required maintenance during several weeks. The simulation model is initialized with the available capacity 
                           
                              q
                              p
                              
                                 δ
                                 −
                                 1
                              
                           
                         resulting from solving the MILP model during the previous enhancement iteration. The simulation model then allocates on each time period a certain number of maintenance workers to grounded aircraft (i.e., to aircraft that can be maintained during that time period) according to a specific allocation rule. Because of possible delays, some flights will only be completely maintained after their STD.

Because of stochastic delays in arrival times, it is not always possible to maintain all flights in time (i.e., before the aircraft’s STD). When this is the case, the remaining required maintenance is finished as soon as possible. At the end of each simulated week ω, all flights that left with a delay are saved in the subset Φω
                        . The maintenance work that has not yet been done at the STD of flight f is saved as λ
                        
                           f, ω
                        . The time window in which that flight could be maintained according to the simulation model is saved as Π
                        
                           f, ω
                        .

We define the results from the simulation as follows:

                           
                              Ω:
                           
                              the set of all weeks ω included in the simulation experiment.

the subset of all flights f that left with a delay during simulated week ω.

the set of all flights f that left with a delay over all simulated weeks.

the average number of flights per week that leave with a delay. This is also called the average number of flights with late maintenance.

the work that has not yet been done at the STD of flight f with late maintenance in simulated week ω.

the set of weeks ω in which flight f left with a delay.

the average work that has not yet been done at the STD of flight f. This is the extra needed work in order to maintain flight f in time.

the set of all time periods p between the simulated arrival time and the STD of flight f with late maintenance in week ω.

the set of all time periods p between the average simulated arrival time (over all weeks in Ωf
                                 ) and the STD of flight f.

Based on the simulation results, the MILP model will be enhanced to produce a more robust workforce configuration. Recall that this is a workforce configuration that can achieve a desired service level under stochastic delays in flight arrival times. Constraint (10) formally describes the service level constraint.

                           
                              (10)
                              
                                 
                                    
                                       
                                       
                                       
                                          
                                             φ
                                             ≤
                                             Allowed
                                             
                                             average
                                             
                                             number
                                             
                                             of
                                             
                                             delayed
                                             
                                             flights
                                             
                                             according
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             to
                                             
                                             the
                                             
                                             service
                                             
                                             level
                                          
                                       
                                    
                                 
                              
                           
                        
                     

This constraint implies that the average number of flights per week that leave with a delay (also called the average number of flights with late maintenance) must be smaller than or equal to the number that is allowed by the company. When the service level is for example 97 percent, at most 3 percent of all weekly flights (on average) can leave with a delay. Fig. 5
                         shows the different steps of phase II.

At the start of phase II, it is checked whether the service level constraint (10) is satisfied. When this constraint is not satisfied, we force the MILP model to increase the available capacity with a certain amount in a certain time interval for certain flights. Hence, the first step is to choose a promising set of flights for which the required maintenance work will be increased. This should be a set of flights that regularly leave with a delay. We first sort the flights in the set Φ based on the number of times that the flight leaves with a delay (i.e., by decreasing value of |Ωf
                           |). To create the set of promising flights, the first η flights are selected from the sorted set Φ according to Eq. (11). These selected flights are saved in the set Φ′ such that |Φ′| = η. This set contains “promising” flights because allocating more work to a flight of set Φ′ offers the best chance to decrease the value of φ.

                              
                                 (11)
                                 
                                    
                                       
                                          
                                             
                                                η
                                                =
                                                ⌈
                                                φ
                                                −
                                                Allowed
                                                
                                                average
                                                
                                                number
                                                
                                                of
                                                
                                                delayed
                                                
                                                flights
                                                ⌉
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

After the set Φ′ has been composed, we have to decide how much extra work each flight in Φ′ should receive in what time interval in order to maintain that flight completely before its STD. These decisions are made by the enhancement function h which represents the adjustments to the MILP model at each enhancement iteration. In this section, we propose a simple and intuitive formulation of function h which yielded good test results. Bachelet and Yon (2007) also showed that good results can be obtained with a very simple enhancement function.

Recall that we defined the results of phase II as follows:

                              
                                 Fδ
                                 :
                              
                                 the set of flights for which the required maintenance work will be increased in the MILP model of enhancement iteration δ.

the extra required maintenance work that will be added to flight f in the MILP model of enhancement iteration δ.

the set of all time periods p during which the extra required maintenance work can be scheduled for flight f during enhancement iteration δ.

During the first enhancement iteration (i.e., the first loop through the three phases in Fig. 4), phase II is executed for the first time. Therefore, there were no previous enhancements to the MILP model and the enhancement function h maps the simulation results of phase I as follows:

                              
                                 (12)
                                 
                                    
                                       
                                          
                                             
                                                h
                                                :
                                                
                                                   Φ
                                                   ′
                                                
                                                ↦
                                                
                                                   F
                                                   δ
                                                
                                                
                                                
                                                by
                                                
                                                
                                                   F
                                                   δ
                                                
                                                =
                                                
                                                   Φ
                                                   ′
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (13)
                                 
                                    
                                       
                                          
                                             
                                                h
                                                :
                                                
                                                   λ
                                                   f
                                                
                                                ↦
                                                
                                                   L
                                                   f
                                                   δ
                                                
                                                
                                                
                                                by
                                                
                                                
                                                   L
                                                   f
                                                   δ
                                                
                                                =
                                                
                                                   λ
                                                   f
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (14)
                                 
                                    
                                       
                                          
                                             
                                                h
                                                :
                                                
                                                   Π
                                                   f
                                                
                                                ↦
                                                
                                                   P
                                                   f
                                                   δ
                                                
                                                
                                                
                                                by
                                                
                                                
                                                   P
                                                   f
                                                   δ
                                                
                                                =
                                                
                                                   Π
                                                   f
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

Expressions (12)–(14) show that during the first enhancement iteration, the enhancement function h maps the simulation information Φ′, λf
                            and Πf
                            directly to Fδ
                           , 
                              
                                 L
                                 f
                                 δ
                              
                            and 
                              
                                 P
                                 f
                                 δ
                              
                            respectively. Sets Fδ
                           , 
                              
                                 L
                                 f
                                 δ
                              
                            and 
                              
                                 P
                                 f
                                 δ
                              
                            will be used to build the extra constraints that will be added to the MILP model in phase III.


                           Definition of h for δ = 2 to Δ:
                        

During each enhancement iteration, the information resulting from the current iteration is saved such that it can be used in the next iteration.

We define:

                              
                                 F
                                 
                                    δ − 1:
                              
                                 the set of flights for which the required maintenance work was increased during the previous enhancement iteration.

the extra required maintenance work that was added to flight f during the previous enhancement iteration.

the set of all time periods p during which the extra required maintenance work could be scheduled for flight f during the previous enhancement iteration.

first element in 
                                       
                                          P
                                          f
                                          
                                             δ
                                             −
                                             1
                                          
                                       
                                    
                                 

=previous average arrival time of flight f
                                 

first element in Πf
                                    
                                 

= current average arrival time of flight f
                                 


                                    
                                       
                                          =
                                          [
                                          
                                             
                                                
                                                   α
                                                   f
                                                
                                                +
                                                
                                                   β
                                                   f
                                                
                                             
                                             2
                                          
                                          ,
                                          …
                                          ,
                                          
                                             STD
                                             f
                                          
                                          ]
                                       
                                    
                                 

Expression (16) shows how function 
                           h maps λf
                            and 
                              
                                 L
                                 f
                                 
                                    δ
                                    −
                                    1
                                 
                              
                            to 
                              
                                 L
                                 f
                                 δ
                              
                           . We distinguish three cases. In the first case (i.e., f ∈ (Φ′∩F
                           
                              δ − 1)), a promising delayed flight f (in Φ′) already exists in 
                              
                                 P
                                 f
                                 
                                    δ
                                    −
                                    1
                                 
                              
                           . This means that the extra capacity assigned to this flight during previous enhancement iterations was apparently not sufficient to maintain this flight in time. Therefore, the extra required maintenance work (λf
                           ) for that flight is added to 
                              
                                 L
                                 f
                                 
                                    δ
                                    −
                                    1
                                 
                              
                           . In case two (i.e., f ∈ (F
                           
                              δ − 1\Φ′)), flight f is in the set F
                           
                              δ − 1 but not in the set Φ′. In this case, the extra capacity assigned to this flight during previous enhancement iterations was sufficient to maintain this flight in time and we do not need to change the required maintenance for this flight. Therefore, function h sets 
                              
                                 L
                                 f
                                 δ
                              
                            equal to 
                              
                                 L
                                 f
                                 
                                    δ
                                    −
                                    1
                                 
                              
                           . In the third case (i.e., f ∈ (Φ′\F
                           
                              δ − 1)), flight f is in the set Φ′ but not in the set F
                           
                              δ − 1. In this case, it is the first time that this flight enters the set of promising delayed flights. Because there is no extra capacity previously assigned to this flight, 
                              
                                 L
                                 f
                                 δ
                              
                            is set equal to λf
                           .

To define the set 
                              
                                 
                                    P
                                    f
                                    δ
                                 
                                 ,
                              
                            expression (17) is used. Again, the same three cases as in expression (16) are distinguished. When flight f (in Φ′) already exists in 
                              
                                 
                                    P
                                    f
                                    
                                       δ
                                       −
                                       1
                                    
                                 
                                 ,
                              
                            the arrival time of flight f in both sets is averaged. Expression 
                              
                                 P
                                 f
                                 
                                    δ
                                    Avg
                                 
                              
                            is then defined as the set of all time periods between the average simulated arrival time and the scheduled time of departure (cf. supra). The reasoning behind case two and three of expression (17) is similar to the one behind case two and three of expression (16).


                           Fig. 4 shows that the ME procedure starts by finding a shift configuration that is optimal for the deterministic MILP0 model. After collecting the simulation results in phase I, the enhancement procedure is applied in phase II as shown in Fig. 5. When the service level constraint is satisfied during the first enhancement iteration (i.e., δ = 1), the whole enhancement procedure stops and the solution to the problem equals the solution to the deterministic MILP0 model. When the service level constraint is not satisfied during the first enhancement iteration, the enhancement functions (12)–(14) are applied and the procedure continues. When the service level constraint is not satisfied during the next enhancement iterations (i.e., δ > 1), the enhancement functions (15)–(17) are applied. When the service level constraint is satisfied during the next enhancement iterations, a local optimum is reached. To escape this local optimum, a diversification strategy is applied. To diversify the search, a different enhancement function is applied as long as the service level constraint remains satisfied:

                              
                                 (18)
                                 
                                    
                                       
                                          
                                          
                                          
                                             
                                                h
                                                :
                                                
                                                   F
                                                   
                                                      δ
                                                      −
                                                      1
                                                   
                                                
                                                ↦
                                                
                                                   F
                                                   δ
                                                
                                                
                                                
                                                by
                                                
                                                
                                                
                                                   F
                                                   δ
                                                
                                                =
                                                
                                                   F
                                                   
                                                      δ
                                                      −
                                                      1
                                                   
                                                
                                                
                                                   ∖
                                                
                                                
                                                   F
                                                   
                                                      δ
                                                      −
                                                      1
                                                      ,
                                                      
                                                         L
                                                         f
                                                         
                                                            δ
                                                            −
                                                            1
                                                         
                                                      
                                                      ≤
                                                      Ψ
                                                      ·
                                                      
                                                         L
                                                         f
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (19)
                                 
                                    
                                       
                                          
                                          
                                          
                                             
                                                h
                                                :
                                                
                                                   L
                                                   f
                                                   
                                                      δ
                                                      −
                                                      1
                                                   
                                                
                                                ↦
                                                
                                                   L
                                                   f
                                                   δ
                                                
                                                
                                                
                                                by
                                                
                                                
                                                
                                                   L
                                                   f
                                                   δ
                                                
                                                =
                                                
                                                   (
                                                   1
                                                   −
                                                   Ξ
                                                   )
                                                
                                                ·
                                                
                                                   L
                                                   f
                                                   
                                                      δ
                                                      −
                                                      1
                                                   
                                                
                                                
                                                ∀
                                                f
                                                ∈
                                                
                                                   F
                                                   δ
                                                
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (20)
                                 
                                    
                                       
                                          
                                          
                                          
                                             
                                                h
                                                :
                                                
                                                   P
                                                   f
                                                   
                                                      δ
                                                      −
                                                      1
                                                   
                                                
                                                ↦
                                                
                                                   P
                                                   f
                                                   δ
                                                
                                                
                                                
                                                by
                                                
                                                
                                                
                                                   P
                                                   f
                                                   δ
                                                
                                                =
                                                
                                                   P
                                                   f
                                                   
                                                      δ
                                                      −
                                                      1
                                                   
                                                
                                                
                                                ∀
                                                f
                                                ∈
                                                
                                                   F
                                                   δ
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           with:

                              
                                 
                                    
                                       F
                                       
                                          δ
                                          −
                                          1
                                          ,
                                          
                                             L
                                             f
                                             
                                                δ
                                                −
                                                1
                                             
                                          
                                          ≤
                                          Ψ
                                          ·
                                          
                                             L
                                             f
                                          
                                       
                                    
                                 :
                              
                                 the set of the flights in F
                                    
                                       δ − 1 that did not need more than Ψ percent extra required maintenance work (
                                       
                                          L
                                          f
                                          
                                             δ
                                             −
                                             1
                                          
                                       
                                    ) compared to their scheduled workload (Lf
                                    )

percentage reduction in the extra required maintenance work

@&#RESULTS AND DISCUSSION@&#

To test the performance of the algorithm, we applied the model enhancement procedure to a real-life problem at Sabena Technics, a large aircraft maintenance company located at Brussels Airport in Belgium. The main goal is to build the cheapest workforce configuration while satisfying the service level constraint.

At Sabena Technics, the maintenance personnel works in teams of a certain team size. Each team can only work one shift per day or have a day off. There are four possible shift types with overlapping working hours: morning (M), day (D), evening (E) and night (N) shifts. This results in a certain sequence of shift types and days off assigned to a certain team for a certain week. Furthermore, Sabena Technics organizes its workforce into two cycles as shown in Fig. 6. Each cycle has its own team size and its own start and end times of each shift type. Because one cycle can contain multiple weeks (represented by the rows in each table), a team is not always assigned to the same shift sequence as the week before. Instead, a cyclic pattern is used in which the number of teams assigned to a cycle equals the number of weeks (i.e., the number of rows) in the cycle. In Fig. 6 there are, for example, four teams in the second cycle. In the first week, the first team works the shifts in the first row. But in the second week, the first team will work the shifts in the second row of the cycle, the second team the shifts of the third row and so on.

Hence, constructing a workforce configuration implies that we have to decide on the number of weeks (= the number of teams = the number of rows) in each cycle, the assignment of shift types and days off to each day in each week, the start and end times of every shift type in each cycle and the team size in each cycle.

To solve the problem at Sabena Technics, we use a MILP model based on the model of Beliën et al. (2013). Interested readers are referred to latter work for a more profound elaboration of this MILP model and the solution technique. This MILP model has the exact same structure as the model described in Section 4.2, but we now give a specific description of the general cost function, capacity function and other workforce scheduling constraints.

Decisions about the optimal team size are not made within the model, because this would render the model non-linear. Instead, a heuristic enumeration algorithm is employed to find the best team size for each cycle (see Beliën et al., 2013). In this enumeration heuristic, the MILP model is solved for a limited amount of time for each interesting team size combination and the best result is saved.

As was mentioned in Section 5.1, we also need to decide on the assignment of shift types and days off to each day in each week. However, incorporating the week decision in the MILP model implies too many decision variables to solve the problem efficiently. Therefore, we omit the assignment of shifts to different weeks and our scheduling decision variable only captures the number of shifts of a certain type scheduled on each day of the week. After solving the MILP model, the individual weeks can be reconstructed by hand by distributing the shifts over the different weeks for each day. The shift succession guaranteeing constraints in the MILP model make sure that a feasible workforce schedule can be constructed at the end.

The MILP model can be found in Appendix A. The objective function (A.1) of the optimization model describes the total labor costs faced by the company. The available capacity 
                              
                                 q
                                 p
                                 δ
                              
                            in constraint (A.2) is determined by the scheduled shifts in the left hand side of the constraint. This constraint corresponds to constraint (2) of the model described in Section 4.2. The MILP model in Appendix A also includes constraints (3), (4), (6) and (7) from the general model in Section 4.2. The other constraints in the MILP model described in Appendix A are other specific workforce scheduling constraints and correspond to constraint (5).

Constraints (A.3) and (A.4) are the weekend constraints. They ensure that at most a certain fraction R of the weeks in a worker’s schedule contain a working weekend. To comply with the constraint on the average working hours imposed by the labor union, constraints (A.5) and (A.6) are inserted. They restrict the average number of working hours per week per worker between 36 and 38 hours. Constraints (A.7) and (A.8) ensure that the start and end times for a certain shift type are the same in each cycle. Constraint (A.9) is inserted because Sabena Technics wants at least one team to be present at all times as a basic capacity buffer. The shift succession constraints entail that a night shift can only be followed by another night shift (or no shift) and an evening shift can only be followed by another evening shift or a night shift (or no shift). There is no limitation to shifts succeeding a morning or a day shift. Recall that we omit the assignment of shifts to different weeks because of efficiency issues. Therefore, shift succession constraints are not incorporated directly, but through so-called shift succession guaranteeing constraints (A.10)–(A.16). These constraints make sure that the succession constraints can be satisfied during the manual assignment of shifts to weeks. For more information on this, we refer the reader to Beliën et al. (2013). Finally, constraints (A.17)–(A.21) define the range of the decision variables.

The goal of the simulation model is to simulate the performance of the workforce configuration provided by the MILP model in a stochastic environment and to obtain the information described in Section 4.3. To simulate a real (stochastic) environment, stochastic delays are allocated to arriving aircraft. By analyzing real-life data from Sabena Technics, we discovered that the delays in arrival times could be represented by four different probability distributions, which are then applied according to their respective probabilities. Table 2 shows how we simulated the stochastic delays in aircraft arrival times during the simulation experiment in phase I.

Based on the simulated aircraft arrival times and the available capacity 
                              
                                 q
                                 p
                                 
                                    δ
                                    −
                                    1
                                 
                              
                            resulting from solving the MILP model during the previous enhancement iteration, the simulation model allocates for each time period a certain number of maintenance workers to aircraft that can be maintained during that time period. This is done according to a specific allocation rule. Different allocation rules will have a different impact on the performance of the workforce configuration (Van den Bergh, De Bruecker, Beliën, De Boeck, et al., 2013). We choose to apply the first-leave-first-serve assignment rule in our ME procedure because of two reasons. First, this rule avoids random preemption and results in a more realistic capacity assignment. Second, assuming that all flights arrive on schedule, this assignment rule will make sure that all flights can be maintained in time with the capacity determined by the MILP model (i.e., 
                              
                                 q
                                 p
                                 
                                    δ
                                    −
                                    1
                                 
                              
                           ). Therefore, the simulation evaluation of the workforce configuration with this assignment rule will also lead to a relatively small average number of flights with late maintenance compared to other rules. Algorithm 1 in Appendix B shows how the simulation model allocates maintenance workers to aircraft according to this first-leave-first-serve allocation rule.

The ME algorithm has been applied for several settings to a test set containing 20 instances created randomly based on real-life data dimensions from Sabena Technics. The entire set can be divided into 4 groups of 5 instances. Each group has its own specific characteristics. The results are shown in Table 3
                           . All 20 instances (called 1_*_*_*) contain 100 flights but are created using different workload distributions. The workload is the amount of work that each flight requires. Half of the groups has flights with workloads drawn from a uniform distribution between 0 and 10 hours (1_1_*_*), while the other half has flights with workloads drawn from an exponential distribution with an average of 3.5 hours (1_2_*_*). The last difference between the 4 groups is the way how the flight arrivals are chosen. Half of the groups has flights with peak arrivals (1_*_1_*), while the other half has flights with uniform arrivals (1_*_2_*). In the case of peak arrivals, more flights require maintenance either in the morning or the afternoon, while the demand for maintenance is uniformly distributed over the entire day in the case of uniform arrivals. Finally, 5 random instances are generated (1_*_*_1, 1_*_*_2, 1_*_*_3, 1_*_*_4 and 1_*_*_5) for each of the above cases resulting in 2  ×  2  ×   5 = 20 instances.

Based on the flight information in each test set, a workforce configuration needs to be constructed resulting in a weekly shifts schedule. The resolution of our scheduling decision is 15 minutes. Hence, |P| is set to (7  ×  24  ×  4 =) 672. This means that decisions have to be made every 15 minutes and the planning horizon (equal to one week) is divided in 672 quarters of an hour.

We now discuss Table 3 which shows the results of the computational experiments.

Columns 2–5 of Table 3 present the results of the MILP0 model (= the deterministic MILP model as described in Appendix A) where no delays are taken into account or anticipated. Solving this MILP0 model is also the first step in the enhancement algorithm. Columns 2 and 4 show the resulting total labor costs from the MILP0 model that was solved with a time limit of 1 minute (1′) and 15 minutes (15′) respectively. All MILP models were solved using the IBM CPLEX optimizer. The third and fifth columns show the average number of delayed flights (= φ) that results from simulating the respective workforce configuration found by the MILP0 model. These two columns show how well the results from the deterministic model perform in a stochastic environment.

Columns 6–11 present the results of the Straightforward Optimization (SFO) technique. SFO can be seen as a mathematical optimization technique that uses approximations or even relaxations instead of stochastic variables. SFO uses the average delay time of a flight to approximate stochastic delays. SFO is a very simple technique to anticipate stochastic delays and is therefore used as an alternative method to ME in our performance analysis. In fact, the same MILP0 (15′) model is used to obtain the results in columns 6, 8 and 10. Hence, solving the SFO ( + Y) model is the same as solving the MILP model in Appendix A for 15 minutes of CPLEX computation time while adding a delay of Y quarters to the STA of each flight. Columns 6, 8 and 10 show the results of adding a delay of 1, 2 and 3 quarters in order to anticipate average, large and very large stochastic delays respectively. From Table 2 we calculated that the average delay time is 12 minutes. But since we are working with time periods of 15 minutes, the average delay time is rounded to 15 minutes, i.e., one quarter. Also note that we solve the SFO model with CPLEX for 15 minutes because the ME algorithm will also be given 15 minutes of computation time. Columns 7, 9 and 11 of Table 3 show the average number of delayed flights (= φ) that results from simulating the respective workforce configuration found by the SFO ( + Y) model. “F” indicates that the respective model failed to find a single feasible solution in the allowed time span. Hence, three quarters appear to be the maximum delay to which the SFO MILP model is able to find a feasible solution in most cases.

The last six columns of Table 3 show the results of the ME algorithm for three different service level constraints. In the first case (see columns 12 and 13), the service level constraint allows for at most five flights on average to leave with a delay. The next two cases allow for at most three flights and one flight respectively. For each of the test sets, only 15 ME iterations were performed (Δ = 15) as this seems to be a good trade-off between computation time and solution quality in our case based on preliminary tests. During each optimization phase, the optimization of the MILP model in the ME procedure is limited to 1 minute, which, according to preliminary test, results in acceptable optimality gaps. During the simulation phase, the results of each MILP model are used to set the capacity at each period p ∈ P in the simulation model. In our case, we perform a simulation with a length of 500 weeks, which takes just about a second to run. Simulation tests indicated that a simulation length of 500 weeks already results in robust estimates for φ. Recall from Section 4.3 that φ is the average of |Φω
                           | over all simulated weeks ω. Statistical analysis of the results indicated that |Φω
                           | follows a Poisson distribution with average φ. Hence, the variance of |Φω
                           | equals φ. Based on the simulation results, the MILP model is enhanced during the enhancement phase. When the service level constraint is satisfied at the beginning of phase II, the diversification procedure is applied. During the diversification, we set Ξ to 0.4 (= 40 percent) and Ψ to 0.25 (= 25 percent) to diversify the search. The whole ME procedure is programmed in C++ using the IBM ILOG CPLEX API for the optimization phase.

Because each MILP optimization is limited to 1 minute and the simulation time is negligible, it takes about 15 minutes to apply the ME procedure (of 15 iterations) on each test set. In Table 3, “–” is used to indicate that the respective test set is not solved with ME because the simulation evaluation of the MILP0 (1′) solution already satisfies the service level constraint that is specified on top of the column. Note that the simulation evaluation of the MILP0 (1′) result is used for this purpose instead of the MILP0 (15′) result. This is because solving MILP models in the ME algorithm is also limited to only 1 minute. Hence, when the simulation evaluation of the MILP0 (1′) model already satisfies the stochastic constraint, there is no need to enhance the model, and the ME algorithm will not be executed.

The first performance measure that we consider is the ability of the ME algorithm to satisfy a predefined service level constraint. To test this, three scenarios with a different service level constraint are investigated. As can be seen in columns 13, 15 and 17 of Table 3, ME ensures the satisfaction of the service level constraint for each test instance for each scenario, even if the allowed average number of flights with late maintenance is reduced from 5 to 3 and even to 1. While ME ensures the satisfaction of the service level constraint for each test instance, the simulation evaluation of the SFO solutions cannot be accurately predicted in advance. Theoretically, φ should be zero for “SFO (+1)” because an average delay of one quarter is expected for each flight (see Section 5.2.3) which is also accounted for in the SFO (+1) MILP model. However, the results in column 7 of Table 3, prove otherwise. As opposed to ME, SFO is clearly unable to provide extra capacity at the right moments.

Until now, we showed that our ME approach can provide a robust solution to our problem (i.e., a solution that satisfies the service level constraint). In this section we investigate the cost of robustness as we expect the labor costs to rise when the service level is increased. A higher service level requires a higher capacity buffer which entails higher costs. Since our focus remains on minimizing the labor costs, this is our second performance measure.

Since solving each MILP model in the ME approach is limited to 1 minute, the result of the MILP0 (1′) model is the result of the initial ME iteration (i.e., for δ = 0). Two situations can occur. Either, the MILP0 (1′) model does not satisfy the service level constraint and the enhancement procedure starts, or, the MILP0 (1′) model does satisfy the service level constraint. When the latter is the case, and MILP0 is solved to optimality after 1 minute, stopping the procedure as proposed in Section 4.4.3 would be optimal. However, the MILP represents an extremely complex problem that cannot be solved to optimality in a reasonable time limit. Therefore, MILP0 (1′) and even MILP0 (15′) will never result in an optimal solution to the problem. Improving a stochastic feasible solution is left out of the focus of this paper and is a possible direction for future research. Hence, the cases indicated by “–” in Table 3 are left out of our performance analysis and we only consider the cases where MILP0 (1′) does not satisfy the service level constraint.

The ME approach sometimes results in lower costs compared to the MILP0 (1′), even when the average number of delayed flights is reduced to satisfy the service level. This can be observed by comparing the costs of ME (φ ≤ 5) with MILP0 (1′) in columns 2 and 12 and the costs of ME (φ ≤ 3) with MILP0 (1′) in columns 2 and 14. The first reason for this counter-intuitive observation is that adding the extra constraints during the ME approach facilitates the optimization procedure resulting in lower costs within the same time limit. Second, the ME algorithm features a diversification strategy, which is in fact a local search method. However, most of the instances follow our intuition and show that the labor costs rise with increasing service level.

We now compare the ME results to the SFO results with respect to the increase in labor costs. SFO can be used as a benchmark because it is the most simple approach, and it should therefore be outperformed by the ME approach for the addition of the extra complexity not to be in vain. We solved three SFO models based on delays ranging from one quarter to three quarters. Since different delays result in different values for φ, the SFO results can be used as a benchmark for different ME settings. Hence, when the result of an SFO model satisfies the service level constraint (i.e., “φ ≤ 5”, “φ ≤ 3” or “φ ≤ 1” resp.), the respective ME algorithm should result in lower labor costs. Table 3 indeed reveals that for all instances where the simulation evaluation of the SFO approach satisfies the “φ ≤ 5”, the “φ ≤ 3” or the “φ ≤ 1” constraint, the respective ME approach always outperforms the respective SFO approach in terms of labor costs.

While solving the problem, our focus remains on minimizing the total labor costs. Therefore, the ME algorithm will not terminate once a solution is found that satisfies the service level constraint. Instead, a diversification procedure is used to escape from local optima as elaborated in Section 4.4.3. Table 4
                            analyzes the performance of the diversification technique. For each of the three ME scenarios (“ME (φ ≤ 5)”, “ME (φ ≤ 3)” and “ME (φ ≤ 1)” resp.), the minimum, maximum and average percentage improvement resulting from diversification is reported. This is the percentage difference between the costs of the best ME solution (as reported in Table 3) and the costs of the first feasible solution found during the ME procedure that satisfies the service level constraint.

In the first scenario (ME (φ ≤ 5)), we allow on average for at most five flights with late maintenance instead of three or one. Therefore, it is relatively easy to satisfy the service level constraint in this first scenario. Minor changes are required to the available capacity resulting from the MILP0 (1′) model which means that the first solution that satisfies the service level constraint will already be very good in terms of labor costs. This renders the diversification strategy rather useless in this scenario, which results in a relatively small average percentage improvement of 1.57 percent (see Table 4).

In the second scenario (ME (φ ≤ 3)), it becomes more difficult to satisfy the service level constraint without a drastic increase in labor costs compared to the MILP0 (1′) model. Nevertheless, the ME algorithm still finds the first solution that satisfies the service level constraint quite fast in this scenario. However, the resulting labor costs increase significantly. Hence, the diversification strategy has more potential in this case and we expect the average percentage improvement to increase. Table 4 shows that the average percentage improvement has indeed increased from 1.57 percent to 8.22 percent. In the best case, the diversification strategy even lowers the costs of the first feasible solution by 23.47 percent.

Satisfying the service level constraint becomes even more difficult in the third scenario (ME (φ ≤ 1)). As expected, the labor costs of the first solution that satisfies the service level constraint increase drastically in this case. Hence, the diversification strategy has even more potential in this case and we again expect the average percentage improvement to increase. However, the results in Table 4 prove otherwise. Because of the very strict service level constraint (φ ≤ 1), the ME procedure spends much more time on finding a first feasible solution. Therefore, less time remains for the diversification strategy to improve the initial feasible solution. This results in a very low average percentage improvement of only 0.99 percent. But in the best case, the diversification strategy lowers the costs of the first feasible solution by 6.91 percent.


                           Fig. 7
                            demonstrates the ME procedure applied on one specific problem instance. During the first three ME iterations in Fig. 7, Eqs. (15)–(17) are used to find the first feasible result (18,718.9). Then, Eqs. (18)–(20) are applied to find a better result that still satisfies the stochastic service level constraint. Fig. 7 shows that the ME approach is capable of finding three times a better feasible result with respect to the labor costs (15,732.2, 14,960.0 and 14,325.3 resp.) during the next iterations. Note that for each of the feasible solutions the service level constraint (φ ≤ 3) is indeed satisfied because φ ≤ 3.

In this paper, we present a heuristic approach for building robust aircraft maintenance personnel rosters. A model enhancement (ME) heuristic is constructed to optimize a mixed integer linear programing (MILP) model with a stochastic service level constraint. This constraint implies that only a certain average percentage of all weekly flights cannot be maintained in time when aircraft arrive with stochastic delays. The three phases of the ME algorithm are presented: a simulation model, an enhancement procedure and the mixed integer linear programming model.

We successfully applied our model to a real life problem setting at Sabena Technics, a large aircraft maintenance company located at Brussels Airport in Belgium. We illustrate the performance of the ME algorithm with a computational experiment and compare the results to deterministic optimization and straightforward optimization (SFO). We report the results in terms of labor costs and the average number of flights with late maintenance according to the simulation experiment. We tested the ME algorithm on 20 instances based on real data and allowed the ME algorithm to run for 15 iterations on each instance.

Experiments first demonstrate that the ME approach always succeeds in finding a feasible solution that satisfies a predefined stochastic service level constraint. Second, the cost of robustness appears to be lower for the ME approach than for the SFO approach. The cost of robustness is the increase in labor costs required to construct a capacity buffer in order to satisfy the service level constraint. Third, experiments also prove the power of the diversification strategy in the ME algorithm to guide the search to find better solutions once the stochastic service level constraint has been satisfied.

Finally, we propose some interesting extensions to this paper for future research. First, the stochastic model could be extended by uncertainty in capacity (i.e., absenteeism) and uncertainty in the workload. Second, different allocation rules can be investigated to improve the model. Certain flights can be made more important than other flights for example. And finally, the diversification strategy can be improved. For example, a tabu mechanism (such as in Tabu Search) or some other metaheuristic mechanism could be implemented to guide the search to find better feasible solutions.

Sets with their associated indices:

                        
                           i, i′ ∈ I:
                        
                           feasible shifts

shift types {M, D, E, N}

feasible shifts of shift type t (Different start and end times are possible for each shift type.)

cycles in the schedule

days in the week

time periods in one week

flights to be serviced

time periods during which flight f can be serviced. That is 
                                 
                                    
                                       P
                                       f
                                    
                                    =
                                    
                                       {
                                       p
                                       |
                                       
                                          STA
                                          f
                                       
                                       ≤
                                       p
                                       ≤
                                       
                                          STD
                                          f
                                       
                                       }
                                    
                                 
                               with STA
                                 f
                               (STD
                                 f
                              ) the scheduled time of arrival (departure) of flight f
                           

the total cost (for one worker) of shift i on day d
                           

the duration of shift i (in hours)

= 1 if period p is included in shift i on day d; = 0 otherwise

the fraction of workers available to work in shift period p when assigned shift i on day d ( < 1 during lunch hour)

the workload (in man-hours) of flight f
                           

the minimum number of weeks (= teams) in a cycle

the maximum number of weeks (= teams) in a cycle

the minimum average number of working hours per week

the maximum average number of working hours per week

the maximum fraction of working weekends; i.e., weekends during which at least one shift is scheduled. R = (number of working weekends)/(number of weeks in the cycle)

the team size in cycle c
                           

the number of time periods in a week

the available capacity on period p when solving the MILP model in enhancement iteration δ
                           

the number of weeks (= teams) in cycle c
                           

the number of shifts i that is scheduled during day d in cycle c
                           

= 1, if shift i is used in cycle c and 0 otherwise

the number of workers assigned to maintain flight f during time period p when solving the MILP model in enhancement iteration δ
                           

the number of extra weeks needed in cycle c for day d caused by shifts of type t (with t ∈ {E, N}) on the preceding day (in order to satisfy the shift succession guaranteeing constraints)

the number of extra weeks needed in cycle c for day d caused by E shifts that can be compensated by an excess in N shifts on the preceding day (in order to satisfy the shift succession guaranteeing constraints)


                      
                  

@&#REFERENCES@&#

