@&#MAIN-TITLE@&#A novel Morse code-inspired method for multiclass motor imagery brain–computer interface (BCI) design

@&#HIGHLIGHTS@&#


               
                  
                  
                     
                        
                           
                           A reliable multiclass BCI is constructed with limited motor imagery tasks using the Morse code-inspired approach.


                        
                        
                           
                           The proposed BCI system is used to control a real three joints robot arm to grasp a target object.


                        
                        
                           
                           The controllability of our BCI system is improved with the feedback mechanism embedded in the robot arm.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Electroencephalogram (EEG)

Brain–computer interface (BCI)

Morse code

Sequential motor imagery

Multi-DOF robot arm control

@&#ABSTRACT@&#


               
               
                  Motor imagery (MI)-based brain–computer interfaces (BCIs) allow disabled individuals to control external devices voluntarily, helping us to restore lost motor functions. However, the number of control commands available in MI-based BCIs remains limited, limiting the usability of BCI systems in control applications involving multiple degrees of freedom (DOF), such as control of a robot arm. To address this problem, we developed a novel Morse code-inspired method for MI-based BCI design to increase the number of output commands. Using this method, brain activities are modulated by sequences of MI (sMI) tasks, which are constructed by alternately imagining movements of the left or right hand or no motion. The codes of the sMI task was detected from EEG signals and mapped to special commands. According to permutation theory, an sMI task with N-length allows 
                        2
                        ×
                        (
                        
                           
                              2
                           
                           
                              N
                           
                        
                        −
                        1
                        )
                      possible commands with the left and right MI tasks under self-paced conditions. To verify its feasibility, the new method was used to construct a six-class BCI system to control the arm of a humanoid robot. Four subjects participated in our experiment and the averaged accuracy of the six-class sMI tasks was 89.4%. The Cohen's kappa coefficient and the throughput of our BCI paradigm are 
                        0.88
                        ±
                        0.060
                      and 23.5bits per minute (bpm), respectively. Furthermore, all of the subjects could operate an actual three-joint robot arm to grasp an object in around 49.1s using our approach. These promising results suggest that the Morse code-inspired method could be used in the design of BCIs for multi-DOF control.
               
            

@&#INTRODUCTION@&#

Brain–computer interface (BCI) technology provides a novel communication pathway between the human brain and a computer without the use of peripheral nerves and muscles [1]. A BCI can serve as an effective assistive technology for disabled individuals, helping to maintain or restore a lost ability to communicate or motor function [2]. Sensorimotor rhythms (SMRs) in electroencephalogram (EEG) signals, also known as μ (8–14Hz) and β (18–25Hz) rhythms, have been widely investigated in the design of BCI systems [3–7]. The strength of these SMRs decreases when subjects voluntarily execute or imagine kinesthetic movements (event-related desynchronization, or ERD), and increases after the actual or imagined movements cease (event-related synchronization, or ERS) [8,9]. Because the SMRs are induced without any external stimulations, motor imagery (MI)-based BCI paradigm provides an active control interface for assistive devices. Furthermore, previous studies have demonstrated that repetition of MI tasks can induce plasticity changes in the brain. Therefore, using the MI-based BCI can assist stroke patients in recovering lost motor functions [10,11].

A variety of MI-based BCIs have been developed and applied to the control of external devices in recent years. By imagining movement of various body parts (e.g., the left and right hands, or feet, or the tongue), different ERD/ERS features with particular spatial distribution can be generated based on the somatotopical organization of the sensorimotor cortex. These ERD/ERS features can be extracted from EEG signals and mapped to various BCI commands.Using the MI-based BCI systems, subjects can move a computer cursor in two- or three-dimensional spaces [3,12], control a mobile robot [13,14], or operate a powered wheelchair [15,16]. One of the most significant limitations of MI-based BCIs is the number of degrees-of-freedom (DOF) that can be controlled [17]. To achieve effective communication and control with BCIs, additional independent EEG patterns must be used to provide more commands. Recently, many efforts have been made to develop advanced algorithms to decode multiclass of MI tasks for multi-DOF control [18,19]. However, most of these researches have been limited to offline analysis, and the accuracy is not sufficient for online use. Furthermore, if additional MI tasks are introduced, a substantial period of time may be required for the subjects to learn the skill for effective regulation of SMRs, which would limit the effectiveness of the BCIs [20]. Therefore, one of the critical challenges for the design of a practical MI-based BCI is to produce more commands using the limited number of MI tasks, which is also the objective of this study.

To extend BCIs to multi-DOF control, a multi-step selection process has been introduced for generating additional selectable commands. In this approach, subjects execute a specific mental task in each step to narrow the field of choices. The target command is finally determined when only one choice remains after a series of selections. A small set of mental tasks can produce a large set of possible commands using the multi-step selection approach. Several types of BCI have recently been developed based on the multi-step selection approach. Xu et al. presented a two-level BCI speller using the P300 event-related potential. In this BCI system, the subjects first selected a group containing the desired letter, and then selected the desired letter from the group [21]. Palaniappan et al. designed a BCI speller system using fuzzy ARTMAP method [22]. Different English letters can be spelled by a sequence of mental tasks. Williamson et al. developed a similar two-level BCI speller (Hex-O-Speller) based on ERD features [23]. Bai et al. constructed a system-paced 2-D cursor control BCI system by presenting a sequence of binary decisions using one class of MI tasks to determine the direction of cursor movement [20,24]. These studies demonstrated that the number of BCI commands can be increased using a multi-step selection approach. Compared to a single-step selection BCI, new factors, such as the choice of mental tasks in each selection, the number of total selections and feedback, will affect the performance of a multi-step selection BCI, and should be considered in the system design. However, to the best to our knowledge, a general method to design a feasible multi-step selection-based BCI has not been reported.

In this study, we develop a novel Morse code-inspired method to design a multi-step selection-based BCI. Morse code is an early form of digital communication used in telegraphy and other telecommunications [25]. Directly transmitting text through electrical signals is difficult. Morse code encodes each letter as a unique sequence of dots and dashes so that the letters can be easily transmitted through electrical currents, electromagnetic waves or other media. We employed a Morse code-like method to design a multiclass MI-based BCI, using a limited number of MI tasks. Subjects were asked to execute two MI tasks (imagining movements of left and right hands) rather than the “dots” and “dashes” as in actual Morse code. A number of commands could be produced by executing various sequences of MI tasks, similar to the principle of Morse code. Furthermore, we used the proposed Morse code-based method to construct a six-class BCI that was tested in experiments with an actual three-joint robot arm to verify the feasibility of the method.

The remainder of this paper is organized as follows: the Morse code-based method, the experiment procedures and the signal processing methods are described in Section 2, the experimental results are presented in Section 3, and a general discussion of the results and the conclusions of this study are provided in Section 4.

In this method, the basic units equivalent to the “dots” and “dashes” of conventional Morse code were generated by imagining movements of the left and right hands. The ERD/ERS features for these two MI tasks are represented in different hemispheres of the brain, and can be easily distinguished [8]. To modulate brain activity, subjects that were instructed to execute a sequence of MI tasks (an sMI task) consisted of left- and right-hand MI tasks. The sequences of ERD/ERS features generated in the performance of the sMI tasks were detected from the EEG signals. The code embedded in these sequences was mapped to various commands. According to permutation theory, 2
                           N
                         commands can be encoded by an sMI task of length N. In Morse code, the letters are separated by a time interval equal in length to three dots. Similarly, in self-paced BCI, the idle state, i.e., no motor intention, is detected from the EEG signals and used to separate the sMI tasks. If the BCI is constructed using N-length sMI tasks, then tasks with lengths less than N are also available. Therefore, the total number of commands C
                        
                           N
                         of available in a BCI with N-length sMI tasks is
                           
                              (1)
                              
                                 
                                    
                                       C
                                    
                                    
                                       N
                                    
                                 
                                 =
                                 
                                    
                                       ∑
                                    
                                    
                                       i
                                       =
                                       1
                                    
                                    
                                       N
                                    
                                 
                                 
                                    
                                       2
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 2
                                 ·
                                 (
                                 
                                    
                                       2
                                    
                                    
                                       N
                                    
                                 
                                 −
                                 1
                                 )
                              
                           
                        
                     

According to the above formula, the Morse code method increases the number of commands by 
                           (
                           
                              
                                 2
                              
                              
                                 N
                              
                           
                           −
                           2
                           )
                         fold. To design an MI-based BCI system with M classes , the length of the sMI tasks N
                        
                           M
                         is determined by the following equations:
                           
                              (2)
                              
                                 
                                    
                                       N
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 
                                    
                                       log
                                    
                                    
                                       2
                                    
                                 
                                 (
                                 M
                                 /
                                 2
                                 +
                                 1
                                 )
                              
                           
                        
                        
                           
                              (3)
                              
                                 
                                 
                                    
                                       N
                                    
                                    
                                       M
                                    
                                 
                                 =
                                 ceil
                                 (
                                 
                                    
                                       N
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              
                           
                        where the function 
                           ceil
                           (
                           
                           )
                         is defined as the smallest integer greater than 
                           
                              
                                 N
                              
                              
                                 ′
                              
                           
                        . In this study, the Morse code-based BCI was used to control a six-DOF robot arm to verify the feasibility of the design (see Section 2.2). The required number of commands was 6 (M=6), so 2-length sMI tasks were used to construct the BCI system, as indicated by Eqs. (2) and (3). Fig. 1
                         illustrates the procedure for constructing a 2-length sMI task from a sequence of left- and right-hand MI tasks. An sMI task was initiated with either a left MI task or a right MI task in epoch 1. If the subject returned to the idle state in epoch 2, a 1-length sMI task was generated (referred to as “SL” and “SR” tasks). If another MI task was executed in epoch 2, a 2-length sMI task was generated (referred to as “LL”, “LR”, “RR”, and “RL” tasks). Between the two epochs, there was a break epoch to allow subjects to shift to their next task.

In this study, an NAO humanoid robot manufactured by Aldebaran Robotics Corporation (Paris, France) was selected as the experimental platform [26]. During the experiment, the robot was placed on a flat bench in a suitable posture so that the left arm could move freely in the lateral plane. The BCI system was used to control the three joints (shoulder, elbow and hand) of the left arm of the NAO robot with six DOF of movements. Subjects were instructed to control the arm of the robot to grasp an object in front of the robot, as shown in Fig. 2
                        . The control strategy for the robot arm is described in Section 2.3. The object was located in front of the robot at the extreme reach of the arm of the robot. The commands from the BCI system were sent to the arm via a wireless TCP/IP protocol. The shoulder and elbow joints had a rotational speed of 0.1rad/s.

Four healthy, right-handed subjects (including 1 female and 3 males, ranging 23–29years, with a mean age of 25.8) participated in this study. Two subjects had prior experience with MI-based BCIs, and the other two had no prior experience [4]. In the experiments, the subjects were seated in a comfortable armchair facing the NAO robot. All four subjects were provided with detailed information on the experimental procedures and signed an informed consent form in accordance with the Declaration of Helsinki. The EEG signals from the C3 and C4 channels, and the surrounding channels (F3, F4, FC5, FC1, FC2, FC6, T7, Cz, T8, CP5, CP1, CP2, CP6, P3, P4) required for the Laplacian filter were recorded (referenced to P8 and grounded to FPz), in accordance with the international 10–20 system. The impedances of all the electrodes were maintained below 
                           10
                           
                           k
                           Ω
                        . Data were acquired with a BrainAmp DC Amplifier (BrainProducts GmbH, Germany) at a sampling rate of 250Hz. The data collection and the experimental procedures were supported by the general-purpose BCI software platform BCI2000 [27].

To complete the reach-to-grasp task, the six sMI tasks were mapped to the control commands of the three joints of the robot arm, as shown in Table 1
                        . The “SL” task was used as a command to stop the robotic arm immediately, and the other five tasks were mapped to motion commands for the joints. When a motion command was given, the robot arm continued to move, and the subject could return to the idle state until a new command was desired.The “SR” task was used to provide hand commands, i.e., grasp and release.

To assist the subjects in executing the correct sMI tasks, a feedback mechanism was embedded in the robot arm. Previous BCIs [20,28,29] have provided feedback information via computer screen. However, during actual control of the robot arm, receiving feedback from a screen while simultaneously observing the robot arm may increase the workload of the subject. To improve operability, an embedded feedback mechanism was designed to allow the subject to receive feedback information directly from the motion state of the robot arm. The feedback information was obtained from the online classification of the EEG signals. If a left or right MI task was detected in epoch 1, the robot arm stopped moving to prompt the subject to execute the next task. If the arm was already stopped, a left or right MI task performed in epoch 1 caused the shoulder or elbow, respectively, to rotate by a small angle.

In this study, the ongoing EEG signals were first classified to three mental states (left MI, right MI, and idle) at intervals of 100ms. Raw EEG segments with a length of 2000ms were pre-processed by (1) spatial filtering on the C3 and C4 channels using a large Laplacian filter; and (2) bandpass filtering (1–50Hz). Power spectral densities (PSDs) of the two filtered EEG channels were calculated using the Yule–Walker autoregressive (AR) method with the fixed order of 16 [12]. The PSDs were divided into 1-Hz-wide frequency bands between 8 and 30Hz to form the feature vectors for the μ and β rhythms. The feature vectors were then classified into left MI, right MI, or idle using the minimum distance analysis (MDA) method with the Mahalanobis distance [30]. For an unknown feature x, the Mahalanobis distance d
                        
                           c
                        (x) to class c was calculated as
                           
                              (4)
                              
                                 
                                    
                                       d
                                    
                                    
                                       c
                                    
                                 
                                 (
                                 x
                                 )
                                 =
                                 
                                    
                                       (
                                       x
                                       −
                                       
                                          
                                             μ
                                          
                                          
                                             c
                                          
                                       
                                       )
                                    
                                    
                                       T
                                    
                                 
                                 ·
                                 
                                    
                                       ∑
                                    
                                    
                                       c
                                    
                                    
                                       −
                                       1
                                    
                                 
                                 ·
                                 (
                                 x
                                 −
                                 
                                    
                                       
                                          μ
                                       
                                       
                                          c
                                       
                                    
                                 
                                 )
                              
                           
                        where c is the class label of the mental state, and μ
                        
                           c
                         and 
                           
                              
                                 ∑
                              
                              
                                 c
                              
                           
                         are the mean and the covariance of class c, respectively, which was assumed to have a Gaussian distribution 
                           N
                           (
                           
                              
                                 μ
                              
                              
                                 c
                              
                           
                           ,
                           
                              
                                 
                                    ∑
                                 
                                 
                                    c
                                 
                              
                           
                           )
                        . According to this formulate, the feature x is assigned to the class with the smallest d
                        
                           c
                        (x). The values of μ
                        
                           c
                         and 
                           
                              
                                 ∑
                              
                              
                                 c
                              
                           
                         were estimated from the training samples for class c.

To improve the classification performance in each epoch, the results from the MDA were optimized by using the “dwell time” approach [31]. The dwell time is the period in which the user continuously imagines the movement of the left or right hand. If the dwell time is reached, the result is considered a valid detection of the MI task; otherwise the user is assumed to be in the idle state. The threshold of the dwell time was guided by the receiver operating characteristic (ROC) analysis to obtain a compromise between the true positive rate (TPR) and the false positive rate (FPR) [31]. If one MI task was detected in epoch 1, a break epoch with a length of 1000ms followed. In this period, the result of the MDA was set to the idle state. If no MI task was detected in epoch 2 within 3s, the subject was considered in the idle state in this epoch. When the mental states in the two epochs were detected, the order of the current sMI task could be determined and the corresponding command was generated.

To evaluate the classification performance of the six sMI tasks, two criteria named as throughput (bits per minute, bpm) and kappa coefficient of the four subjects were calculated [32,33]. The kappa coefficient κ is an advantageous criterion for BCI data classification with multiple classes which is calculated with the following formulas:
                           
                              (5)
                              
                                 κ
                                 =
                                 
                                    
                                       
                                          
                                             p
                                          
                                          
                                             0
                                          
                                       
                                       −
                                       
                                          
                                             p
                                          
                                          
                                             e
                                          
                                       
                                    
                                    
                                       1
                                       −
                                       
                                          
                                             p
                                          
                                          
                                             e
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (6)
                              
                                 
                                    
                                       p
                                    
                                    
                                       0
                                    
                                 
                                 =
                                 Acc
                                 =
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                          
                                       
                                       
                                          
                                             n
                                          
                                          
                                             ii
                                          
                                       
                                    
                                    
                                       S
                                    
                                 
                              
                           
                        
                        
                           
                              (7)
                              
                                 
                                    
                                       p
                                    
                                    
                                       e
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                          
                                       
                                       
                                          
                                             n
                                          
                                          
                                             :
                                             i
                                          
                                       
                                       
                                          
                                             n
                                          
                                          
                                             i
                                             :
                                          
                                       
                                    
                                    
                                       
                                          
                                             S
                                          
                                          
                                             2
                                          
                                       
                                    
                                 
                              
                           
                        where n
                        
                           ii
                         represents number of correctly classified samples of the ith class in the six sMI tasks, 
                           
                              
                                 n
                              
                              
                                 :
                                 i
                              
                           
                         represents the numbers of samples which are classified into class i, and 
                           
                              
                                 n
                              
                              
                                 i
                              
                           
                        : is the total number of ith class samples. S is the total number of all the samples of the six classes. A kappa coefficient of 1 indicates a perfect classification while a kappa coefficient of 0 indicates that the predicted results show no correlation with the true classes. The standard error 
                           se
                           (
                           κ
                           )
                         of kappa coefficient was also calculated by
                           
                              (8)
                              
                                 se
                                 (
                                 κ
                                 )
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   p
                                                
                                                
                                                   0
                                                
                                             
                                             +
                                             
                                                
                                                   p
                                                
                                                
                                                   e
                                                
                                                
                                                   2
                                                
                                             
                                             −
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                
                                             
                                             [
                                             
                                                
                                                   n
                                                
                                                
                                                   :
                                                   i
                                                
                                             
                                             ×
                                             
                                                
                                                   n
                                                
                                                
                                                   i
                                                   :
                                                
                                             
                                             ×
                                             (
                                             
                                                
                                                   n
                                                
                                                
                                                   :
                                                   i
                                                
                                             
                                             +
                                             
                                                
                                                   n
                                                
                                                
                                                   i
                                                   :
                                                
                                             
                                             )
                                             ]
                                             /
                                             
                                                
                                                   S
                                                
                                                
                                                   3
                                                
                                             
                                          
                                       
                                    
                                    
                                       (
                                       1
                                       −
                                       
                                          
                                             p
                                          
                                          
                                             e
                                          
                                       
                                       )
                                       
                                          
                                             S
                                          
                                       
                                    
                                 
                              
                           
                        
                     

The throughput is also a widely used criterion to evaluate the performance of a BCI system. It is calculated with the following formula:
                           
                              (9)
                              
                                 τ
                                 =
                                 
                                    
                                       P
                                    
                                    
                                       T
                                    
                                 
                                 ×
                                 
                                    
                                       log
                                    
                                    
                                       2
                                    
                                 
                                 (
                                 M
                                 )
                              
                           
                        where τ is the throughput value, P is the accuracy, T is the response time, and M is the number of classes. To get a reliable bpm, the accuracy P here is a adjusted accuracy by using the penalty of error:
                           
                              (10)
                              
                                 P
                                 =
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       0
                                    
                                 
                                 −
                                 (
                                 1
                                 −
                                 
                                    
                                       
                                          P
                                       
                                       
                                          0
                                       
                                    
                                 
                                 )
                                 )
                                 =
                                 (
                                 2
                                 ×
                                 
                                    
                                       P
                                    
                                    
                                       0
                                    
                                 
                                 −
                                 1
                                 )
                              
                           
                        where P
                        0 is the initial accuracy of the six sMI tasks classification.

To train the subjects to effectively regulate of SMRs and the parameters for the MDA classifier, a cue-based feedback training procedure was performed first. The subjects were instructed to execute left and right MI tasks or remain in the idle state according to cues displayed on a computer screen. The EEG samples produced for these three mental tasks were collected to train the classifier. Feedback training was then performed to enable the subjects to learn to modulate the SMRs efficiently while simultaneously optimizing the classifier. In the training process, 56 trials of each task were performed in one day. If the average accuracy of the left, right MI and idle state exceeded 85%, the training was terminated. Otherwise, the training was repeated until the accuracy criterion was satisfied.

Following training, tests were conducted to evaluate the performance of the classifier in correctly identifying the sMI tasks. In these tests, a trial for one sMI task lasted 15s, as illustrated in Fig. 3
                        . For the first 6s, “START” was displayed on the screen, and the subjects were asked to relax. After the rest period, one of the six literal cues (“LL”, “LR”, “RR” and “RL”, “SL” or “SR”) was displayed on the screen for 6s in random order, and the subjects attempted to execute the corresponding task. “PAUSE” was then displayed for a 3-s interval before the next trial started. If one of the six tasks was recognized during the rest period, a false positive was recorded, and the trial was terminated. During the MI period, when a literal cue (e.g.,“LR”) was displayed, subjects were asked to execute the first MI task until the classification result (left or right) for epoch 1 was generated, as indicated by the text feedback. Then, epoch 2 began and the subject was instructed to execute the next MI task. For the “SL” and“SR” tasks, the subjects remained at rest. A break epoch was provided between epoch 1 and epoch 2 to allow the subject to shift from the epoch 1 MI task to the epoch 2 MI task. If the correct task was detected in the MI period and no false positive was recorded in the rest period, the trial was considered successful. In this experiment, every subject was asked to perform 56×6 trials for the six classes of sMI tasks, and the average accuracy and response time were calculated to evaluate performance.

Following the classifier tests, the proposed BCI paradigm was applied in experiments involving control of a three-joint arm of a robot. In these experiments, each subject performed 15 reach-to-grasp tasks. The total time and the number of commands generated for each task were recorded to evaluate performance. After the above experiment, the subjects were also asked to complete the reach-to-grasp task using the manual control (keyboard). Each subject controlled the robot arm using six keys on a keyboard representing the six sMI tasks in Table 1. The result of manual control experiment was used as a reference index to evaluate the performance of BCI control. In this study, the total time and the number of commands required to complete one reach-to-grasp task in both manual control and BCI control experiment were recorded to evaluate the control performance.

@&#RESULTS@&#

The performance of the six-class BCI based on the Morse code-based method is presented in Table 2
                        . The average accuracy for the six sMI tasks in the testing session was 89.4%, which significantly exceeded the level of chance (16.7%). To achieve effective communication and control, an accuracy greater than 70% is commonly required [34]. As shown in Table 2, the accuracies of the four subjects exceeded 80%, demonstrating effective control using the Morse code-based method. The response times of the six sMI tasks are also presented in Table 2, where T
                        1 is the time elapsed until the MI task in epoch 1 was classified, and T
                        2 is the time elapsed until the next MI task in epoch 2 was classified, including the break epoch (1000ms). The average value of T
                        1 for all subjects was 1.9s, and the average value of T
                        2 was 3.3s. The values of T
                        2 were much greater than those of T
                        1 because the former included the break period. The averaged total response time 
                           RT
                           =
                           
                              
                                 T
                              
                              
                                 1
                              
                           
                           +
                           
                              
                                 T
                              
                              
                                 2
                              
                           
                         was approximately 5.2s. The averaged kappa coefficient of the six sMI tasks was 
                           0.88
                           ±
                           0.060
                        . The averaged throughput on the four subjects was 23.5bpm, which is better than the usual throughput of typical MI-based BCI systems (15–20bpm).

The results demonstrated that the six sMI tasks were classified with reliable performance using the proposed method. Time–frequency maps of the EEG signals are presented in Fig. 4
                         to illustrate how the subjects encoded different sequence codes of the sMI task by modulating different ERD/ERS features. The maps were averaged over 56 trials for each class of sMI task collected in the test experiment of the sMI tasks (see Section 2.5). Distinct ERD/ERS patterns in the C3 and C4 channels for the six sMI tasks can be observed in Fig. 4. In the “LL” task, the significant ERD feature occurs in the C4 channel and persists from epoch 1 to epoch 2, whereas in the “LR” task, the ERD feature changes from the C4 channel in epoch 1 to the C3 channel in epoch 2. Similar behavior can be observed in the “RR” and “RL” tasks. For the 1-length sMI tasks “SL” and “SR”, the ERD features occurred in epoch 1, and the ERS occurred subsequently in epoch 2, which indicated that the subjects discontinued the MI task to enter the idle state. These distinct ERD patterns represent specific codes associated with the various sMI tasks. In particular, bilateral ERD can be observed in both the C3 and C4 channels in the experiment in which the subjects executed the left MI task, whereas the ERD features for the right MI are more contralateral. A previous study of asymmetric spatiotemporal patterns of ERD [35] observed a preponderance of contralateral ERD features associated with movements of the fingers of the right hand, whereas the ERD features associated with movements of the fingers of the left hand were bilateral. The asymmetric behavior associated with the left and right MI tasks in the present study is consistent with their findings.

Using the distinct time–frequency signatures of ERD/ERS, the six classes of sMI tasks could be detected from the EEG signals. Fig. 5
                         shows the classification results of the ERD/ERS features. The lines represent the averaged classification results from the MDA classifier (see Section 2.4). It can be observed that the time histories of the six sMI tasks had different shapes, representing the different sequence codes. The response times for epoch 2 were longer for the “SL” and “SR” tasks than the other four tasks, because of the time constraint of the idle state detection in epoch 2. For the “SL”,“SR”, “LR”, and “RL” tasks which required different mental tasks in each of the two epochs, the results in the shift duration were unstable and delayed because of the time required for the subjects to shift to a new task and the inherent time delay in signal processing. Therefore, the break epoch was necessary both for the subjects to change tasks and to avoid inaccurate classifications by the algorithm.

The accuracy of the sMI task detection was closely related to the classification accuracy in each epoch. Table 3
                         presents the accuracy of the classification of left and right MI tasks, and the idle state. The results were averaged over 56 trials for each mental task. The average accuracy for the three mental tasks was 92.0%. In this study, the length of the “dwell time” was 1500ms based on the ROC analysis. To satisfy the accuracy criterion in the training step, 56 trials of each task were performed in one day. The two experienced subjects (subject A and B) took about 3days to satisfy the accuracy of 85%, while the naive subjects (subject C and D) took about 16days to satisfy the accuracy criterion.

The results of the tests to control the three-joint robot arm are summarized in Table 4
                        . In the experiments, all of the subjects could complete the reach-to-grasp tasks in approximately 50s on average. Subject A completed the task the fastest (39.1s on average) and generated 4.9 commands to complete one task. Subject D required the most time to complete each task, 61.3s on average. Because the accuracy of the sMI task classifier was the lowest for subject D (see Table 2), misclassification occurred more frequently, resulting in erroneous commands. Therefore, additional commands were required to correct the motion of the arm. Fig. 6
                         shows a sequence of images recorded during the experiments. In each reach-to-grasp task, the subject first moved the hand of the robot arm to the object by controlling the motion of the shoulder and the elbow. Subsequently, the subject controlled the hand to grasp the object.

To evaluate the controllability of our BCI paradigm for robot arm control, the performance of manual control was treated as the reference index to investigate how similar the BCI control performance was to the manual control. The ratio of the measures in the two conditions was also calculated in Table 4. The time ratio between BCI control and manual control was 1.49 on average, and the number ratio of spent commands was 1.53. This result was comparable to some previous investigations. In Millán et al. [13], the time ratio was 1.35 in the mobile robot control using a three-class BCI; Chae et al. also reported a time ratio of 1.27 in robot navigation experiment using a three-class BCI similarly [14]. Our result was a litter higher because more DOFs were controlled in the experiment.

@&#DISCUSSION AND CONCLUSION@&#

In this study, a Morse code-based method for multiclass BCI design was developed and tested in an actual three-joint robotic arm control experiment. In our approach, subjects were asked to execute the sMI tasks consisting of sequential left and right MI tasks to modulate brain activities. Using a principle similar to Morse code, the codes embedded in the various sMI tasks were detected from the ERD/ERS features and mapped to specific BCI commands. Using the proposed method, a six-class BCI system was constructed and used to control an actual three-joints robot arm to verify the feasibility of the approach. To improve operability, an embedded feedback mechanism was designed in which the motion state of the robot arm directly provided the feedback information to facilitate the execution of the sMI task by the subject in the correct order, without additional prompt interfaces. Four healthy subjects participated in the experiments, and the average accuracy for the six sMI tasks was 89.4%, which significantly exceeded the level of chance (16.7%). Additionally, Cohen's kappa coefficient and the throughput of our BCI paradigm achieved at 
                        0.88
                        ±
                        0.060
                      and 23.5bpm, respectively. The above results demonstrated the high performance of the proposed multiclass BCI using Morse code-inspired approach. In the robot arm control experiments, the four subjects were able to complete the reach-to-grasp task successfully. The results demonstrated that a Morse code-based method can be used to create an efficient multi-class BCI using a limited number of MI tasks, and provides a new direction for the design of BCI systems for multi-DOF control applications.

Our proposed BCI system achieved reliable accuracy and increased the number of commands, as demonstrated by the sMI task identification and the robot arm control experiments (see Tables 2 and 4). The increased mental tasks did not reduce the accuracy compared to the traditional multi-class BCIs. In conventional methods, different MI tasks are discriminated by the spatial and spectral features of ERD/ERS (in 2-dimensional space). The increased number of MI tasks for other body parts reduces the distinction between each task, because of the low spatial resolution of EEG signals. Using the Morse code-based method, the features of the sMI tasks were extended from two-dimensional space to three-dimensional space by incorporating additional temporal information, and the distances between the sMI tasks were expanded [36–38]. As illustrated in Fig. 7
                     , the sMI tasks could be discriminated not only in the spatial and spectral dimensions but also in the temporal dimension. The sequence codes of various sMI tasks provided additional information for classification. Consequently, a greater number of independent commands could be produced with the Morse code-based method, resulting in superior and more stable performance compared with traditional multi-class BCIs.

Previous studies [20,28,29] have employed virtual environments (e.g., controlling a virtual device displayed on a screen). This study is the first to use an sMI-based BCI paradigm to control an actual multi-DOF robot arm, demonstrating the practicability of our method for multi-DOF control. Another contribution of this study is the embedded feedback mechanism, which improved the capability of the proposed BCI to control the robot arm. Feedback is important in the Morse code-based BCI system to aid the execution of the sMI tasks by the subject in the correct sequence. In a virtual environment, such as a computer screen, the feedback information for the subjects can be realized conventionally by programming. However, for real device control, an external screen may reduce usability. The embedded feedback method used in this study provides feedback information via the motion state of the robot arm itself. The subjects were not required to observe the robot arm and an external interface simultaneously to receive feedback on the sMI tasks. Integration of the control device and the feedback interface is important to extend the BCI for use in practical applications.

Although the sMI tasks used in this study increased the number of output commands with only three classes of mental tasks, the response speed of each command in our BCI system was decreased (the averaged response time was 5s in the experiment) compared to the traditional MI-based paradigms. More time was spent to produce one command because a sequence of left and right MI tasks should be performed. Another limitation of this study is that the BCI system is not fully asynchronous. Feedback information and time constraint were required to perform a correct sMI task. In future work, we will focus on the fully asynchronous approach of the sMI task detection to improve the independence and controllability of our BCI system.

None declared.

@&#ACKNOWLEDGMENTS@&#

This research was supported in part by the National Natural Science Foundation of China (Project 61375117 and 91320202) and the National High Technology Research and Development Program (Project 2012AA011601).

@&#REFERENCES@&#

