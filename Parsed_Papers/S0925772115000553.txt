@&#MAIN-TITLE@&#Survivable minimum bottleneck networks

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           First polynomial-time algorithm for the survivable bottleneck Steiner network problem in Minkowski planes.


                        
                        
                           
                           Algorithm works for a very general definition of survivability and in most “nicely” defined norms.


                        
                        
                           
                           The algorithm depends on a novel use of oriented Dirichlet cell partitions.


                        
                        
                           
                           Running time is 
                                 O
                                 (
                                 
                                    
                                       n
                                    
                                    
                                       2
                                       k
                                       +
                                       3
                                    
                                 
                                 log
                                 ⁡
                                 n
                                 )
                               in the Euclidean and rectilinear planes.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Survivable bottleneck Steiner networks

Oriented Dirichlet cells

Wireless ad-hoc networks

@&#ABSTRACT@&#


               
               
                  We show that the survivable bottleneck Steiner tree problem in normed planes can be solved in polynomial time when the number of Steiner points is constant. This is a fundamental problem in wireless ad-hoc network design where the objective is to design networks with efficient routing topologies. Our result holds for a general definition of survivability and for any norm whose ball is specified by a piecewise algebraic curve of bounded degree and with a bounded number of pieces. In particular, under the Euclidean and rectilinear norms our algorithm constructs an optimal solution in 
                        O
                        (
                        
                           
                              n
                           
                           
                              2
                              k
                              +
                              3
                           
                        
                        log
                        ⁡
                        n
                        )
                      steps, where n is the number of terminals and k is the number of Steiner points. Our algorithm is based on the construction of generalised Voronoi diagrams and relative neighbourhood graphs.
               
            

@&#INTRODUCTION@&#

Wireless ad hoc networks (WANETs) are distributed networks which employ dynamic routing topologies. Locating nodes and assigning transmission radii are two fundamental components of the WANET deployment process. The optimisation objective is to create a network topology that contains energy-efficient routing subtrees and is resilient to multiple node failures. A suitable method of modelling power consumption in these networks is by the length of the longest link (or bottleneck). Nodes incident to bottleneck edges consume the most power, and therefore tend to deplete their energy reserves more quickly than other nodes. Finding methods to design networks with small bottlenecks is therefore an active area of research [1,8].

We study the problem of constructing survivable minimum bottleneck networks in normed (Minkowski) planes. The challenge when designing these networks stems from the generality of the model: some of the nodes do not have pre-assigned locations, rather, the locations are decision variables of the optimisation problem. These so called Steiner points correspond to relays in the actual network, and their purpose is to help reduce the bottleneck and extend the lifetime of the network. In the problem we address here, the Steiner points may potentially be located at any point of the plane. In practical terms, each relay added to the network comes at a cost and therefore, within most models, an explicit upper bound limits the number of relays. Exact algorithms have been developed for constructing these geometric minimum bottleneck networks that are 1-connected or 2-connected [3,4], however, in practice the connectivity requirements are usually significantly higher. This paper generalises the results of Bae et al. and Brazil et al. in [3] and [4] respectively in order to build optimal networks of any given connectivity.

In Fig. 1
                      we provide an example of a network containing four nodes corresponding to three sensors (black circles) and a base station (square). The network on the left is 3-connected – if any two sensors die then the network remains connected. The bottleneck is edge e, which means that node x will be the first node to deplete its energy supply. The network on the right is an enhanced network containing the same four nodes and an additional 5 relays. The network is still 3-connected (with respect to the sensors), but the length of the bottleneck is significantly shorter, which will ultimately lead to a longer time till battery depletion of the sensors.

We study a formal model of the problem, defined as follows. The connectivity requirement for feasible networks is specified by a matrix 
                        A
                        =
                        (
                        
                           
                              a
                           
                           
                              x
                              y
                           
                        
                        )
                      indexed by nodes. Entry 
                        
                           
                              a
                           
                           
                              x
                              y
                           
                        
                      specifies the minimum number of internally node-disjoint paths connecting nodes x and y in a feasible network. We assume that A is symmetric, contains non-negative integer entries only, and has 0's on its main diagonal. Matrix A is called a survivability matrix. Given a set X of n points in the plane (called terminals), a constant k, and an 
                        n
                        +
                        k
                      by 
                        n
                        +
                        k
                      survivability matrix A, the survivable minimum bottleneck problem asks for network N of minimum bottleneck length such that N spans X and at most k additional points, and for every pair of nodes 
                        x
                        ,
                        y
                      in N the number of internally node-disjoint paths connecting x and y in N is at least 
                        
                           
                              a
                           
                           
                              x
                              y
                           
                        
                     . Network N is then called an A-survivable minimum bottleneck k-Steiner network.

Our algorithm for constructing survivable minimum bottleneck networks proceeds by first considering every candidate topology interconnecting the set X of n given fixed points and a set S of k variable (Steiner) points. We reduce the number of candidate topologies by means of a certain abstract Voronoi plane partition, which generalises a method developed by Georgekopoulos [7] for 1-connected networks (where every non-diagonal entry of A is 1). In particular, each region of the partition determines the potential neighbours of a Steiner point in the region. For each topology in this reduced list we then apply the newly developed methods of Bae et al. [3] to find the optimal locations of the Steiner points. Our algorithm runs in polynomial time for constant k. In particular, for norms with polygonal or elliptic unit balls such as the Euclidean and Manhattan norms our algorithm runs in 
                        O
                        (
                        
                           
                              n
                           
                           
                              2
                              k
                              +
                              3
                           
                        
                        log
                        ⁡
                        n
                        )
                     -time. Note that when k is not constant then the problem is NP-hard, since this is true of even the 1-connected problem [16].

In this paper we assume that nodes are embedded in a 2-dimensional normed space 
                        
                           
                              ‖
                              ⋅
                              ‖
                           
                           
                              B
                           
                        
                      with unit disk B. All distances are measured with respect to this ambient norm. Our algorithm works for any centrally symmetric, convex and compact B, but in order to implement the algorithm within polynomial time we require that the boundary of B be specified by a piecewise algebraic curve of bounded degree and with a bounded number of pieces (as is the case for the Euclidean or Manhattan/rectilinear norms).

Let 
                        A
                        =
                        (
                        
                           
                              a
                           
                           
                              x
                              y
                           
                        
                        )
                      be an 
                        n
                        +
                        k
                      by 
                        n
                        +
                        k
                      survivability matrix for a set of n fixed points X and k Steiner points S. A network satisfying the path constraints specified by the entries of A is called A-survivable. Let 
                        c
                        :
                        =
                        max
                        ⁡
                        {
                        
                           
                              a
                           
                           
                              x
                              y
                           
                        
                        :
                        x
                        ,
                        y
                        ∈
                        X
                        ∪
                        S
                        }
                     .


                     
                        Lemma 1
                        
                           Let N be an A-survivable graph and let W be a set containing at least 
                           
                              c
                              +
                              1
                            
                           nodes of N. Let 
                           
                              
                                 
                                    N
                                 
                                 
                                    ′
                                 
                              
                            
                           be the graph that results by replacing the subgraph of N induced by W by a c-connected graph G. Then 
                           
                              
                                 
                                    N
                                 
                                 
                                    ′
                                 
                              
                            
                           is A-survivable.
                        


                     
                        Proof
                        The proof is similar to the 2-connected case given in [12]. Suppose that 
                              
                                 
                                    N
                                 
                                 
                                    ′
                                 
                              
                            is not A-survivable and let V be a cut-set of 
                              
                                 
                                    N
                                 
                                 
                                    ′
                                 
                              
                           , separating nodes 
                              x
                              ,
                              y
                            and containing at most 
                              
                                 
                                    a
                                 
                                 
                                    x
                                    y
                                 
                              
                              −
                              1
                            nodes. The components of 
                              
                                 
                                    N
                                 
                                 
                                    ′
                                 
                              
                              −
                              V
                            containing x and y respectively each contain a node of W, for otherwise V would also separate x and y in N, which is not possible. Since G is c-connected and V contains at most 
                              c
                              −
                              1
                            nodes, there exists a path in 
                              
                                 
                                    N
                                 
                                 
                                    ′
                                 
                              
                            connecting 
                              x
                              ,
                              y
                            which does not intersect V. This is a contradiction. □

As discovered by Chang et al. [5] there exists a useful relationship between minimum bottleneck networks and relative neighbourhood graphs, which we define next. Let 
                        e
                        =
                        x
                        y
                      be an edge of a network. The lens specified by e is the interior of the region of intersection of two copies of B, each of radius 
                        
                           
                              ‖
                              x
                              −
                              y
                              ‖
                           
                           
                              B
                           
                        
                      and centred at x and y respectively (see Fig. 2
                      for an example). The j-relative neighbourhood graph (j-RNG) on a set Y of nodes contains edge xy, where 
                        x
                        ,
                        y
                        ∈
                        Y
                     , if and only if there are at most 
                        j
                        −
                        1
                      nodes in the lens specified by xy. In the Euclidean plane, Chang et al.'s algorithm constructs a j-RNG in a time of 
                        O
                        (
                        j
                        
                           
                              n
                           
                           
                              2
                           
                        
                        )
                      on n given points; this was improved in [15] to 
                        O
                        (
                        
                           
                              n
                           
                           
                              
                                 5
                                 3
                              
                           
                        
                        log
                        ⁡
                        n
                        )
                      for constant j. The naive algorithm constructs a j-RNG in 
                        O
                        (
                        
                           
                              n
                           
                           
                              3
                           
                        
                        )
                      time for any B.

The next result generalises a theorem of Zhou et al. [17], and is true in any Minkowski plane.


                     
                        Lemma 2
                        
                           There exists an A-survivable minimum bottleneck k-Steiner network 
                           
                              
                                 
                                    N
                                 
                                 
                                    ′
                                 
                              
                            
                           on X that is a subgraph of the c-RNG on 
                           
                              V
                              (
                              
                                 
                                    N
                                 
                                 
                                    ′
                                 
                              
                              )
                           
                           .
                        


                     
                        Proof
                        Let N be an A-survivable minimum bottleneck k-Steiner network that contains an edge e with at least c nodes in the interior of its lens. Then, without reducing the connectivity of N nor increasing its bottleneck length, edge e can be deleted and replaced by c paths connecting the end-nodes of e to get 
                              
                                 
                                    N
                                 
                                 
                                    ′
                                 
                              
                           . Various (straightforward) cases must be considered: details are found in [17]. □

The benefit of employing j-RNGs stems from the next lemma.


                     
                        Lemma 3
                        
                           (See 
                           
                              [5]
                           
                           .) In the Euclidean plane, the j-RNG on X contains 
                           
                              O
                              (
                              j
                              n
                              )
                            
                           edges.
                        

The linear structural complexity of the j-RNG reduces the number of candidate topologies that must be considered as potential solutions to the bottleneck k-Steiner problem. This will become apparent in Section 5. In other norms, such as the 
                        
                           
                              L
                           
                           
                              1
                           
                        
                      (rectilinear) norm, the j-RNG may contain 
                        Θ
                        (
                        
                           
                              n
                           
                           
                              2
                           
                        
                        )
                      edges, although these instances are unlikely to occur in practice [9].

Next we describe the method by which we construct a Voronoi-based partition of the plane for the purpose of further reducing the number of candidate optimal topologies spanning 
                        X
                        ∪
                        S
                     . A collection of convex sets 
                        Q
                      forms a packing if 
                        
                           int
                        
                        (
                        Q
                        )
                        ∩
                        
                           int
                        
                        (
                        
                           
                              Q
                           
                           
                              ′
                           
                        
                        )
                        =
                        ∅
                      for every distinct 
                        Q
                        ,
                        
                           
                              Q
                           
                           
                              ′
                           
                        
                        ∈
                        Q
                     . If two sets share a boundary point in the packing then they are neighbours. A translate of Q is a congruent copy of Q moved to a new location whilst maintaining Q's orientation. The Hadwiger number 
                     
                        H
                        (
                        Q
                        )
                      of Q is the maximum number of neighbours of Q for all packings of translates of Q.

As demonstrated in [13], the Hadwiger number of Q is equal to the maximum number of points that can be placed on the boundary of Q so that all interpoint distances are at least one unit long. We refer to the points within such a maximal set as Hadwiger contact points for Q. Two Hadwiger contact points 
                        v
                        ,
                        
                           
                              v
                           
                           
                              ′
                           
                        
                      are adjacent if there are no other Hadwiger contact points in the cone generated by the vectors 
                        
                           
                              o
                              v
                           
                           
                              →
                           
                        
                        ,
                        
                           
                              
                                 
                                    o
                                    v
                                 
                                 
                                    →
                                 
                              
                           
                           
                              ′
                           
                        
                     , where o is a point in the interior of Q. Vectors 
                        
                           
                              o
                              v
                           
                           
                              →
                           
                        
                        ,
                        
                           
                              
                                 
                                    o
                                    v
                                 
                                 
                                    →
                                 
                              
                           
                           
                              ′
                           
                        
                      are called Hadwiger vectors for Q. It is pointed out in [13] that 
                        6
                        ≤
                        H
                        (
                        Q
                        )
                        ≤
                        8
                      for any convex set Q in 
                        
                           
                              R
                           
                           
                              2
                           
                        
                     .

Suppose that B is centred at a point x. Let 
                        
                           
                              C
                           
                           
                              i
                           
                        
                        (
                        x
                        )
                      be a cone centred at x and generated by a pair of Hadwiger vectors 
                        
                           
                              x
                              v
                           
                           
                              →
                           
                        
                        ,
                        
                           
                              
                                 
                                    x
                                    v
                                 
                                 
                                    →
                                 
                              
                           
                           
                              ′
                           
                        
                     . Note that there are at most 8 such distinct cones for B.


                     
                        Lemma 4
                        
                           (See 
                           
                              [13]
                           
                           .) Let 
                           
                              y
                              ,
                              
                                 
                                    y
                                 
                                 
                                    ′
                                 
                              
                            
                           be any two points in 
                           
                              
                                 
                                    C
                                 
                                 
                                    i
                                 
                              
                              (
                              x
                              )
                           
                           . Then 
                           
                              
                                 
                                    ‖
                                    y
                                    −
                                    
                                       
                                          y
                                       
                                       
                                          ′
                                       
                                    
                                    ‖
                                 
                                 
                                    B
                                 
                              
                              ≤
                              max
                              ⁡
                              {
                              
                                 
                                    ‖
                                    x
                                    −
                                    y
                                    ‖
                                 
                                 
                                    B
                                 
                              
                              ,
                              
                                 
                                    ‖
                                    x
                                    −
                                    
                                       
                                          y
                                       
                                       
                                          ′
                                       
                                    
                                    ‖
                                 
                                 
                                    B
                                 
                              
                              }
                           
                           .
                        


                     
                        Theorem 5
                        
                           There exists an A-survivable minimum bottleneck k-Steiner network 
                           
                              
                                 
                                    N
                                 
                                 
                                    ′
                                 
                              
                            
                           on X such that for every node 
                           
                              x
                              ∈
                              V
                              (
                              
                                 
                                    N
                                 
                                 
                                    ′
                                 
                              
                              )
                            
                           and any 
                           
                              
                                 
                                    C
                                 
                                 
                                    i
                                 
                              
                              (
                              x
                              )
                           
                           , x is adjacent to at most c nodes in 
                           
                              
                                 
                                    C
                                 
                                 
                                    i
                                 
                              
                              (
                              x
                              )
                           
                           , and these nodes are c closest nodes to x in 
                           
                              
                                 
                                    C
                                 
                                 
                                    i
                                 
                              
                              (
                              x
                              )
                           
                           .
                        


                     
                        Proof
                        In any A-survivable minimum bottleneck k-Steiner network N on X let Z be any c closest nodes to x in 
                              
                                 
                                    C
                                 
                                 
                                    i
                                 
                              
                              (
                              x
                              )
                            and let 
                              
                                 
                                    Z
                                 
                                 
                                    ′
                                 
                              
                            be the set of nodes in 
                              
                                 
                                    C
                                 
                                 
                                    i
                                 
                              
                              (
                              x
                              )
                            that are adjacent to x. Let 
                              
                                 
                                    N
                                 
                                 
                                    ′
                                 
                              
                            be the graph that results by replacing the edge set 
                              {
                              x
                              z
                              :
                              z
                              ∈
                              
                                 
                                    Z
                                 
                                 
                                    ′
                                 
                              
                              }
                            by the edge set 
                              {
                              x
                              z
                              :
                              z
                              ∈
                              Z
                              }
                              ∪
                              E
                              (
                              
                                 
                                    K
                                 
                                 
                                    Z
                                    ∪
                                    
                                       
                                          Z
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                              )
                           , where 
                              
                                 
                                    K
                                 
                                 
                                    Z
                                    ∪
                                    
                                       
                                          Z
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                            is the complete undirected graph on 
                              Z
                              ∪
                              
                                 
                                    Z
                                 
                                 
                                    ′
                                 
                              
                           . By Lemma 4, no edge of 
                              
                                 
                                    K
                                 
                                 
                                    Z
                                    ∪
                                    
                                       
                                          Z
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                            is longer than the longest edge in 
                              {
                              x
                              z
                              :
                              z
                              ∈
                              Z
                              }
                           . Therefore the bottleneck of 
                              
                                 
                                    N
                                 
                                 
                                    ′
                                 
                              
                            is not longer than that of N. By Lemma 1, 
                              
                                 
                                    N
                                 
                                 
                                    ′
                                 
                              
                            is A-survivable. Therefore 
                              
                                 
                                    N
                                 
                                 
                                    ′
                                 
                              
                            satisfies the theorem. □

Observe that by repeatedly performing the operations in Lemma 2 and Theorem 5 it follows that there exists an A-survivable minimum bottleneck k-Steiner network on X satisfying both Lemma 2 and Theorem 5.

The 
                        
                           
                              C
                           
                           
                              i
                           
                        
                     -distance from a point x to a point y is defined as
                        
                           
                              
                                 
                                    d
                                 
                                 
                                    
                                       
                                          C
                                       
                                       
                                          i
                                       
                                    
                                 
                              
                              (
                              x
                              ,
                              y
                              )
                              =
                              
                                 {
                                 
                                    
                                       
                                          
                                             
                                                ‖
                                                y
                                                −
                                                x
                                                ‖
                                             
                                             
                                                B
                                             
                                          
                                       
                                       
                                          if 
                                          y
                                          ∈
                                          
                                             
                                                C
                                             
                                             
                                                i
                                             
                                          
                                          (
                                          x
                                          )
                                       
                                    
                                    
                                       
                                          ∞
                                       
                                       
                                          otherwise.
                                       
                                    
                                 
                              
                           
                        
                     
                  

Observe that 
                        
                           
                              d
                           
                           
                              
                                 
                                    C
                                 
                                 
                                    i
                                 
                              
                           
                        
                      is not symmetrical. Let 
                        
                           
                              U
                           
                           
                              i
                           
                        
                      be the intersection of 
                        
                           
                              C
                           
                           
                              i
                           
                        
                      and B. Then 
                        
                           
                              U
                           
                           
                              i
                           
                        
                      is the unit disk for 
                        
                           
                              d
                           
                           
                              
                                 
                                    C
                                 
                                 
                                    i
                                 
                              
                           
                        
                     . Suppose that 
                        X
                        =
                        {
                        
                           
                              x
                           
                           
                              j
                           
                        
                        :
                        1
                        ≤
                        j
                        ≤
                        n
                        }
                     .


                     
                        Definition 1
                        The cth-order Voronoi diagram 
                              
                                 
                                    V
                                 
                                 
                                    i
                                 
                              
                              (
                              X
                              )
                            based on 
                              
                                 
                                    U
                                 
                                 
                                    i
                                 
                              
                            is a partition of the plane into regions 
                              {
                              
                                 
                                    V
                                 
                                 
                                    i
                                 
                              
                              (
                              1
                              ,
                              …
                              ,
                              p
                              )
                              }
                            such that for any point 
                              x
                              ∈
                              
                                 
                                    R
                                 
                                 
                                    2
                                 
                              
                            it holds that 
                              x
                              ∈
                              
                                 
                                    V
                                 
                                 
                                    i
                                 
                              
                              (
                              1
                              ,
                              …
                              ,
                              p
                              )
                            if and only if 
                              {
                              
                                 
                                    x
                                 
                                 
                                    1
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    x
                                 
                                 
                                    p
                                 
                              
                              }
                            is a maximal cardinality set of at most c farthest terminals from x (with respect to 
                              
                                 
                                    d
                                 
                                 
                                    
                                       
                                          C
                                       
                                       
                                          i
                                       
                                    
                                 
                              
                           ). We say that region 
                              
                                 
                                    V
                                 
                                 
                                    i
                                 
                              
                              (
                              1
                              ,
                              …
                              ,
                              p
                              )
                            is specified by 
                              {
                              
                                 
                                    x
                                 
                                 
                                    1
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    x
                                 
                                 
                                    p
                                 
                              
                              }
                           .

Since 
                        
                           
                              d
                           
                           
                              
                                 
                                    C
                                 
                                 
                                    i
                                 
                              
                           
                        
                      is not symmetrical it follows that some regions in 
                        
                           
                              V
                           
                           
                              i
                           
                        
                        (
                        X
                        )
                      may be specified by the empty set.


                     
                        Example
                        Let 
                              
                                 
                                    B
                                 
                                 
                                    1
                                 
                              
                            be the unit disk of the rectilinear (or 
                              
                                 
                                    L
                                 
                                 
                                    1
                                 
                              
                           ) norm centred at a point x. Therefore 
                              
                                 
                                    B
                                 
                                 
                                    1
                                 
                              
                            is a square with node coordinates 
                              x
                              +
                              (
                              1
                              ,
                              0
                              )
                              ,
                              x
                              +
                              (
                              0
                              ,
                              1
                              )
                              ,
                              x
                              +
                              (
                              −
                              1
                              ,
                              0
                              )
                              ,
                              x
                              +
                              (
                              0
                              ,
                              −
                              1
                              )
                           ; see Fig. 3
                           . Let 
                              
                                 
                                    C
                                 
                                 
                                    1
                                 
                              
                              (
                              x
                              )
                            be the cone centred at x and generated by 
                              
                                 
                                    x
                                    u
                                 
                                 
                                    →
                                 
                              
                            and 
                              
                                 
                                    x
                                    v
                                 
                                 
                                    →
                                 
                              
                           , where 
                              u
                              =
                              x
                              +
                              (
                              0
                              ,
                              1
                              )
                            and 
                              v
                              =
                              x
                              +
                              (
                              1
                              /
                              2
                              ,
                              1
                              /
                              2
                              )
                           . Let 
                              
                                 
                                    U
                                 
                                 
                                    1
                                 
                              
                            be the intersection of 
                              
                                 
                                    C
                                 
                                 
                                    i
                                 
                              
                              (
                              x
                              )
                            and 
                              
                                 
                                    B
                                 
                                 
                                    1
                                 
                              
                           . The 2nd-order Voronoi diagram based on 
                              
                                 
                                    U
                                 
                                 
                                    1
                                 
                              
                            of a set of five points, 
                              
                                 
                                    x
                                 
                                 
                                    1
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    x
                                 
                                 
                                    5
                                 
                              
                           , is illustrated in Fig. 4
                           .

A cth-order Voronoi diagram based on the unit disk of the Euclidean plane can be constructed in a time of 
                        O
                        (
                        
                           
                              c
                           
                           
                              2
                           
                        
                        n
                        log
                        ⁡
                        n
                        )
                      and has 
                        O
                        (
                        c
                        (
                        n
                        −
                        c
                        )
                        )
                      regions [10]. These results have been extended to the 
                        
                           
                              L
                           
                           
                              1
                           
                        
                      and 
                        
                           
                              L
                           
                           
                              ∞
                           
                        
                      norms in [11], with a time complexity of 
                        O
                        (
                        (
                        n
                        +
                        m
                        )
                        log
                        ⁡
                        n
                        )
                     , where m is the structural complexity of the cth-order Voronoi diagram. In [11] it is also shown that 
                        m
                        =
                        O
                        (
                        min
                        ⁡
                        {
                        c
                        (
                        n
                        −
                        c
                        )
                        ,
                        
                           
                              (
                              n
                              −
                              c
                              )
                           
                           
                              2
                           
                        
                        }
                        )
                     . These papers essentially construct the cth-order Voronoi diagram by iteratively constructing the 1st-order Voronoi diagram. The running time depends on the fact that a 1st-order Voronoi diagram can be constructed in 
                        O
                        (
                        n
                        log
                        ⁡
                        n
                        )
                      time. This procedure can therefore also be applied to the case when constructing the cth-order Voronoi diagram based on 
                        
                           
                              U
                           
                           
                              i
                           
                        
                     , by using the following result of Chew and Drysdale.


                     
                        Theorem 6
                        
                           (See 
                           
                              [6]
                           
                           .) For any convex (not necessarily symmetric) unit disk 
                           
                              
                                 
                                    B
                                 
                                 
                                    ′
                                 
                              
                            
                           the 1st-order Voronoi diagram based on 
                           
                              
                                 
                                    B
                                 
                                 
                                    ′
                                 
                              
                            
                           can be constructed in a time of 
                           
                              O
                              (
                              n
                              log
                              ⁡
                              n
                              )
                           
                           .
                        

As described in [6], an assumption about 
                        
                           
                              B
                           
                           
                              ′
                           
                        
                      is required in order to construct the Voronoi diagram in practice, namely that the following operations can be performed in constant time:
                        
                           1.
                           Given two points, find the bisector (based on 
                                 
                                    
                                       B
                                    
                                    
                                       ′
                                    
                                 
                              ) between them.

Given two such bisectors, compute their intersections.

The above conditions certainly hold if 
                        
                           
                              B
                           
                           
                              ′
                           
                        
                      is defined by a piecewise algebraic curve of bounded degree and with a bounded number of pieces.

Finally we demonstrate how the cth-order Voronoi diagram is employed in order to create the final partition. First we construct a cth-order Voronoi diagram for each of the at most eight 
                        
                           
                              U
                           
                           
                              i
                           
                        
                      generated by adjacent pairs of Hadwiger contact points on B: let P be any maximal set of Hadwiger contact points for B, let 
                        {
                        
                           
                              C
                           
                           
                              1
                           
                        
                        ,
                        …
                        ,
                        
                           
                              C
                           
                           
                              H
                              (
                              B
                              )
                           
                        
                        }
                      be the set of cones generated by the adjacent pairs in P, and let 
                        {
                        
                           
                              U
                           
                           
                              1
                           
                        
                        ,
                        …
                        ,
                        
                           
                              U
                           
                           
                              H
                              (
                              B
                              )
                           
                        
                        }
                      be the corresponding set of unit disks. Let 
                        
                           
                              V
                           
                           
                              B
                           
                        
                        (
                        X
                        )
                      be the refined partition that results by overlaying the partitions 
                        
                           
                              V
                           
                           
                              i
                           
                        
                        (
                        X
                        )
                      for 
                        i
                        ∈
                        {
                        1
                        ,
                        …
                        ,
                        H
                        (
                        B
                        )
                        }
                     .

If the 
                        
                           
                              V
                           
                           
                              i
                           
                        
                        (
                        X
                        )
                      are linear (i.e., each boundary segment is linear), as is the case when B is an ellipse or a polygon, then we have the following useful result.


                     
                        Lemma 7
                        
                           (See 
                           
                              [7]
                           
                           .) A bounded number of linear plane partitions can be overlayed in 
                           
                              O
                              (
                              
                                 
                                    n
                                 
                                 
                                    2
                                 
                              
                              )
                            
                           time, where n is the number of regions. The resulting partition has 
                           
                              O
                              (
                              
                                 
                                    n
                                 
                                 
                                    2
                                 
                              
                              )
                            
                           regions.
                        

In the general case, when B is not necessarily linear or elliptical, the refined partition can also be constructed in polynomial time. In particular, since the cth-order Voronoi diagram based on 
                        
                           
                              U
                           
                           
                              i
                           
                        
                      can also be defined as the lower envelope of a polynomial number of functions, and we assume that B is algebraic, the refined partition 
                        
                           
                              V
                           
                           
                              B
                           
                        
                        (
                        X
                        )
                      is of polynomial complexity and can be constructed in polynomial time (specifically 
                        O
                        (
                        
                           
                              n
                           
                           
                              2
                              c
                           
                        
                        )
                      time) by the results of Agarwal et al. and Sharir in [2,14].

As part of the above overlaying process a list of sets 
                        D
                        (
                        R
                        )
                        =
                        {
                        
                           
                              D
                           
                           
                              1
                           
                        
                        ,
                        …
                        ,
                        
                           
                              D
                           
                           
                              H
                              (
                              B
                              )
                           
                        
                        }
                      is produced for each region 
                        R
                        ∈
                        
                           
                              V
                           
                           
                              B
                           
                        
                        (
                        X
                        )
                     , where each 
                        
                           
                              D
                           
                           
                              i
                           
                        
                      is a tuple of at most c terminals. Tuple 
                        
                           
                              D
                           
                           
                              i
                           
                        
                      specifies region 
                        
                           
                              V
                           
                           
                              i
                           
                        
                        (
                        
                           
                              D
                           
                           
                              i
                           
                        
                        )
                     , where 
                        
                           
                              V
                           
                           
                              i
                           
                        
                        (
                        
                           
                              D
                           
                           
                              i
                           
                        
                        )
                      is the region of 
                        
                           
                              V
                           
                           
                              i
                           
                        
                        (
                        X
                        )
                      that contains R as a subregion. The next result now describes how the refined partition can be used to restrict the potential neighbours of Steiner points in candidate topologies. The proof follows immediately from Theorem 5.


                     
                        Theorem 8
                        
                           There exists an A-survivable minimum bottleneck k-Steiner network N on X with the following property. Let R be a region of the refined partition 
                           
                              
                                 
                                    V
                                 
                                 
                                    B
                                 
                              
                              (
                              X
                              )
                            
                           and suppose that R contains a Steiner point s of N. For every 
                           
                              j
                              ∈
                              {
                              1
                              ,
                              …
                              ,
                              H
                              (
                              B
                              )
                              }
                            
                           the terminal neighbours of s in 
                           
                              
                                 
                                    C
                                 
                                 
                                    j
                                 
                              
                              (
                              s
                              )
                            
                           are contained in 
                           
                              
                                 
                                    D
                                 
                                 
                                    j
                                 
                              
                           
                           .
                        

It will become clear in the next section how exactly we use the refined partition to discard many sub-optimal topologies. For each of the remaining candidate topologies we then need to find the optimal locations of the Steiner points. This local optimisation problem is known as the fixed topology problem. For a given topology M interconnecting 
                        X
                        ∪
                        S
                     , where S is a set of variable Steiner points, Bae et al. [3] presented the means to solve this problem if M is a tree and is full (every terminal is of degree 1 and every Steiner point is of degree more than 1). We demonstrate in this section how to extend their result to any simple full graph spanning 
                        X
                        ∪
                        S
                     . Note that this then solves the general fixed topology problem since any graph can be decomposed into full graphs which can then be solved independently.

Let M be any full topology spanning 
                        X
                        ∪
                        S
                     , and let 
                        
                           
                              G
                           
                           
                              M
                           
                        
                      be an optimal bottleneck Steiner network of topology M. We may assume that every Steiner point s of 
                        
                           
                              G
                           
                           
                              M
                           
                        
                      is at the centre of the smallest circle, say 
                        
                           
                              C
                           
                           
                              s
                           
                        
                      containing the neighbours of s. Therefore s is determined by either two or three points on the boundary of 
                        
                           
                              C
                           
                           
                              s
                           
                        
                     . Any such set of points on the boundary of 
                        
                           
                              C
                           
                           
                              s
                           
                        
                      is called a set of determinators for s (using the terminology of [3]). Observe that if s has exactly two determinators then they are diametrically opposed on 
                        
                           
                              C
                           
                           
                              s
                           
                        
                     .


                     
                        Definition
                        Let M be a full topology on 
                              X
                              ∪
                              S
                           . A determinating orientation 
                           
                              
                                 
                                    T
                                 
                                 
                                    ′
                                 
                              
                            of M is an oriented sub-topology of M, containing all Steiner points of M, such that the out-degree of every Steiner point is either 2 or 3 and the out-degree of every terminal is 0 (edges may be bi-directed). Observe that 
                              
                                 
                                    T
                                 
                                 
                                    ′
                                 
                              
                            is not necessarily connected. (See Fig. 5
                           .)

The purpose of an orientation is to specify the determinators of every Steiner point. To solve the fixed topology problem for M we consider every determinating orientation of M and apply Lemma 9 (below) to find the optimal locations of the Steiner points. If the network that resultants by locating the Steiner points of M at these locations has the same set of determinators specified by the orientation then we say that the orientation is feasible. The feasible orientation which gives the smallest bottleneck length is used to construct the optimal solution.


                     
                        Lemma 9
                        
                           (See 
                           
                              [3]
                           
                           .) One can find, in a time of 
                           
                              
                                 
                                    2
                                 
                                 
                                    O
                                    (
                                    |
                                    S
                                    |
                                    )
                                 
                              
                           
                           , locations for the Steiner points of a determinating orientation such that the length of the bottleneck is minimised.
                        

The number of determinating orientations of M is constant. To see this note that 
                        k
                        =
                        |
                        S
                        |
                      is constant (by assumption), and by Theorem 5 the degree of every Steiner point is bounded by the constant 8c. Once the Steiner points have been located with respect to an orientation 
                        
                           
                              T
                           
                           
                              ′
                           
                        
                      it requires constant time to verify whether 
                        
                           
                              T
                           
                           
                              ′
                           
                        
                      is feasible.

We first describe a simple algorithm for constructing an A-survivable minimum bottleneck spanning network on X (i.e., a network without Steiner points). Let 
                        
                           
                              K
                           
                           
                              X
                           
                        
                      be the c-RNG on X and let 
                        L
                        :
                        =
                        {
                        
                           
                              d
                           
                           
                              1
                           
                        
                        ,
                        …
                        ,
                        
                           
                              d
                           
                           
                              p
                           
                        
                        }
                      be the set of distinct edge-lengths of 
                        
                           
                              K
                           
                           
                              X
                           
                        
                     . We perform a binary search on L. At each step t we let 
                        
                           
                              K
                           
                           
                              t
                           
                        
                      be the subgraph of 
                        
                           
                              K
                           
                           
                              X
                           
                        
                      containing all edges of length at most 
                        
                           
                              d
                           
                           
                              t
                           
                        
                     . We can check if 
                        
                           
                              K
                           
                           
                              t
                           
                        
                      is A-survivable in at most 
                        O
                        (
                        
                           
                              n
                           
                           
                              3
                           
                        
                        )
                      time (using, for instance, an adaptation of the Push-relabel maximum flow algorithm). A minimum solution can therefore be found in a time of 
                        O
                        (
                        
                           
                              n
                           
                           
                              3
                           
                        
                        log
                        ⁡
                        n
                        )
                     .

Our main algorithm, Algorithm 1
                     , also employs a binary search on L, generating a subgraph of the potentially optimal network, before the results of the previous sections are employed to add the Steiner points and augment the subgraph to an A-survivable network.


                     
                        Theorem 10
                        
                           
                              Algorithm 1
                            
                           correctly constructs an A-survivable minimum bottleneck network on X and at most k Steiner points. The run-time of the algorithm is polynomial in n and, in particular, is 
                           
                              O
                              (
                              
                                 
                                    n
                                 
                                 
                                    2
                                    k
                                    +
                                    3
                                 
                              
                              log
                              ⁡
                              n
                              )
                            
                           in any normed plane with a polygonal or elliptical unit ball.
                        


                     
                        Proof
                        Let 
                              
                                 
                                    N
                                 
                                 
                                    opt
                                 
                              
                            be an A-survivable minimum bottleneck network on X with at most k Steiner points, such that 
                              
                                 
                                    N
                                 
                                 
                                    opt
                                 
                              
                            satisfies Lemma 2 and Theorem 5. Let S be the set of Steiner points of N. Let 
                              
                                 
                                    K
                                 
                                 
                                    ′
                                 
                              
                            be the graph produced by removing all Steiner points from 
                              
                                 
                                    N
                                 
                                 
                                    opt
                                 
                              
                            and let 
                              
                                 
                                    ℓ
                                 
                                 
                                    ′
                                 
                              
                            be the length of the bottleneck of 
                              
                                 
                                    K
                                 
                                 
                                    ′
                                 
                              
                           . Let K be the graph that results by adding all edges of 
                              
                                 
                                    K
                                 
                                 
                                    X
                                 
                              
                            to 
                              
                                 
                                    K
                                 
                                 
                                    ′
                                 
                              
                            that have length at most 
                              
                                 
                                    ℓ
                                 
                                 
                                    ′
                                 
                              
                           . Let 
                              
                                 
                                    T
                                 
                                 
                                    S
                                 
                              
                            be the subgraph of 
                              
                                 
                                    N
                                 
                                 
                                    opt
                                 
                              
                            induced by the Steiner edges of 
                              
                                 
                                    N
                                 
                                 
                                    opt
                                 
                              
                           . Clearly 
                              
                                 
                                    N
                                 
                                 
                                    ′
                                 
                              
                              :
                              =
                              K
                              ∪
                              
                                 
                                    T
                                 
                                 
                                    S
                                 
                              
                              =
                              〈
                              X
                              ∪
                              S
                              ,
                              E
                              (
                              K
                              )
                              ∪
                              E
                              (
                              
                                 
                                    T
                                 
                                 
                                    S
                                 
                              
                              )
                              〉
                            is an A-survivable minimum bottleneck network. Since Algorithm 1 considers all graphs of the form 
                              
                                 
                                    N
                                 
                                 
                                    ′
                                 
                              
                            an optimal solution will be found.

Next we consider the run time. Observe that the binary search terminates after at most 
                              O
                              (
                              log
                              ⁡
                              n
                              )
                            steps, and for each such step the most time-consuming procedure arises from the selection of regions for the Steiner points. For polygonal or elliptical planes there are 
                              O
                              (
                              
                                 
                                    n
                                 
                                 
                                    2
                                 
                              
                              )
                            regions, which gives 
                              O
                              (
                              
                                 
                                    (
                                    
                                       
                                          n
                                       
                                       
                                          2
                                       
                                    
                                    )
                                 
                                 
                                    k
                                 
                              
                              )
                            choices. For each set of regions 
                              
                                 
                                    R
                                 
                                 
                                    1
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    R
                                 
                                 
                                    k
                                 
                              
                            and for each spanning subgraph 
                              
                                 
                                    M
                                 
                                 
                                    ′
                                 
                              
                            of M the algorithm needs to check whether 
                              
                                 
                                    M
                                 
                                 
                                    ′
                                 
                              
                              ∪
                              
                                 
                                    K
                                 
                                 
                                    t
                                 
                              
                            is A-survivable. Confirming survivability takes at most 
                              O
                              (
                              
                                 
                                    n
                                 
                                 
                                    3
                                 
                              
                              )
                            time. The result follows. □

@&#CONCLUSION@&#

We present the first polynomial time algorithm for the survivable bottleneck Steiner network problem in normed planes. Our algorithm has a run-time of 
                        O
                        (
                        
                           
                              n
                           
                           
                              2
                              k
                              +
                              3
                           
                        
                        log
                        ⁡
                        n
                        )
                      in the Euclidean and rectilinear planes. The method we present is applicable in any normed plane as long as a few basic operations, such as finding the intersection of two unit balls, can be performed in constant time. Overall our result is a significant extension of previous work done in [3,4] for 1- and 2-connected bottleneck networks.

One question for further research involves finding lower-bounds for the time-complexity of the survivable bottleneck Steiner network problem. This appears to be a difficult problem and there are no relevant results in the literature, even for specific subcases of the problem. Potentially we could find a lower-bound by deriving a lower-bound for the “spanning” version of the problem (i.e., where there are no Steiner points). The currently best time-complexity for solving the spanning version is 
                        O
                        (
                        f
                        (
                        n
                        +
                        m
                        )
                        log
                        ⁡
                        n
                        )
                     , where 
                        f
                        (
                        n
                        +
                        m
                        )
                      is the smallest time required to find the connectivity matrix of a graph with n nodes and m edges.

@&#REFERENCES@&#

