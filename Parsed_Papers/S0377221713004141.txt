@&#MAIN-TITLE@&#A new method to solve the fully connected Reserve Network Design Problem

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We propose a new mixed integer programming model to solve the Reserve Network Design Problem.


                        
                        
                           
                           The model is simpler in concept and in implementation than existing exact models.


                        
                        
                           
                           The model enforces contiguity of selected sites.


                        
                        
                           
                           With small changes to the basic formulation the model can handle various related problems.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Reserve Network Design Problem

Site selection

Mixed integer programming

Contiguity

Compactness

Spatial optimisation

@&#ABSTRACT@&#


               
               
                  In selecting sites for conservation purposes connectivity of habitat is important for allowing species to move freely within a protected area. The aim of the Reserve Network Design Problem is to choose a network of contiguous sites which maximises some conservation objective subject to various constraints. The problem has been solved using both heuristic and exact methods. Heuristic methods can handle much larger problems than exact methods but cannot guarantee an optimal solution. Improvements in both computer power and optimisation algorithms have increased the attractiveness of exact methods. The aim of this work is to formulate an improved algorithm for solving the Reserve Network Design Problem.
                  Based on the concept of the transshipment problem a mixed integer programming model is formulated that achieves contiguity of the selected sites. The model is simpler in concept and to implement than previous exact models and does not require any assumptions about the regular shape of candidate sites. The method easily handles the case where more than one reserve system is required. We illustrate this with an example obtaining the trade-off between the number of contiguous areas and utility. We also illustrate that the important property of compactness can be achieved while maintaining contiguity of selected sites.
               
            

@&#INTRODUCTION@&#

The threat to species and their ecosystems due to loss of habitat from anthropogenic activities is well recognised. A common strategy to conserve biodiversity in the landscape is to purchase land where key habitats, species and ecosystems can be conserved (Snyder et al., 2004). To this end large investments are being made by European and United States governments to build conservation networks (European Commission, 2006; Farm Service Agency, 2006; Ribaudo et al., 2001; Hajkowicz et al., 2008). In Australia, the federal government has committed A$5.8 billion to the National Heritage Trust program over the period 1996–2013 (Australian Government, 2007).

The “Reserve Site Selection Problem” (RSSP) has been addressed in numerous optimisation studies since the early 1980s (Kirkpatrick, 1983; Margules et al., 1988; Haight et al., 2000; Ruliffson et al., 2003; Moilanen, 2005a,b; Newbold and Siikamaki, 2009). These studies involve selecting sites that minimise costs while meeting conservation constraints or that maximise some conservation objective subject to budget constraints (Williams et al., 2005). Pockets of isolated sites may arise in solutions to the RSSP. Often more desirable is a solution comprising a network of connected sites. The problem of choosing a contiguous set of sites which optimises an objective such as biodiversity is known as the “Reserve Network Design Problem” (RNDP) and is the focus of attention in this paper. Various objectives have been used in the RSSP and the RNDP such as species richness, rarity, diversity, shape and other attributes of a site for which protection is desired (European Commission, 2006; Pressey et al., 1993; Memtsas, 2003). Dissanayake et al. (2011) addressed a problem with the objectives of simultaneously choosing land for conservation purposes and military training.

The RNDP is NP-hard meaning that the computational effort increases exponentially with site numbers, and hence mainly heuristic methods are used especially for large scale problems (Kirkpatrick, 1983; Margules et al., 1988; Possingham et al., 1993; Williams et al., 1996; Pressey et al., 1997; Nalle et al., 2002; Cerdeira et al., 2005). For example, Pressey et al. (1993) used a greedy algorithm selecting sites in the order of greatest species’ richness. Kershaw et al. (1994) used a similar approach prioritizing sites with a high existence value of rare or endangered species with the aim of finding the minimum number of sites to represent all species at least once. Although heuristic methods are effective for large scale problems there is no guarantee that they achieve an optimal solution. Moreover, increases in computational power and improvements in optimisation algorithms will see an increasing role for exact methods in solving NP-hard problems. The remainder of this paper deals with exact methods.

A Linear Integer Programming Problem (LIP) arises when the RSSP is viewed as a set covering problem where the objective is to find the minimum number of reserve sites that contain all species at least once. Similarly, an LIP model is obtained for the maximal coverage formulation where a given number of sites are to be selected with the objective of maximising the number of species represented (Camm et al., 1996; Church et al., 1996; ReVelle et al., 2002; Rodrigues et al., 2000). These formulations did not rigorously address the RNDP where contiguity of the selected sites is also desired. Using graph theoretical methods Williams (2002) formulated the first general, practical LIP method for land acquisition that enforced contiguity. The method required the specification of the number of sites to be selected. Shirabe (2005) described this work as setting “a standard for evaluating other exact contiguity models that may follow”.

Others have also used graph theory and network optimisation (Önal and Briers, 2005, 2006; Önal and Wang, 2008; Conrad et al., 2012) to solve the RNDP. Where resources were sufficient Önal and Wang (2008) considered minimising the sum of gaps between neighbouring sites to encourage a fully connected reserve. Conrad et al. (2012) proposed a hybrid approach for finding corridors connecting multiple protected areas together. In this case contiguity of selected sites was enforced. They employ graph theoretic techniques to trim as much as 40% off the branches involved in the usual solution procedure for an MIP model.

In this paper we develop a novel mixed integer programming (MIP) formulation of the RNDP. The formulation is much simpler in both concept and implementation than other mathematical programming formulations such as those by Williams (2002) and Önal and Wang (2008). Using the concept of a transshipment problem the method is flow-based. Shirabe (2005) also used a flow-based method. This method required preselecting a site for each reserve system required in the landscape to act as a sink. The method ensures contiguity of the sites selected. In contrast to the method of Shirabe (2005) our method does not require any site to be preselected. It also deals with the flow of capital explicitly. The method works with both grids and irregularly shaped candidate sites. The method can be used to deal with the archetypal problems known as the Species Set Covering Problem (SSCP) (Moore et al., 2003; Cerdeira and Pinto, 2005) and the Maximal Species Covering Problem (MSCP) (Church et al., 1996; Polasky et al., 2001; Rosing et al., 2002). In addition to contiguity, compactness is often an important property of a solution. The method can easily accommodate this requirement with the addition of a few extra terms similar to those reported in the literature (Nalle et al., 2002; Briers, 2002; Önal and Briers, 2002, 2003; Fischer and Church, 2003; Toth and McDill, 2008; Haight and Snyder, 2009).

Cycling occurs when a sequence of selected nodes returns to a node that has already been selected. It can result in disjoint clusters of selected nodes. More details can be found in (Önal and Wang, 2008). Önal and Wang (2008) and Williams (2002) introduced additional constraints to avoid this problem. Our method ensures contiguity without incurring the problem of cycling as every node can only be visited at most once.

Being an exact method the proposed MIP model guarantees a global optimum. The model is also applicable for cases where full connectivity is not feasible or more than one fully connected reserve system is desirable in a region. In fact the model allows for the easy investigation of the trade-off between one or more fully connected reserves to be determined. This is illustrated in Section 3. First the algorithm is described in the following section. In later sections we show how the basic model can be modified to deal with two archetypal problems. Further, we make some modifications to deal with the important property of compactness and illustrate its use. We also report on some experimental results concerning the size of problem that can be solved with our method.

Consider a region comprising a mosaic of sites, each with its own attributes such as price and some measure of utility. The region can be represented by a network where each site is a node. An arc is defined between two nodes for every case where sites have a common boundary.

Our aim is to find a set of nodes that are connected and maximise the total utility of the connected nodes given a limited budget. Utility can represent various attributes that are considered desirable such as species richness, habitat suitability for threatened species, or a weighted combination of such attributes. We formulate this problem using the concept of a transshipment problem. To our network we add a supply node containing the total capital available in the budget. Each node is regarded as a transhipment node and has a demand equal to the price of land that the node represents. This demand can be met by ’shipping’ capital to the node directly from the supply node or from another transshipment node through which sufficient capital has flowed. A node whose demand has been met represents a site that has been purchased. Each purchase adds to the total utility of the reserve network. Capital cannot flow though a transshipment node without the demand at that node being met first. Capital can only flow along arcs, in other words from a transshipment node to one or more of its neighbouring nodes. In this way connectivity of the reserve is achieved. The objective is to direct the flow of capital to the nodes to maximise the aggregate utility of the nodes whose demands have been met. The concepts are illustrated in Fig. 1
                        .

The proposed model is a mixed integer program that selects a subset of sites which are fully connected to maximise the utility given a limited budget.
                           
                              (1)
                              
                                 Max
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          N
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          
                                             
                                                N
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       y
                                    
                                    
                                       ji
                                    
                                 
                                 *
                                 
                                    
                                       u
                                    
                                    
                                       i
                                    
                                 
                              
                           
                        subject to
                           
                              (2)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          N
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       0
                                       i
                                    
                                 
                                 ⩽
                                 B
                              
                           
                        
                        
                           
                              (3)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          
                                             
                                                N
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ji
                                    
                                 
                                 -
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          
                                             
                                                N
                                             
                                             
                                                i
                                             
                                          
                                          -
                                          {
                                          0
                                          }
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 =
                                 
                                    
                                       c
                                    
                                    
                                       i
                                    
                                 
                                 *
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          
                                             
                                                N
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       y
                                    
                                    
                                       ji
                                    
                                 
                                 ,
                                 
                                 ∀
                                 i
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 N
                              
                           
                        
                        
                           
                              (4)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          
                                             
                                                N
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       y
                                    
                                    
                                       ji
                                    
                                 
                                 ⩽
                                 1
                                 ,
                                 
                                 ∀
                                 i
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 N
                              
                           
                        
                        
                           
                              (5)
                              
                                 
                                    
                                       y
                                    
                                    
                                       ij
                                    
                                 
                                 ⩽
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 ,
                                 
                                 ∀
                                 i
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 N
                                 ,
                                 j
                                 ∈
                                 
                                    
                                       N
                                    
                                    
                                       i
                                    
                                 
                              
                           
                        
                        
                           
                              (6)
                              
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 ⩽
                                 B
                                 *
                                 
                                    
                                       y
                                    
                                    
                                       ij
                                    
                                 
                                 ,
                                 
                                 ∀
                                 i
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 N
                                 ,
                                 j
                                 ∈
                                 
                                    
                                       N
                                    
                                    
                                       i
                                    
                                 
                              
                           
                        
                        
                           
                              (7)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          N
                                       
                                    
                                 
                                 
                                    
                                       y
                                    
                                    
                                       0
                                       i
                                    
                                 
                                 =
                                 1
                              
                           
                        
                        
                           
                              (8)
                              
                                 
                                    
                                       y
                                    
                                    
                                       ij
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 ,
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 ⩾
                                 0
                                 ,
                              
                           
                        where x
                        0i
                         is a variable that indicates the flow of capital from the supply node (node 0) to node i; x
                        
                           ij
                         is a variable that indicates the flow of capital from node i to node j; y
                        
                           ij
                        (i,
                        j
                        =1,…,
                        N) is a binary variable indicating whether or not capital flows along the arc i, j, that is;
                           
                              (9)
                              
                                 
                                    
                                       y
                                    
                                    
                                       i
                                       ,
                                       j
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   1
                                                   ,
                                                
                                                
                                                   if
                                                   
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         ij
                                                      
                                                   
                                                   >
                                                   0
                                                
                                             
                                             
                                                
                                                   0
                                                   ,
                                                
                                                
                                                   otherwise
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        Capital flowing along the arc i, j implies that the sites corresponding to nodes i and j have both been selected. The parameters of this model are: N
                        
                           i
                         is the set of nodes connected to node i, including the source node (Node 0). For a grid-based landscape each node has 3, 5, or 8 neighbouring nodes plus the source node (see Fig. 1) while for most landscapes the neighbourhood sets need to be built manually (see Fig. 5); c
                        
                           i
                         and u
                        
                           i
                         are the price and utility, respectively, of the site corresponding to node i; B denotes the total capital available for the purchase of nodes; N is the number of nodes.

The objective function (1) sums the utility indices of all nodes whose demands have been met. In other words it sums the utility indices of all sites selected. Constraint (2) states that capital flows from the supply node to transshipment nodes should not exceed the available capital (B).

If node i is selected, constraint (3) ensures that capital cannot be transshipped from node i without first meeting its demand (i.e. the purchase cost). Constraint (4) ensures that the capital only comes into node i from one source, i.e. the corresponding node can only be purchased once (avoiding cycles). Constraints (5) and (6) ensure that y
                        
                           ij
                         is zero unless capital is flowing from node i to node j as expressed by Eq. (9). Constraint (7) allows capital to flow to one and only one site from the source node (Node 0). Thus this constraint ensures that only one contiguous subset of sites will be found.

Consider a region comprising 25 sites on a 5×5 square grid. The price and utility of each site are shown in Fig. 2
                        . Suppose that capital of $145 is available for the purchase of sites. As discussed earlier, the main purpose of the model is to find contiguous sites. To obtain a reference for comparison purposes we first solve the example as a simple site selection problem by omitting constraint (7) or equivalently changing it to 
                           
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    =
                                    1
                                 
                                 
                                    N
                                 
                              
                              
                                 
                                    y
                                 
                                 
                                    0
                                    i
                                 
                              
                              ⩽
                              N
                           
                        . By omitting any contiguity requirements sites having the highest utility indices relative to their cost are selected. The result shows nodes 4, 5, 6, 8, 9, 10, 11, 13, 15, 22, 23 and 24 have been selected (shadowed cells in Fig. 2) while the optimal value for the objective function is 70. The solution above determined the sites that would be selected if connectivity of sites was not a consideration. The above model is now applied again but this time to determine a connected set of sites. This is ensured by simply restoring constraint (7) as shown in Section 2.3. This constraint forces the total capital to ’travel’ from the supply node to one node only. From that node constraint (3) ensures that further distributions of capital flow can only flow to one or more neighbouring nodes. The process continues in this way where capital reaching a given node can only be transshipped to one of its neighbouring nodes. Transshipment can only occur from a node after its demand has been met (i.e., the corresponding site is selected for purchase). In this way a connected network of nodes is obtained. The shadowed cells in Fig. 3
                         represent the optimal network of sites obtained for this example. The optimal value of the total utility for the connected sites is 63. This is lower than the score of 70 where best sites are selected regardless of contiguity. These results also indicate that there is a trade-off between selecting sites in isolation and selecting for a network of connected sites. This trade-off is explored in more detail in the next section.

Our MIP model selects sites connected to one another to maximise a utility given a limited budget. The contiguity aspects of the problem are achieved by the inclusion of constraint (7). In fact a slight modification to constraint (7) allows us to explore the relationship between contiguity and utility. In some cases having full connectivity is not an ideal solution or it requires an unreasonable investment. For example, areas suitable for conservation might be separated by a residential area or a road. In such cases decision makers might want to sacrifice full connectivity and rather use their limited budget to increase the acquisition of land in either or both of the areas adjacent to the development.

To explore the trade-off between maximising utility and the contiguous attribute we replace constraint (7) by 
                        
                           
                              
                                 ∑
                              
                              
                                 i
                                 =
                                 1
                              
                              
                                 N
                              
                           
                           
                              
                                 y
                              
                              
                                 0
                                 i
                              
                           
                           =
                           k
                           (
                           or
                           ⩽
                           k
                           )
                        
                      where k is the number of contiguous regions (k
                     =1,2,3,…). Parameter k specifies how many connected networks are desirable for the region. Applying the modified model to an example yields the results shown in Fig. 4
                     . For reference purposes the solution is first found for the case where the contiguity constraint is either omitted or k is less than or equal to the total number of nodes. (The effect is the same). As shown in Fig. 4 the selected nodes happen to occur in four different regions. In this case a value of 115 for the objective function (utility) is achieved and all the capital is utilized (B
                     =110). Also shown in this figure are solutions to the problem with k
                     =1 (fully connected sites), k
                     =2 (two contiguous areas), and k
                     =3 (three contiguous areas). Solutions to the problem for k
                     =4 or greater yield the same solution as the case where the contiguity requirement is omitted. For the given budget, a decision-maker might note that two separate areas of contiguous sites will yield a utility nearly 14% greater than that for a single contiguous area. Compromising further on contiguity it can also be seen that three contiguous areas yield a utility that is less than 3% better than that for two areas.

The proposed method can be used to solve both the archetypal Species Set Covering Problem (SSCP) and the Maximal Covering Species Problem (MSCP). These problems require only a few small changes to the model given by Eqs. (1)–(9). Recall that site j will be selected if money flows into site j from any adjacent (neighbouring) site i. Thus to simplify the notation write 
                           
                              
                                 
                                    s
                                 
                                 
                                    j
                                 
                              
                              ≡
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    y
                                 
                                 
                                    ij
                                 
                              
                           
                         and note that s
                        
                           j
                         is equal to 1 if site j is selected and zero otherwise. The SSCP can then be formulated by changing the objective function (1) to:
                           
                              
                                 Min
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                       
                                    
                                 
                                 
                                    
                                       s
                                    
                                    
                                       j
                                    
                                 
                              
                           
                        and adding the following additional constraints:
                           
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          
                                             
                                                M
                                             
                                             
                                                k
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       s
                                    
                                    
                                       j
                                    
                                 
                                 ⩾
                                 1
                                 ,
                                 ∀
                                 k
                                 ,
                              
                           
                        where M
                        
                           k
                         is the set of candidate sites that contain species k.

Similarly the MSCP requires some model changes. Let v
                        
                           k
                        
                        =1 if species k is in a selected site and 0 otherwise. The MSCP objective function is:
                           
                              
                                 Max
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          k
                                       
                                    
                                 
                                 
                                    
                                       v
                                    
                                    
                                       k
                                    
                                 
                              
                           
                        and the following constraints should be added to the model:
                           
                              
                                 
                                    
                                       v
                                    
                                    
                                       k
                                    
                                 
                                 ⩽
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          
                                             
                                                M
                                             
                                             
                                                k
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       s
                                    
                                    
                                       j
                                    
                                 
                                 ,
                                 ∀
                                 k
                              
                           
                        Usually there is a constraint on the number of sites selected. This can be added explicitly but the budget constraint (3) already ensures a similar result. With the appropriate modifications given above our proposed transshipment method can be implemented as before and contiguity of the selected sites achieved.

The difference between the concepts of contiguity and compactness has been well-explained by Williams et al. (2005). Compactness can be achieved with our method without compromising contiguity. Some improvement in compactness can be achieved by reconstructing the neighbourhood sets, N
                        
                           i
                        . This is done by specifying only arcs between neighbouring nodes where these nodes have a large common boundary. For example, in a grid cell problem we do not connect nodes that only have a corner in common (see Fig. 1, instead of having 3, 5, or 8 neighbouring nodes, each node has 2, 3 or 4). In real landscapes we do not specify an arc between neighbouring sites that share only a small boundary (see Fig. 5
                        ).

To strengthen compactness further a more rigorous approach must be adopted in addition to the above. This involves adding another objective to the model to minimise the perimeter of the selected sites.

The proposed model is a bi-objective mixed integer program that guarantees contiguity of the selected region and at the same time drives the region to be compact. The model achieves compactness by minimising the perimeter of the selected sites while maximising the utility subject to a given budget and contiguity constraints. To define the shared boundary between two nodes we first need to introduce a new binary variable z
                           
                              ij
                           . For every two adjacent nodes,
                              
                                 (10)
                                 
                                    
                                       
                                          z
                                       
                                       
                                          i
                                          ,
                                          j
                                       
                                    
                                    =
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      1
                                                      ,
                                                   
                                                   
                                                      if
                                                      
                                                      nodes
                                                      
                                                      i
                                                      
                                                      and
                                                      
                                                      j
                                                      
                                                      are
                                                      
                                                      selected
                                                   
                                                
                                                
                                                   
                                                      0
                                                      ,
                                                   
                                                   
                                                      otherwise
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           The objective of the model is to maximise the utility and minimise the perimeter as follows,
                              
                                 (11)
                                 
                                    Max
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             =
                                             1
                                          
                                          
                                             N
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             ∈
                                             
                                                
                                                   N
                                                
                                                
                                                   i
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          y
                                       
                                       
                                          ji
                                       
                                    
                                    *
                                    
                                       
                                          u
                                       
                                       
                                          i
                                       
                                    
                                 
                              
                           
                           
                              
                                 (12)
                                 
                                    Min
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             =
                                             1
                                          
                                          
                                             N
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             ∈
                                             
                                                
                                                   N
                                                
                                                
                                                   i
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          y
                                       
                                       
                                          ji
                                       
                                    
                                    *
                                    
                                       
                                          p
                                       
                                       
                                          i
                                       
                                    
                                    -
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             =
                                             1
                                          
                                          
                                             N
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             ∈
                                             
                                                
                                                   N
                                                
                                                
                                                   i
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          z
                                       
                                       
                                          ji
                                       
                                    
                                    *
                                    
                                       
                                          b
                                       
                                       
                                          ji
                                       
                                    
                                    ,
                                 
                              
                           where p
                           
                              i
                            is the perimeter of site i and b
                           
                              ji
                            is the length of the shared boundary between site j and site i. For grid data the perimeter is calculated by considering the fact that each cell has four sides and there is a shared boundary between neighbours. Thus, in this case, the objective (12) becomes the following:
                              
                                 (13)
                                 
                                    Min
                                    
                                    4
                                    *
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             =
                                             1
                                          
                                          
                                             N
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             ∈
                                             
                                                
                                                   N
                                                
                                                
                                                   i
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          y
                                       
                                       
                                          ji
                                       
                                    
                                    -
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             =
                                             1
                                          
                                          
                                             N
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             ∈
                                             
                                                
                                                   N
                                                
                                                
                                                   i
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          z
                                       
                                       
                                          ij
                                       
                                    
                                 
                              
                           To complete the formulation of the model we add additional constraints to the formulation presented in (2.3) for expressing the logical relationship between z
                           
                              ij
                            and y
                           
                              ij
                           .

For all i
                           =1,…,
                           N and j
                           ∈
                           N
                           
                              i
                           :
                              
                                 (14)
                                 
                                    
                                       
                                          z
                                       
                                       
                                          ij
                                       
                                    
                                    ⩾
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             k
                                             ∈
                                             
                                                
                                                   N
                                                
                                                
                                                   i
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          y
                                       
                                       
                                          ki
                                       
                                    
                                    +
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             l
                                             ∈
                                             
                                                
                                                   N
                                                
                                                
                                                   j
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          y
                                       
                                       
                                          lj
                                       
                                    
                                    -
                                    1
                                 
                              
                           
                           
                              
                                 (15)
                                 
                                    
                                       
                                          z
                                       
                                       
                                          ij
                                       
                                    
                                    ⩽
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             k
                                             ∈
                                             
                                                
                                                   N
                                                
                                                
                                                   i
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          y
                                       
                                       
                                          ki
                                       
                                    
                                 
                              
                           
                           
                              
                                 (16)
                                 
                                    
                                       
                                          z
                                       
                                       
                                          ij
                                       
                                    
                                    ⩽
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             l
                                             ∈
                                             
                                                
                                                   N
                                                
                                                
                                                   j
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          y
                                       
                                       
                                          lj
                                       
                                    
                                 
                              
                           To reflect the relative priority of the two objectives, weight w, 0⩽
                           w
                           ⩽1, is assigned to one of the objectives and 1−
                           w to the other one. For example if we call the first objective as Obj
                           1 and the second objective as Obj
                           2, then the objective function can be defined as Max w
                           *
                           Obj
                           1
                           −(1−
                           w)*
                           Obj
                           2. To adjust the desired compactness the relative priority of that objective can be specified by simply adjusting w appropriately.

Consider an instance consisting of 100 sites in which the utility of each site is shown as in Fig. 6
                           . For simplicity, suppose that each site has the same price and there is enough capital to purchase twenty sites. First we applied formulation 2.3 for the data to obtain a fully connected solution, Fig. 6a. Then we removed the corner neighbouring nodes of the data and obtained a more compact solution, Fig. 6b. To further improve compactness we applied Formulation 4.2.1 to the data. To implement the bi-objective model we used a MINIMAX (bottleneck) approach. Fig. 6c shows the best attainable compact solution achieved by assigning equal weights to objectives (11) and (12) (w
                           =0.5). Fig. 6d–g shows solutions corresponding to w
                           =0.6, w
                           =0.7, w
                           =0.8, and w
                           =0.9, respectively. The graph in Fig. 7
                            shows the tradeoff between increases in utility and decreases in compactness (increases in perimeter).

@&#DISCUSSION@&#

A novel formulation of the ’Reserve Network Design Problem’ has been proposed. The formulation is based on the concept of the transshipment problem and yields a mixed integer programming model. The model is simpler in concept and to implement than previous methods. The model avoids the problem of cycling reported in other recent work. It also does not require any sink sites to be preselected. Each node in our model has an associated utility value. The model was formulated to choose nodes to maximise the sum of the utility values of all selected nodes. Utility might represent some measure of species richness, rarity value or some other desirable attribute. Multiple objectives can also be handled. The simplest way to do this would be by constructing a utility function as a weighted some of objectives. This would not have serious consequences for computational effort. The usual MINIMAX formulation can also be used but this addition of constraints that are not of a network flow type may increase the computational effort.

The proposed model is able to select a 
                        fully connected
                      set of sites that maximises some site attribute subject to a budgetary constraint. Furthermore, it is easy to explore the trade-off between the objective function and the number of contiguous regions.

It should be noted in the formulation that the flow into and out of each node in our model depends only on the arcs connecting a node to its neighbouring nodes. There is no requirement that the nodes be in a regular grid. Although the application of the model was illustrated with a regular grid network of candidate sites where all sites had the same size and shape the model is applicable for irregular systems irrespective of the shape and size of sites. For cases where there is a network of grid cells the set of neighbours for every node can be calculated automatically. In practice, the data set of adjacent nodes is all that is needed to apply our model (see Fig. 1). If two areas are adjacent regardless of their shape then an arc can be specified.

Recall that capital can only flow from one node to another node along an arc connecting two such nodes. By careful selection of arcs in the set-up stage of the problem improved compactness can be achieved in the final solution. A more rigorous approach is to explicitly include minimising the perimeter of the reserve system. This objective required only a few small changes to the basic model to achieve compactness as illustrated in the paper.

The algorithm was run for landscapes with sites in the order of 103 using ILOG CPLEX 12.2 with ILOG Concert Technology for C++ on an ordinary PC. We tested the algorithm on several problems. The experimental examples showed that the model was capable of handling large scale problems involving thousands of nodes. The computational performance is good with the number of variables and constraints growing linearly by the number of nodes, O(N) where N is the number of nodes. Table 1
                      lists some computational aspects of problems explored. The size of the model is increasing slowly because in the assumed grid landscape every node has at most 8 neighbours. A look at any map with demarcated properties suggest that most sites connect with only a few other sites, certainly less than eight. As the time complexity of the problem is exponential, there are several methods for reducing the computational effort involved in solving the MIP. Based on the transshipment model much of the structure of the model is of the form of a minimum cost network flow problem (Winston, 2004). This might offer opportunities for exploring a decomposition method. Even providing an initial solution by adopting a simple strategy such as choosing the node with the highest utility value as the first node to be purchased, for most cases examined, achieved reductions of nearly 50%.

@&#ACKNOWLEDGEMENTS@&#

The authors thank anonymous reviewers for helpful comments that have enhanced this paper.

@&#REFERENCES@&#

