@&#MAIN-TITLE@&#Application of evolutionary algorithms for optimum layout of Truss-Z linkage in an environment with obstacles

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Retrofitting of Truss-Z (TZ) – the modular system for free-form ramp networks.


                        
                        
                           
                           Planar layout of TZ link connecting two terminals with obstacles is optimized.


                        
                        
                           
                           The number of modules is minimized without violating the obstacles.


                        
                        
                           
                           Backtracking, evolution strategy (ES) and genetic algorithm (GA) are implemented.


                        
                        
                           
                           A realistic implementation of the best solution produced by GA is visualized.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Truss-Z

Modular skeletal system

Organic design

Meta-heuristic discrete optimization

Retrofitting

Pedestrian ramp

@&#ABSTRACT@&#


               
               
                  Truss-Z (TZ) is a concept of a modular system for creating free-form links and ramp networks. It is intended as a universal transportation system for cyclists and pedestrians, especially ones with strollers or carts, and in particular – by persons on wheelchairs, the elders, etc. In other words, TZ is for people who have difficulties using regular stairs or escalators. With only two types of modules, TZ can be designed for nearly any situation and therefore is particularity suited for retrofitting to improve the mobility, comfort and safety of the users. This paper presents an application of evolution strategy (ES) and genetic algorithm (GA) for optimization of the planar layout of a TZ linkage connecting two terminals in a given environment. The elements of the environment, called obstacles, constrain the possible locations of the TZ modules. Criteria of this multi-objective optimization are: the number of modules to be the smallest, which can be regarded as quantitative economical optimization, and the condition that none of the modules collides with any other objects, which can be regarded as qualitative satisfaction of the geometrical constraints. Since TZ is modular, the optimization of its layout is discrete and therefore has combinatorial characteristic. Encoding of a planar TZ path, selection method, objective (cost) function and genetic operations are introduced. A number of trials have been performed; the results generated by ES and GA are compared and evaluated against backtracking-based algorithm and random search. The convergence of solutions is discussed and interpreted. A visualization of a realistic implementation of the best solution is presented. Further evaluation of the method on three other representative layouts is presented and the results are briefly discussed.
               
            

@&#INTRODUCTION@&#

Truss-Z (TZ) is a modular truss system which can ‘organically’ adapt to almost any environment and was developed as a universal and affordable construction system for pedestrian walkways [1].
                        
                           •
                           
                              Universality: a single branch of TZ can link virtually any two terminals in space. The system also supports multiple branching, closed loops and spirals.


                              Affordability: the system is modular, and each branch of the truss is composed of only units, which are mirror reflections of each other. The unit modules are to be prefabricated and assembled on-site, preferably without the necessity for heavy equipment, or can be made on-site using templates and locally available materials.

The same concept can be adjusted in scale and shape for different purposes such as supporting cycle paths or other transportation tasks, and ventilation ducts. It is the first structural system which gives almost limitless geometrical possibilities for creating 3D paths and at the same time is modular. For discussion on free-form vs. modularity see [1]. Unlike other available modular systems, where simple forms result from assembly of simple elements, in TZ, both simple and complex forms are constructed from four variations of a single basic unit which is not overly simplified, as shown in Fig. 1
                     .

The basic module is named according to the ‘right-hand grip rule’: R, for ‘right’, since it ‘turns left and goes up’. Accordingly, the mirror reflection of R is called L, for ‘left’. Each of them, by rotation about the vertical axis can be installed in two different ways, called R2 and L2, which are also mirror reflections of each other. Therefore there are four possible ways of connecting two consecutive modules. Some elementary examples of their spatial configurations are shown in Fig. 2
                     .

In this paper, however, the problem is reduced to the projection on the 2D plane. A single trapezoid, called 1, which corresponds to units R and L2, and its rotation, called 0, which corresponds to L and R2, allow creating a path of virtually any trajectory as shown in Fig. 3
                     .

The example in Fig. 3(1) is a straight path built by of alternating 1s and 0s: 101010101010101010101; in Fig. 3(2): 1010101010010101010101; in Fig. 3(3): 111111111111; and Fig. 3(4): 1101000010011111100100011001010010000010011001110011001100010000111110010010001000001111010001010111101000101010100001010101. For a corresponding interactive demonstration see [2].

This is an updated and revised version of the conference paper [3] which introduced the evolution strategy (ES) for the optimization of a TZ link connecting two terminals in a given environment. ES which is a classic meta-heuristic method uses the operation of mutation only. In this paper an implementation of genetic algorithm (GA) that employs both mutation and recombination is presented. Two types of recombination are applied: the uniform (UX) and one-point (OPX) crossovers. New series of experiments were performed. A better solution, found by GA is presented and its realistic implementation is visualized. Three additional experiments on different layouts were performed in order to evaluate the universality of the new method.

A link connecting two terminals is to be created under the following conditions:
                        
                           1.
                           There is a given environment defined as:
                                 
                                    1.1.
                                    two fixed terminals: start (ST) and end (ET),

there are obstacles as shown in Fig. 4
                                       .

The path must not collide either with
                                 
                                    2.1.
                                    itself, or

any of the obstacles.

The initial direction of a path is set arbitrarily.

The maximum number of units is arbitrarily limited to 50.

The number of units to be minimal.

In simple cases, that is when the environment constraints are not very stringent a TZ path can be constructed manually by trial-and-error. For a corresponding interactive demonstration see [4]. Fig. 5
                     (1) shows an example of such a solution, called the Reference Path (RP). However, in more complex cases, the manual method is most likely to become too frustrating. The construction of a TZ path can be automated by a straightforward backtracking-based algorithm. For a single link connecting ST with ET, the procedure is as follows:
                        
                           1.
                           At each step a unit (1 or 0) whose centroid is closer to ET is chosen.

If such a unit collides with any object – it is switched to the opposite one (1→0 or 0→1).

If both of the units collide with any object, the procedure steps back, switches the last unit, and continues as in 1.

If the TZ path gets again to the point where appending any of the units results in collision with other objects, the procedures steps further back, switches the second last unit and continues as in 3. until all the constraints are satisfied and the TZ path reaches ET.

This procedure is robust and rather efficient. However, since it returns the first allowable solution, the result is most likely to be not globally optimal. For a corresponding interactive demonstration see [5]. More details on this method can be found in [1], and alternative methods of creating single TZ paths and path networks can be found in [6–8]. The Reference Path (RP) and the Backtracking Path (BP) are shown in Fig. 4(1) and 4(2), respectively.

Although the backtracking method produces usually rather naive solutions, it also provides very practical information – it gives an estimation of the size of a search space. For example, it can be assumed that the ideal solution in this case is composed of no more than 44 units. This means that within all 44-unit combinations of two trapezoids there are better solutions, and among them – the ideal one. There are 244
                     =17,592,186,044,416 such combinations. Intensive search, however, for such a large number is not realistic. In this particular case, graph theoretical methods, can be very effective – for instance the Dijkstra’s algorithm. However, this paper proposes and evaluates more universal approach, which can also be applied for much more complicated cases, such as multi-branch TZ networks. Therefore two classic meta-heuristic methods which were inspired by biological evolution, that is ES and GA are applied as described below.

Evolutionary algorithms (EAs) are global search heuristics inspired by evolutionary biology, particularly by inheritance, mutation, selection, and crossover mechanisms. They are used in computing to find exact or approximate solutions to optimization problems since early 1950s and were reinvented independently about ten times by various scientists [9]. In order to apply EA, it is necessary to encode the candidate solutions – so called phenotypes, into one-dimensional lists, so called – genotypes.

A single path constructed with the trapezoidal units can be encoded as a simple binary string, where 1 denotes a trapezoid which turns to the right and 0 – to the left according to the direction of the path. The genetic operations are performed on such binary encoded individuals. The configurations are relative to the initial unit which position and direction are fixed and stored separately. For practical purposes, such a notation can be more concisely expressed as numbers of a higher base. The higher the numerical base, the shorter is the notation. Base-36 is the most compact case-insensitive alphanumeric numeral system that uses ASCII characters. In base-36 the digits are represented by the Arabic numerals 0–9 and the Latin letters A–Z. Since sometimes there are 0s in the beginning of the list of TZ units, which would be truncated while converting to base-36, a 1 is appended at the beginning of every list. Therefore the configurations shown in Fig. 3 can be encoded as: 22wyd
                        36, 45sut
                        36, 6bj
                        36 and 1pw1wfnh244nqnywcv9wmi9ud
                        36, respectively.

In any mathematical optimization, it is necessary to give an appropriate numerical value to each candidate solution. Such evaluation is given by objective function, which should consistently give higher (for maximization) or lower (for minimization) values for better candidates. The case described in this paper is a minimization problem, and the objective function is called more specifically – a cost function (CF). For practical reasons, so that the optimization can be performed in realistic time, CF should also be as computationally inexpensive as possible. Constructing such a function for a constrained problem is usually difficult [10], especially when unacceptable solutions are common in the solution space as shown in Table 1
                        . Moreover, since the solution space has such voids (corresponding to unacceptable solutions), in order to reach very good solutions it is often necessary to traverse through the unacceptable ones [11]. In other words, paradoxically the unacceptable solutions must not be entirely excluded.

In this particular case the solutions are geometrically constrained by obstacles which must be avoided while constructing a TZ path. Moreover, such a path must not collide with itself. In this case, in order to simplify the calculations, it was assumed that for a single path where the best solution is short – self-intersections will not occur. Therefore this criterion was not included in CF.

When the environment is highly constrained, the probability of a draw of an unacceptable solution, that is one where the constraints are violated, is very high. This requires not only temporary acceptance of the intermediate unacceptable solutions, but also evaluation which are better than the other. After a number of trial-and-error experiments, the empirical formula of the cost function CFS
                         for a sequence of units S in a given environment was expressed as follows:
                           
                              (1)
                              
                                 
                                    
                                       CF
                                    
                                    
                                       S
                                    
                                 
                                 =
                                 
                                    
                                       G
                                    
                                    
                                       S
                                    
                                 
                                 ×
                                 
                                    
                                       P
                                    
                                    
                                       S
                                    
                                 
                              
                           
                        
                     

where GS
                         evaluates how efficiently S approaches ET (see Fig. 6
                        (1)) and PS
                         penalizes for violating the obstacles (see Fig. 6(2)):
                           
                              (2)
                              
                                 
                                    
                                       G
                                    
                                    
                                       S
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             w
                                          
                                          
                                             1
                                          
                                       
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             =
                                             1
                                          
                                          
                                             m
                                          
                                       
                                       
                                          
                                             d
                                          
                                          
                                             i
                                          
                                       
                                    
                                    
                                       m
                                    
                                 
                                 +
                                 
                                    
                                       w
                                    
                                    
                                       2
                                    
                                 
                                 
                                    min
                                 
                                 {
                                 
                                    
                                       d
                                    
                                    
                                       1
                                    
                                 
                                 
                                 …
                                 
                                 
                                    
                                       d
                                    
                                    
                                       i
                                    
                                 
                                 
                                 …
                                 
                                 
                                    
                                       d
                                    
                                    
                                       m
                                    
                                 
                                 }
                                 +
                                 
                                    
                                       w
                                    
                                    
                                       3
                                    
                                 
                                 m
                              
                           
                        
                        
                           
                              (3)
                              
                                 
                                    
                                       P
                                    
                                    
                                       S
                                    
                                 
                                 =
                                 1
                                 +
                                 
                                    
                                       
                                          
                                             w
                                          
                                          
                                             4
                                          
                                       
                                       
                                          
                                             ∑
                                          
                                          
                                             k
                                             =
                                             1
                                          
                                          
                                             U
                                          
                                       
                                       
                                          
                                             c
                                          
                                          
                                             k
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             k
                                             =
                                             1
                                          
                                          
                                             U
                                          
                                       
                                       
                                          
                                             A
                                          
                                          
                                             k
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          k
                                          =
                                          1
                                       
                                       
                                          U
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             A
                                          
                                          
                                             k
                                          
                                       
                                    
                                    
                                       1
                                       +
                                       
                                          
                                             Log
                                          
                                          
                                             
                                                
                                                   3
                                                
                                                
                                                   2
                                                
                                             
                                          
                                       
                                       [
                                       1
                                       +
                                       
                                          min
                                       
                                       {
                                       
                                          
                                             d
                                          
                                          
                                             1
                                          
                                          
                                             k
                                          
                                       
                                       
                                       …
                                       
                                       
                                          
                                             d
                                          
                                          
                                             i
                                          
                                          
                                             k
                                          
                                       
                                       
                                       …
                                       
                                       
                                          
                                             d
                                          
                                          
                                             m
                                          
                                          
                                             k
                                          
                                       
                                       }
                                       ]
                                    
                                 
                              
                           
                        
                     

where di
                         is the distance from the centroid of an ith unit to ET as shown in Fig. 6(1), m is the index of the unit um
                         which is located the closest to ET, ck
                         is the number of centroids that violate the kth obstacle as shown in Fig. 6(2), Ak
                         is the area of the kth obstacle, U is the number of obstacles, 
                           
                              
                                 
                                    d
                                 
                                 
                                    i
                                 
                                 
                                    k
                                 
                              
                           
                         is the distance between the centroids of the kth obstacle and the ith unit violating that obstacle; w
                        1, w
                        2, w
                        3, w
                        4 are parametric weights.

Different paths can reach ET with different numbers of units. In order to maintain the constant lengths of genotypes, the units that ‘go away’ from the closest proximity of ET, that is beyond um
                         are not included in the CF calculation as shown in Fig. 6. In further figures, the ignored parts are shown in light gray. The genetic operations, however, are performed on the entire genotype. The length of all genotypes was set to 44, which is the length of BP (Fig. 5(2)).

In order to calibrate the weights w
                        1, w
                        2, w
                        3, and w
                        4 for CF (formulae (2) and (3)), a number of random solutions have been generated. Representative cases have been arbitrarily selected and sorted from the best to the worst according to the authors’ intuition, as shown in Table 2.

Next, since it is a minimization problem, the weights have been adjusted so the CF values grow consistently with worsening quality of the solutions. This part of design particularly requires the knowledge specific to the investigated problem. Although some parameters of EA such as population size and the number of iterations can be determined automatically, the calibration of the weights of CF requires a number of non-obvious decisions to be taken by a designer. Therefore it seems that this process cannot be entirely automated. After a number of experiments, the values have been set as follows: w
                        1
                        =0.2, w
                        2
                        =1.5, w
                        3
                        =8, w
                        4
                        =8.

Selection is the stage of EA in which individuals are chosen from a population for later breeding, that is recombination and/or mutation. There are a few selection methods commonly used in EAs: fitness proportionate selection, also called the roulette-wheel selection, stochastic universal sampling and the tournament selection. In this paper the latter is used. Thus, after evaluating each individual in the population of solutions of size p, a pair of individuals is randomly drawn and the one with lower CF is selected for the next generation. This process is repeated p-times.

Mutation, in this case is realized by reversing the units: 0→1 or 1→0. Such alterations applied at the beginning of genotypes tend to influence phenotypes more severely. In the examples shown in Table 1
                        , mutating a single gene of RP usually results in a dramatic decrease of its quality. Although the Hamming Distance to RP equals only 1, some paths are not only much worse, but even non-allowable. Conversely, mutations at the very end of a sequence have practically no repercussions. In order to reduce this effect, the operation of mutation is defined so its probability is not equal for each locations of a gene, so called loci, but grows proportionally along a genotype. In other words, it is assumed that such a bias will result in increased resemblance of the ‘offspring’ to the ‘parents’.

The mutation rate is controlled by two parameters: mutation probability mP: [0,1], that is the probability of mutation for each genotype in the population, and the mutation intensity mi: [1,
                        n
                        G], where n
                        G is the number of genes in a genotype, which sets the number of genes to be mutated.

Since a large number experiments and trials have been performed, for simplicity, the number of iterations was set arbitrarily. At each time the search stopped after approximately the same time regardless of the quality of solutions. This allowed comparing the solutions produced by different setups at the same computational effort. However, it is also likely that the best possible solution of each setup was not reached.

At first, the original algorithm was developed using the principles of evolution strategy (ES). ES is a classic nature-inspired heuristic introduced by Ingo Rechenberg in 1960s [12]. ES like other EAs, operates on populations of candidate solutions stochastically with bias towards the individuals considered as relatively good. Unlike other EA methods, however, ES does not employ crossover, and is limited to intensive mutation.

The general procedure is based on repetition of three simple steps:
                        
                           1.
                           evaluation of each individual (solution) in a population,

random selection with a preference for good individuals for the next generation,

mutation of the selected individuals…

For simplicity and clarity, in further calculations and figures, the trapezoidal units are represented by their centroids. The obstacles are offset by the half of the TZ unit width, called the ‘offset zone’, as shown in Fig. 6(2). Thus, if centroids of a TZ path do not violate this zone, the vertices of corresponding trapezoids do not violate that obstacle.

Ten trials of nine experimental setups were performed in order to find the best combination of parameters, as shown in Table 3
                     . The best setup produced a solution of CF
                     =419. The best average solution in these series had CF
                     =517, and the standard deviation σ
                     =71.06 of the results was the lowest.

The parameters for ES that produced the best results are:
                        
                           •
                           population size p
                              =50, that is there are 50 candidate solutions in each generation;

the number of iterations i
                              =40, that is there are 40 cycles of: {evaluation, selection and genetic operation} in each trial;

mutation probability mP
                                 
                              =1, so mutation occurs in each generation;

mutation intensity mi
                                 
                              =1, that is 1 out of all 44 loci are subject to mutation.

The histories of the best trials are shown in Table 4
                     .


                     Fig. 7
                      shows more information about the best setup for the ES method. Additionally the results are compared with the random search method (RS): 10×50=500 genotypes for each of 40 generations were generated randomly. The results of ES indicate the improvement of the quality of both average and the best solutions throughout the experiment. There is no such tendency in RS.

Computer simulations of evolution started as early as in 1954 with the work of Nils Barricelli, on the computer-assisted experiments in symbiogenesis and evolution at the Institute for Advanced Study in Princeton, New Jersey [13,14]. In 1957 the Australian quantitative geneticist Alex Fraser published a series of papers on simulation of artificial selection of organisms with multiple loci controlling a measurable trait [15]. Computer simulation of evolution by biologists became more common in the early 1960s, and the methods were described in [16,17]. Fraser’s simulations included all of the essential elements of modern GAs. In addition, Hans-Joachim Bremermann published a series of papers in the 1960s that also adopted a population of solution to optimization problems, undergoing crossover, mutation, and selection. His research also included the elements of modern GA. Other noteworthy early pioneers include Richard Friedberg, George Friedman, and Michael Conrad. Many early papers are reprinted in [9].

The main difference between evolution strategy (ES) and genetic algorithm (GA) is that ES utilizes only mutation, while GA – both mutation and crossover. In principle, the crossover is applied in order to ‘filter out’ the most desirable qualities of individuals, while mutation prevents the process from falling into local optima.

Thus the general procedure is the repetition of the following steps:
                        
                           1.
                           evaluation of each individual (solution) in a population,

random selection with a preference for good individuals for the next generation,

crossover (and mutation) of the selected individuals…

Crossover, also called recombination, is a genetic operation that exchanges the genetic material between two parents in order to produce offspring of hopefully better quality. EAs utilize a variety of crossover techniques. Two experiments which apply uniform crossover and one-point crossover are described below.

Uniform crossover (UX) is a recombination method where genes of one parent at selected loci are replaced with the genes at the corresponding loci of the other parent. In this experiment, the number of genes and their positions are randomly selected. Ten trials of twelve experiment setups were performed in order to find the best combination of parameters, as shown in Table 5
                           .

In this case two setups of GAUX produced competitive results with the following parameters:
                              
                                 •
                                 the population size p
                                    =26;

the number of iterations i
                                    =80:

mutation probability mP
                                       
                                    =0.5, and

two different mutation intensities mi
                                       
                                    =1 and 2, so 1 and 2 out of 44 genes are subject to mutation, respectively.

The histories of the best trials are shown in Table 6
                           .


                           Fig. 8
                            shows more information on the setup for the GAUX that produced the best solution. Additionally the results are compared with RS: 10×26=260 genotypes for each of 80 generations were generated randomly. The results of GAUX indicate the improvement of the quality of both average and best solutions in the course of the experiment.

As Fig. 8 indicates, although this setup produced the best solution, the process itself seems to be overly stochastic due to the high mutation probability mP
                              
                           =0.5 and high mutation intensity mi
                              
                           =2. Although the mean values are substantially lower than in RS, the minimum values are relatively close. It can be assumed that such a good result in this setup was a mere luck. The other setup indicated in Table 6 produces good results more consistently, as shown in Fig. 9
                           .

Reducing the mutation intensity from 2 to 1 resulted in better convergence of the process showing rather constant improvement of the mean and minimal values of CF.

One-point crossover (OPX) is a recombination method where a single crossover point on both parents’ genotypes is selected. All data beyond that point in either one is exchanged between the two parents. Ten trials of twelve experiment setups were performed in order to find the best combination of parameters as shown in Table 7
                           .

The parameters for GAOPX that produced the best results are:
                              
                                 •
                                 the population size p
                                    =100;

the number of iterations i
                                    =20;

mutation probability mP
                                       
                                    =0.1, and mutation intensity mi
                                       
                                    =1.

The histories of the best trials are shown in Table 8
                           .


                           Fig. 10
                            shows more information about the setup for the GAOPX that produced the best solution with comparison to RS, indicating the improvement of the quality of the average and the best solutions throughout the experiment.

The best results produced by each method are collected in Table 9
                     .

The best solution (e0tpy3e
                     36) was produced by GAOPX with the following parameters: population size p
                     =100, the number of generations i
                     =20, mutation probability mP
                        
                     =0.1, mutation intensity mi
                        
                     =1, and the number of trials: 10. Two meta-heuristic methods: ES and GAOPX were capable of producing better results according to CF, than the manually constructed RP. The CF values in both cases are lower, so the solutions are supposedly better. However, RP uses only 34 units, while GAOPX also 34, and ES: 36. The latter case seems counter-intuitive, since it was expected that the best solutions will require the least number of units. In fact, CF does not only promote the shortest paths but also takes in consideration how the path is constructed. In this case RP received worse grade because the very first part of the path was ‘going away’ from ET. This, however, allowed RP to be extremely efficient in the remaining part of the TZ path. This behavior of the algorithm can be controlled by fine-tuning the weights of the first component of the cost function by assigning lower values (higher priority) to w
                     2 and w
                     3 in relation to w
                     1 in formula (2). Table 10
                      compares the best solutions and visualizes their possible spatial realizations.

Since the best solution in the entire experiment is composed of 34 units, the upper bound of the search space can be approximated as 234. By looking at the best solutions, it can be assumed that if there is a better solution, it does not have many units less. Probably one or two. In the latter case the search space would be 232
                     =4,294,967,296. In each experiment setup there were 20,000 solutions examined, therefore approximately only 0.00047% of the search space was visited. Nevertheless, the results obtained are very good. One trial took approximately two minutes on an Intel core i7 PC.

In this paper, the optimization of the TZ linkage is subject to geometrical constraints only. In practice, however, the physical properties of the materials used for the construction will most likely necessitate the introduction of intermediate supports. An example of realization of path e0tpy3e
                     36, where maximum span of unsupported units was set to four is visualized in Fig. 11
                     .

An alternative idea of supports that ‘organically grow’ from the main truss based on tetrahedral modules is outlined in [18].

A good method should be to a certain extent universal, that is capable of producing satisfactory results for a variety of cases, or at least for a certain class of problems. In order to evaluate the method described above, three additional experiments for connecting two terminals with different types of layouts were performed: without obstacles, with a ‘narrow corridor’, and with three obstacles in a stringent configuration, that is where the space of allowable solutions is relatively very small. In all the experiments the same parameter setup which produced e0tpy3e
                     36 was used (see Table 9).

In this experiment there are no obstacles and the initial unit is fixed towards ET at a small angle. Table 11
                         collects the manually created TZ path, the one generated by backtracking and the best results of ten GAOPX trials.

As Table 11 indicates, in this very simple case, the algorithm converges to rather good solutions fairly soon – within approximately ten iterations as shown in Fig. 12
                        .

This experiment was to examine the quality of solutions generated by GAOPX for a simple, however, highly constrained case of a layout where the solution is also straightforward as presented in Table 12
                        .

As shown in Table 12, four out of ten trials returned good solutions. In six trials however, the solutions although allowable, are poor. Therefore it can be concluded that the proposed method produces satisfactory results also in such highly constrained geometrical configurations. However, since the final solutions are highly dependent on the initial population, for good results, either more trials should be performed or the size of the initial population should be increased to ensure good quality results. The algorithm convergence is shown in Fig. 13
                        .

As Fig. 13 indicates, in such a case, after initial rapid improvement (up to approximately 8th iteration), further improvement, although rather gradual is not substantial.

The final experiment examines the quality of solutions generated for a layout that is similar to the original one (see Fig. 5), but more geometrically constrained as presented in Table 13
                        .

As shown in Table 13, three out of ten trials produced good solutions. In fact, much better than backtracking, and in one case, according to CF, even better than the manually created TZ path. However, the remaining seven trials returned poor results. Nevertheless, also in this experiment the results are rather satisfactory. The algorithm convergence is shown in Fig. 14
                        .

@&#CONCLUSIONS@&#

The proposed meta-heuristic method produces good solutions for finding TZ paths linking two terminals and avoiding existing obstacles in a reasonable time (twenty minutes for ten trials). Since the experiments were performed with uncompiled Mathematica code, this time can be reduced substantially. In this particular case of the TZ path optimization, graph theoretical methods, such as Dijkstra’s algorithm, are expected to produce competitive results. However, the intention was to propose and evaluate more universal approach, which can also be applied for much more complicated cases, such as multi-branch TZ networks. The proposed method produces better results than random search and in almost all cases better than the backtracking-based method.

The most important issues that are being presently investigated and the challenges for the future work are: improving the genotype encoding, further adjustments to the cost function, and the automated integration of the supporting elements with the TZ structure generation.

@&#ACKNOWLEDGMENTS@&#

This is part of a postdoctoral project grant-funded by the Japanese Society for the Promotion of Science. The research is titled ‘Improvements of the Seniors’ Quality of Life through Application of Innovative Computational Systems to the problems of Accessibility, Ergonomics and Housing & Living Environment’.

@&#REFERENCES@&#

